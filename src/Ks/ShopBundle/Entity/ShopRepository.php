<?php

namespace Ks\ShopBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ShopRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopRepository extends EntityRepository
{
    public function getNumVotesByUser(\Ks\UserBundle\Entity\User $user)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select count(*) from ks_shop_has_votes where voter_id = ? group by voter_id',
            array($user->getId())
        );
        
        return $stmt->fetchColumn();
    }
    
    /**
     *
     * @return boolean Si l'utilisateur a déjà voté sur le magasin
     */
    public function haveAlreadyVoted(\Ks\ShopBundle\Entity\Shop $shop, \Ks\UserBundle\Entity\User $user)
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('count(a.id)')
                ->from('KsShopBundle:Shop', 'a')
                ->innerJoin('a.voters', 'v')
                ->where('v.shop = ?1')
                ->andWhere('v.voter = ?2')
                ->setParameter(1, $shop->getId())
                ->setParameter(2, $user->getId());
        
        $query = $queryBuilder->getQuery();
        return (boolean)$query->getSingleScalarResult();
    }
    
    /**
     * 
     * @param \Ks\ShopBundle\Entity\Shop $
     * @param \Ks\UserBundle\Entity\User $user
     */
    public function voteOnShop(\Ks\ShopBundle\Entity\Shop $shop, \Ks\UserBundle\Entity\User $user)
    {
        $shopHasVotes = new ShopHasVotes($shop, $user);

        $shopHasVotes->setVoter($user);
        $shopHasVotes->setShop($shop);
        
        $this->_em->persist($shopHasVotes);
        $this->_em->flush();
    }
    
    /**
     *
     * @param \Ks\ShopBundle\Entity\ShopHasVotes $HasVotes 
     */
    public function removeVoteOnShop(\Ks\ShopBundle\Entity\ShopHasVotes $shopHasVotes)
    {      
        $this->_em->remove($shopHasVotes);
        $this->_em->flush();
    }
    
    public function getNumVotesOnShop(\Ks\ShopBundle\Entity\Shop $shop)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select count(*) from ks_shop_has_votes where shop_id = ? group by shop_id',
            array($shop->getId())
        );
        
        return $stmt->fetchColumn();
    }
    
    public function getShopWithUserHasVotedAndNumVotes(\Ks\UserBundle\Entity\User $user, $shopId=null)
    {
        $dbh        = $this->_em->getConnection();
        $vars       = array($user->getId(), $shopId);  
        $sqlParts   = array(
            'select' => 'SELECT'
                .' user_id, t.id, name, address, town, url_site_web, email, tel_number, status, avatar, webShop, conditions,'
                .'       (select count(1) from ks_shop_has_votes where shop_id = t.id) as numVotes, '
                .'       (select 1 from ks_shop_has_votes where shop_id = t.id and voter_id = ?) as userHasVoted, '
                .' GROUP_CONCAT(DISTINCT sport.label SEPARATOR " | ") as sports ',
            'from'  => 'FROM ks_shop t '
                .' LEFT JOIN ks_shop_has_sport s on (t.id = s.shop_id)'
                .' LEFT JOIN ks_sport sport on (s.sport_id = sport.id)',
            'where' => 'WHERE 1 ',
            'group' => 'GROUP BY t.id',
            'order' => 'ORDER BY numVotes desc, name',
            'limit' => ''
        );
        
        if ($shopId != null) $sqlParts['where'] = ' WHERE ? = t.id';
        else $sqlParts['where'] = ' WHERE ? is null';
        
        //var_dump(implode(' ', $sqlParts));
        //var_dump($vars);
        
        $stmt = $dbh->executeQuery(implode(' ', $sqlParts), $vars);
        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }
    
    /**
     * Pour supprimer un magasin
     */
    public function deleteShop(\Ks\ShopBundle\Entity\Shop $shop)
    {
        $this->_em->remove($shop);
        $this->_em->flush();
    }
    
    /**
     * Pour supprimer les sports d'un magasin
     */
    public function deleteShopHasSports($shopId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'delete from ks_shop_has_sport where shop_id = ?',
            array($shopId)
        );
        $this->_em->flush();
    }
    
    public function findShops( $params = array(), $translator = null ) {
        $dbh            = $this->_em->getConnection();
        $vars       = array();  
        $sqlParts   = array(
            'select' => 'SELECT'
                .' user_id, t.id, t.name, t.address, t.town, t.url_site_web, t.email, t.tel_number, t.status, t.avatar, t.webShop, t.conditions,'
                .'       (select count(1) from ks_shop_has_votes where shop_id = t.id) as numVotes, '
                .'       (select 1 from ks_shop_has_votes where shop_id = t.id and voter_id = ' . $params['userId']. ') as userHasVoted, '
                .' GROUP_CONCAT(DISTINCT sport.label SEPARATOR "|") as sports ',
            'from'  => 'FROM ks_shop t '
                .' INNER JOIN ks_shop_has_sport s on (t.id = s.shop_id)'
                .' INNER JOIN ks_sport sport on (s.sport_id = sport.id)'
                .' INNER JOIN ks_user u on (u.id = ' . $params['userId']. ')'
                .' INNER JOIN ks_user_detail ud on (ud.id = u.userDetail_id)',
            'where' => "WHERE 1=1",
            'group' => 'GROUP BY t.id',
            'order' => 'ORDER BY numVotes desc, name',
            'limit' => ''
        );
        
        if( isset( $params['shopsIds'] ) && !empty( $params['shopsIds'] ) ) {
            $sqlParts["where"] .= ' AND t.id in ('.implode(',', $params['shopsIds']) . ')';
        }
        
        if( isset( $params['mySports'] ) && !empty( $params['mySports'] ) ) {
            $sqlParts["from"] .= ' INNER JOIN ks_user_detail_has_sport udhs on (udhs.userdetail_id = ud.id and udhs.sport_id = s.sport_id)';
        }
                
        if( isset( $params['webShops'] ) && !empty( $params['webShops'] ) ) {
            $sqlParts["where"] .= ' AND t.webShop = '. $params['webShops'];
        }
        
        if( isset( $params['shopsWithConditions'] ) && !empty( $params['shopsWithConditions'] ) ) {
            $sqlParts["where"] .= ' AND t.conditions is not null';
        }
        
        if( isset( $params['nearby'] ) && !empty( $params['nearby'] ) ) {
            //FMO : pour l'instant uniquement sur le pays plus tard à gérer via un rayon de X km
            $sqlParts["where"] .= ' AND t.country_code = ud.country_code';
        }
        
        //var_dump(implode(' ', $sqlParts));

        //var_dump($vars);

        $stmt = $dbh->executeQuery(implode(' ', $sqlParts), $vars);

        $shops = array();
        while( $shop = $stmt->fetch(\PDO::FETCH_ASSOC) ) {
            $addShop = true;
            
            $sports = explode("|", $shop["sports"]);
            if ( $translator != null ) {
                foreach($sports as $key => $value) {
                    $sports[$key] = $translator->trans( "sports." . $value );
                }  
            }
            
            if( isset( $params['searchTerms'] ) && !empty($params['searchTerms']) && is_array($params['searchTerms']) && count( $params['searchTerms'] ) > 0 ) {
                
                //var_dump($params['searchTerms']);
                $termMatchesFound =false;
                foreach( $params['searchTerms'] as $termNum => $term ) {
                    $termMatchesFound = false;
                    
                    //Recherche dans le nom
                    if( ! $termMatchesFound ) {
                        $pos = strpos(strtolower($shop["name"]), strtolower($term));
                        if ( $pos !== false ) {
                            $termMatchesFound = true;
                        }
                    }

                    //Recherche dans l'adresse
                    if( ! $termMatchesFound ) {
                        $pos = strpos(strtolower($shop["address"]), strtolower($term));
                        if ( $pos !== false ) {
                            $termMatchesFound = true;
                        }
                    }

                    //Recherche dans la ville
                    if( ! $termMatchesFound ) {
                        $pos = strpos(strtolower($shop["town"]), strtolower($term));
                        if ( $pos !== false ) {
                            $termMatchesFound = true;
                        }
                    }
                    
                    //Recherche dans le mail
                    if( ! $termMatchesFound ) {
                        $pos = strpos(strtolower($shop["email"]), strtolower($term));
                        if ( $pos !== false ) {
                            $termMatchesFound = true;
                        }
                    }
                    
                    if( ! $termMatchesFound ) {
                        foreach( $sports as $sport ) {                       
                            //Recherche dans le sport
                            if( ! $termMatchesFound ) {
                                $pos = strpos(strtolower($sport), $term);
                                if ( $pos !== false ) {
                                    $termMatchesFound = true;
                                }
                            }
                        }
                    }
                }
                
                if( !$termMatchesFound ) $addShop = false;
            }
            
            //$shop["sports"] = $sports;
            if( $addShop ) $shops[] = $shop;
        }
        
        
        
        if( isset( $params['searchOffset'] ) && is_int($params['searchOffset']) && isset( $params['searchLimit'] ) && is_int($params['searchLimit']) ) {
            $shopsFiltered = array_slice( $shops, $params['searchOffset'], $params['searchLimit']);
            return array(
                "shops"                 => $shopsFiltered,
                "shopsNumberNotLoaded"  => count( $shops ) - count( $shopsFiltered ) - $params['searchOffset']
           );
        }                                                                    
        else return $shops;
    }
    
    /**
     *
     * @return array 
     */
    public function getMyShopsIds($userId)
    {       
        $dbh = $this->_em->getConnection();
        
        $this->shopsIds[$userId] = array();
        $sql = "select id from ks_shop where user_id = :userId";
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('userId' => $userId));
        $result1 = $stmt->fetchAll(\PDO::FETCH_COLUMN);
        
        $sql = "select shop_id from ks_shop_has_votes where voter_id = :userId ";
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('userId' => $userId));
        $result2 = $stmt->fetchAll(\PDO::FETCH_COLUMN);

        $this->shopsIds[$userId] = array_unique(array_merge(
            array_unique($result1),
            array_unique($result2)
        ));

        return $this->shopsIds[$userId];
    }
}