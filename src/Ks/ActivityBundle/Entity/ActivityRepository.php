<?php

namespace Ks\ActivityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ActivityRepository
 * 
 * TODO: faire du club sur les méthodes, vérifier celles qui sont vraiment utilisées...
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivityRepository extends EntityRepository
{

    /**
     * Définition de la requête pour récupérer les données à afficher sur les activités.
     * Le tableau $params permet de filtre / ordonner la requête
     * 
     * TODO: il faudrait éviter les sous requêtes en modifiant un peu le modèle
     * ... gérer un compteur numVotes/numWarnings sur les activités ou une 2eme table sur laquelle on pourra jointer facilement
     * ... idem pour les points sur l'utilisateur il faut les stocker au niveau de user ou user_detail
     * => ça va être "couteux" quand il y aura beaucoup de données en bdd
     * 
     * @param array $params Tableaux de paramètres
     * @return Statement pour le résultat de la requête
     */
    public function getStatementForActivity(array $params)
    {
        $dbh        = $this->_em->getConnection();
        $vars       = array();
        
        $now = new \DateTime();
        
        $sqlParts   = array(
            'select' => 'SELECT'
                .' a.id, a.type, a.connectedActivity_id, a.description, a.label, a.viewLink, a.link, a.linkDescription, a.photo, a.issuedAt, a.modifiedAt, a.trackingDatas, '
                .' a.source, a.distance, a.duration, a.sport_id, a.type, a.isValidate, a.wasOfficial, a.isPublic, a.coachingPlan_id as activityCoachingPlanId, '
                .' a.movingDuration as timeMoving, a.calories, a.depthGain, a.depthMax, a.elevationGain, a.elevationLost, a.elevationMax, ' // données pour le détail de l'activité
                .' a.scheduledAt, ' //la recherche de sportifs
                .' programmedPlace.id as programmedPlace_id, programmedPlace.town_code as programmedPlace_town_code, programmedPlace.town_label as programmedPlace_town_label, programmedPlace.county_code as programmedPlace_county_code, programmedPlace.county_label as programmedPlace_county_label, programmedPlace.region_code as programmedPlace_region_code, programmedPlace.region_label as programmedPlace_region_label, programmedPlace.country_code as programmedPlace_country_code, programmedPlace.country_label as programmedPlace_country_label, programmedPlace.full_adress as programmedPlace_fullAdress, programmedPlace.latitude as programmedPlace_latitude, programmedPlace.longitude as programmedPlace_longitude, '
                .' r.code as result_code,'
                .' p.points as earnedPoints,'
                .' club.id as club_id, club.name as club_name, club.avatar as club_avatar,'
                .' u.id as user_id, u.username as username,'
                .' ud.image_name as user_imageName, ud.firstname as user_firstName, ud.lastname as user_lastName, ud.HRMax, ud.HRRest, '
                .' ll.starNumber as ll_starNumber,'
                .' ll_category.label as ll_categoryLabel,'
                ." uhp.pack_id, (TIMESTAMPDIFF(DAY, '" . $now->format('Y-m-d') ."', uhp.startDate) <= 0) * IFNULL(TIMESTAMPDIFF(DAY, '" . $now->format('Y-m-d') ."', uhp.endDate) >= 0, 1) as isActive, "
                .' notifType.name as notificationType_name,'
                .' sport.id as sport_id, sport.label as sport_label, sport.codeSport as sport_codeSport, sport.sportType_id as sport_typeId, sportType.hexadecimalColor as sportType_hexadecimalColor,'
                .' sportGround.code as sportGround_code,'
                .' place.id as place_id, place.town_code as place_town_code, place.town_label as place_town_label, place.county_code as place_county_code, place.county_label as place_county_label, place.region_code as place_region_code, place.region_label as place_region_label, place.country_code as place_country_code, place.country_label as place_country_label, place.full_adress as place_fullAdress, place.latitude as place_latitude, place.longitude as place_longitude, '
                .' soh.id as stateOfHealth_id, soh.name as stateOfHealth_name, soh.code as stateOfHealth_code,'
                .' le.id as linkedEvent_id, le.sport_id as linkedEvent_sportId, linkedEvent_sport.codeSport as linkedEvent_sportCode, le.name as linkedEvent_name, le.content as linkedEvent_content, le.startDate as linkedEvent_startDate, le.endDate as linkedEvent_endDate, le.user_id as linkedEvent_user_id, le.club_id as linkedEvent_club_id, '
                .' ct.name as linkedEvent_coachingSession, le.content as linkedEvent_coachingSessionDetail, cc.name as linkedEvent_coachingCategory, '
                .' le.coachingPlan_id, cp.name as coachingPlan, wikiPlan.id as wikiPlan_id,'
                .' te.nom_type as linkedEvent_type,'
                .' t.id as tournament_id, t.title as tournament_title,' //Tournois
                .' at.id as articleCategoryTag_id, at.label as articleCategoryTag_label,'
                .' (select count(*) from ks_activity_has_votes where activity_id = a.id) as numVotes,'
                .' (select count(*) from ks_activity_is_disturbing where activity_id = a.id) as numWarnings,'
                .' IFNULL((select round(sum(val) / count(val), 1) from ks_activity_has_notes where activity_id = a.id and activityNote_id =1 group by activity_id), 0) as signsNote,'
                .' IFNULL((select round(sum(val) / count(val), 1) from ks_activity_has_notes where activity_id = a.id and activityNote_id =2 group by activity_id), 0) as foodNote,'
                .' IFNULL((select round(sum(val) / count(val), 1) from ks_activity_has_notes where activity_id = a.id and activityNote_id =3 group by activity_id), 0) as promotersNote,'
                .' IFNULL((select round(sum(val) / count(val), 1) from ks_activity_has_notes where activity_id = a.id and activityNote_id =4 group by activity_id), 0) as traceNote,'
                .' IFNULL((select round(sum(val) / count(val), 1) from ks_activity_has_notes where activity_id = a.id and activityNote_id =5 group by activity_id), 0) as awardsNote, '
                .' acfs.id_website_activity_service as idFromService ',
            'from'  => 'FROM ks_activity a'
                .' LEFT JOIN ks_club club on (a.club_id = club.id)'
                .' LEFT JOIN ks_user u on (a.user_id = u.id)'
                .' LEFT JOIN ks_user_has_pack uhp on (u.id = uhp.user_id)'
                .' LEFT JOIN ks_user_detail ud on (u.userDetail_id = ud.id)'
                .' LEFT JOIN ks_league_level ll on (ll.id = u.leagueLevel_id)'
                .' LEFT JOIN ks_league_category ll_category on (ll.category_id = ll_category.id)'
                .' LEFT JOIN ks_notification_type notifType on (notifType.id = a.notificationType_id)'
                .' LEFT JOIN ks_sport sport on (a.sport_id = sport.id)'
                .' LEFT JOIN ks_sport_type sportType on (sport.sportType_id = sportType.id)'
                .' LEFT JOIN ks_sport_ground sportGround on (a.sportGround_id = sportGround.id)'
                .' LEFT JOIN ks_place place on (a.place_id = place.id)'
                .' LEFT JOIN ks_place programmedPlace on (a.programmedPlace_id = programmedPlace.id)'
                .' LEFT JOIN ks_state_of_health soh on (soh.id = a.stateOfHealth_id)'
                .' LEFT JOIN ks_activity_earns_points p on (p.activitySession_id = a.id)'
                .' LEFT JOIN ks_activity_result r on (r.id = a.result_id)'
                .' LEFT JOIN ks_article_tag at on (at.id = a.categoryTag_id)'
                .' LEFT JOIN ks_event le on (le.id = a.event_id)'
                .' LEFT JOIN ks_sport linkedEvent_sport on (le.sport_id = linkedEvent_sport.id)'
                .' LEFT JOIN ks_type_event te on (te.id = le.typeEvent_id)'
                .' LEFT JOIN ks_coaching_plan cp on (cp.id = le.coachingPlan_id)'
                .' LEFT JOIN ks_coaching_session ct on (ct.id = le.coachingSession_id)'
                .' LEFT JOIN ks_coaching_category cc on (cc.id = le.coachingCategory_id)'
                .' LEFT JOIN ks_activity wikiPlan on (wikiPlan.coachingPlan_id = le.coachingPlan_id)'
                .' LEFT JOIN ks_activity_come_from_service acfs on (acfs.activity_id = a.id)'
                .' LEFT JOIN ks_tournament t on (t.id = a.tournament_id)',
            'where' => 'WHERE a.isDisabled = FALSE',
            'group' => 'GROUP BY a.id',
            'order' => '',
            'limit' => ''
        );
        if( !isset( $params['isNotValidatePossible'] ) || !$params['isNotValidatePossible'] ) {
            $sqlParts["where"] .= ' AND a.isValidate != FALSE';
        }
        
        if( isset( $params['searchTerm'] ) && $params['searchTerm'] != '' ) {
            $sqlParts["where"] .= ' AND a.label LIKE :searchTerm';
            $vars['searchTerm'] = "%" . $params['searchTerm'] . "%";
        }  
        
        // TODO: à passer dans la fonction getBaseQueryParts...
        $sqlParts['order'] = isset($params['lastModified']) && $params['lastModified'] ?
             'ORDER BY a.modifiedAt desc'
            : 'ORDER BY a.issuedAt desc';
        
        if (isset($params['offset']) && isset($params['perPage'])) {
            $sqlParts['limit'] = "LIMIT ".$params['offset'].", ".$params['perPage'];
        } else if (isset($params['perPage'])) {
            $sqlParts['limit'] = "LIMIT ".$params['perPage'];
        }
        
        // Priorité à l'activityId !
        if (isset($params['activityId']) && $params['activityId'] > 0) {  
            $sqlParts['where'] .= ' AND a.id = :activityId';
            $vars['activityId'] = $params['activityId'];
        } 
        else if (isset($params['clubId'])) {
            $sqlParts['where'] .= ' AND a.club_id = :clubId ';
            $vars['clubId']   = $params['clubId'];
        }
        else if (isset($params['userId'])) {
            if( isset( $params['myClubsIds'] ) && is_array($params['myClubsIds'])) {
                //On affiche les activités des clubs de l'utilisateur QUE pour les membres du club
                //$sqlParts['where'] .= ' AND (club.id IS NULL OR u.id = 1 OR club.id in ('.implode(',', $params['myClubsIds']).') AND a.user_id IS NULL)';
                $sqlParts['where'] .= ' AND (club.id IS NULL OR club.id in ('.implode(',', $params['myClubsIds']).') AND a.user_id IS NULL)';
            }
            else {
                //S'il n'a pas de club on n'affiche pas les actitités des autres clubs
                //$sqlParts['where'] .= ' AND (club.id IS NULL OR u.id = 1)';
                $sqlParts['where'] .= ' AND (club.id IS NULL)';
            }
        }
        
// FMO : utilité ?!
//        if (isset($params['clubId']) && $params['clubId'] > 0) {
//            $sqlParts['where'] .= ' AND club.id = :clubId';
//            $vars['clubId'] = $params['clubId'];
//        }
        
        // filtrage sur la date
        if (isset($params['date']) && $params['date'] != '') {
            $sqlParts['where'] .= ' AND SUBSTRING(a.issuedAt, 1, 10) = :issuedOn';
            $vars['issuedOn']   = $params['date'];
        }
        if (isset($params['startOn']) && $params['startOn'] != '') {
            $sqlParts['where'] .= ' AND SUBSTRING(a.issuedAt, 1, 10) >= :startOn';
            $vars['startOn']   = $params['startOn'];
        }
        if (isset($params['endOn']) && $params['endOn'] != '') {
            $sqlParts['where'] .= ' AND SUBSTRING(a.issuedAt, 1, 10) <= :endOn';
            $vars['endOn']   = $params['endOn'];
        }
        
        //filtrage sur la date de syncrhonisation
        if (isset($params['synchronizedAfter']) && $params['synchronizedAfter'] != '') {
            $sqlParts['where'] .= ' AND a.synchronizedAt > :synchronizedAfter';
            $vars['synchronizedAfter']   = $params['synchronizedAfter'];
        }
        
        if (isset($params['synchronizedOnly']) && $params['synchronizedOnly'] ) {
            $sqlParts['where'] .= ' AND a.synchronizedAt IS NOT NULL';
        }
        
        //filtrage sur 1 sport
        if (isset($params['sportId']) && $params['sportId'] != '') {
            $sqlParts['where'] .= ' AND a.sport_id = :sportId';
            $vars['sportId']   = $params['sportId'];
        }
        
        //filtrage sur l coachingPlan
        if (isset($params['coachingPlanId']) && $params['coachingPlanId'] != '') {
            $sqlParts['where'] .= ' AND a.coachingPlan_id = :coachingPlanId';
            $vars['coachingPlanId']   = $params['coachingPlanId'];
        }
        
        //filtrage sur Compétition/Entrainement
        if (isset($params['wasOfficial']) && $params['wasOfficial'] != '') {
            if( $params['wasOfficial'] )
                $sqlParts['where'] .= ' AND a.wasOfficial = :wasOfficial';
            else 
                $sqlParts['where'] .= ' AND a.wasOfficial != :wasOfficial';
            
            $vars['wasOfficial']   = '1';
        }
        
        //filtrage sur les victoires/nuls/défaites
        if (isset($params['resultCode']) && $params['resultCode'] != '') {
            $sqlParts['where'] .= ' AND r.code = :resultCode';
            $vars['resultCode']   = $params['resultCode'];
        }
        
        // filtrage sur les types d'activité
        if (isset($params['activitiesTypes']) && count($params['activitiesTypes']) > 0) {
            // FIXME: ne gère pas les types sur les partages d'activité
            if (in_array('session', $params['activitiesTypes'])) {                
                $params['activitiesTypes'][] = 'session_team_sport';
                $params['activitiesTypes'][] = 'session_endurance_on_earth';
                $params['activitiesTypes'][] = 'session_endurance_under_water';                
            }
            if (in_array('photo', $params['activitiesTypes'])) {       
                $params['activitiesTypes'][] = "photo_album";
            }
            if (in_array('link', $params['activitiesTypes'])) {       
                $params['activitiesTypes'][] = "video";
            }
            
            //anciennement or ud.ia=1 car on voulait que tous les posts du user KEEPINSPORT apparaissent sur les fils d'actu des sportifs
            //$sqlParts['where'] .= ' AND (a.type in (\''.implode("','", $params['activitiesTypes']).'\') OR u.id = 1';
            $sqlParts['where'] .= ' AND (a.type in (\''.implode("','", $params['activitiesTypes']).'\')';
            if (isset($params['userId'])) {
                if( isset( $params['myClubsIds'] ) && is_array($params['myClubsIds'])) {
                    //On affiche les activités des clubs de l'utilisateur QUE pour les membres du club
                    $sqlParts['where'] .= ' OR club.id in ('.implode(',', $params['myClubsIds']).') AND a.user_id IS NULL';
                }
                else {
                    //S'il n'a pas de club on n'affiche pas les actitités des autres clubs
                    $sqlParts['where'] .= ' OR club.id IS NULL';
                }
            }
            $sqlParts['where'] .= ')';
        }
        
        if (isset($params['fromPublicProfile']) && $params['fromPublicProfile'] ) {
            $sqlParts['where'] .= ' AND a.user_id = :userId';
            $vars['userId'] = $params['userId'];
        }
        else {
            //filtrage sur la provenance
            if (isset($params['activitiesFrom'])) {
                if (count($params['activitiesFrom']) > 0) {
                    $sqlParts['where'] .= ' AND ( 0';

                    //Les activités de l'utilisateur
                    if( isset($params['userId']) && $params['userId'] != '' && in_array("me", $params['activitiesFrom']) ) {
                        $sqlParts['where'] .= ' OR u.id = :userId';
                        $vars['userId']   = $params['userId'];
                    }

                    //Les activités des amis de l'utilisateur
                    if( isset( $params['myFriendsIds'] ) && is_array($params['myFriendsIds']) && in_array("my_friends", $params['activitiesFrom']) ) {
                        $sqlParts['where'] .= ' OR (u.id in ('.implode(',', $params['myFriendsIds']).') )';
                    }
                    
                    //Les activités des sportifs coachés par le manager
                    if( isset( $params['myAthletesIds'] ) && is_array($params['myAthletesIds']) && in_array("my_athletes", $params['activitiesFrom']) ) {
                        $sqlParts['where'] .= ' OR (u.id in ('.implode(',', $params['myAthletesIds']).') )';
                    }

                    //Les activités des clubs de l'utilisateur
                    if( isset( $params['myClubsIds'] ) && is_array($params['myClubsIds']) && in_array("my_clubs", $params['activitiesFrom']) ) {
                        $sqlParts['where'] .= ' OR (club.id in ('.implode(',', $params['myClubsIds']).') AND u.id IS NULL )';
                    }

                    //Toutes les autres activités publiques
                    if( in_array("public", $params['activitiesFrom'] ) ) {
                        $sqlParts['where'] .= ' OR a.isPublic = :isPublic ';
                        $vars['isPublic']   = (int)true;
                    }

                    //Toutes les activités de ma ligue
                    if( isset( $params['myLeagueIds'] ) && is_array($params['myLeagueIds']) && in_array("my_league", $params['activitiesFrom']) ) {
                        $sqlParts['where'] .= ' OR (u.id in ('.implode(',', $params['myLeagueIds']).') )';
                    }

                    //Avant on filtrait sur les activités de KEEPINSPORT si l'utilisateur choisissait "L'équipe Keepinsport", maintenant on affiche systématiquement les activités de l'équipe keepinsport quelque soit les filtres
                    //$sqlParts['where'] .= ' OR u.id = 1 ';
                    if( in_array("keepinsport", $params['activitiesFrom'] ) ) {
                        $sqlParts['where'] .= ' OR u.id = 1 ';
                    }
                    else $sqlParts['where'] .= ' AND u.id != 1 ';


                    if (isset($params['userId'])) {
                        if( isset( $params['myClubsIds'] ) && is_array($params['myClubsIds'])) {
                            //On affiche les activités des clubs de l'utilisateur QUE pour les membres du club
                            $sqlParts['where'] .= ' OR club.id in ('.implode(',', $params['myClubsIds']).') AND a.user_id IS NULL';
                        }
                        else {

                            //S'il n'a pas de club on n'affiche pas les actitités des autres clubs
                            $sqlParts['where'] .= ' OR club.id IS NULL';
                        }
                    }
                    $sqlParts['where'] .= ')';
                }
                else $sqlParts['where'] .= ' AND u.id != 1 AND a.isPublic = 1';
            }
        }
        
        if (isset($params['withNoPrivateCoaching']) && $params['withNoPrivateCoaching']) {
            //Pour les activités liées à des plans d'entrainements d'un club, uniquement le coach et le coachés doivent voir l'activité
            if (isset($params['clubId']) && $params['clubId']) {
                //Cas de l'affichage du fil d'actu du club
                $sqlParts['where'] .= ' AND (le.coachingPlan_id IS NULL OR le.coachingPlan_id IS NOT NULL AND a.club_id IS NOT NULL AND a.isPublic = 1)';
            }
            else {
                //Cas de l'affichage du fil d'actu d'un user
                //$sqlParts['where'] .= ' AND (le.coachingPlan_id IS NULL OR le.coachingPlan_id IS NOT NULL AND a.club_id IS NOT NULL AND a.isPublic = 0 AND a.user_id = :userId)';
                //$vars['userId']   = $params['userId'];
            }
        }
        
        // filtrage sur les sports (filtre de la page newsFeed)
        if (isset($params['sports']) && count($params['sports']) > 0) {
            if (isset($params['my_sports']) && $params['my_sports']) {
                // filtrage sur MES sports (filtre de la page newsFeed)
                $mySportsIds = $this->_em->getRepository('KsUserBundle:User')->getMySportsIds($params['userId']);
                if (count($mySportsIds) == 0) {
                    $mySportsIds = array(0);
                }
                $params['my_sports'] = $mySportsIds;
                //$sqlParts['where'] .= ' AND (u.id = 1 OR a.sport_id in (\''.implode("','", $params['my_sports']).'\', \''.implode("','", $params['sports']).'\'))';
                $sqlParts['where'] .= ' AND (a.sport_id in (\''.implode("','", $params['my_sports']).'\', \''.implode("','", $params['sports']).'\'))';
            }
            else //$sqlParts['where'] .= ' AND (u.id = 1 OR a.sport_id in (\''.implode("','", $params['sports']).'\'))';
                $sqlParts['where'] .= ' AND (a.sport_id in (\''.implode("','", $params['sports']).'\'))';
        }
        
        if (isset($params['dontGetArticles']) && $params['dontGetArticles']) {
            $sqlParts['where'] .= ' AND a.type != \'article\'';
        }
        
        if (isset($params['getArticles']) && $params['getArticles']) {
            $sqlParts['where'] .= ' AND a.type = \'article\'';
        }
        
        //Avec le lieu existant
        if (isset($params['withLocalisation']) && $params['withLocalisation']) {
            $sqlParts['where'] .= ' AND a.place_id is not null AND place.latitude is not null AND place.longitude is not null';
        }
        
        //filtrage sur une category d'articles
        if (isset($params['categoryTagId']) && $params['categoryTagId'] != '' ) {
            $sqlParts['where'] .= ' AND a.categoryTag_id = :categoryTagId';
            $vars['categoryTagId']   = $params['categoryTagId'];
        }
        
        //Mes abonnements
        if (isset($params['subscriberId']) && $params['subscriberId'] != '') {
            $sqlParts['from'] .= '  LEFT JOIN ks_activity_has_subscribers subscribtions on (subscribtions.activity_id = a.id)';
            $sqlParts['where'] .= ' AND subscribtions.subscriber_id = :subscriberId';
            $sqlParts['where'] .= ' AND (subscribtions.hasUnsubscribed is null OR subscribtions.hasUnsubscribed = FALSE)';
            $vars['subscriberId'] = $params['subscriberId'];
        }
        
        //print_r($params['myFriendsIds']);
        //if (isset($params['userId']) && $params['userId'] == 7) print_r(implode(' ', $sqlParts)); //exit;
        return $dbh->executeQuery(implode(' ', $sqlParts), $vars);
    }
    
      /**
     *
     * @param \Ks\UserBundle\Entity\User $user
     * @param array $params
     * 
     * @return array tableau de données sur les activités
     */
    public function findActivities(array $params)
    {
        $activities = array();
        
        // On détermine le périmètre à utiliser pour la requête findActivities
        if (isset($params['clubId'])) {
            // on est mode club, donc on va passer le $clubId à la requête
            //$params['clubIds'] = array($params['clubId']); 
        } else if (isset($params['activityId'])) {
            // rien de particulier, la requête va se faire sur $activityId
        } else if (isset($params['user']) && is_a($params['user'], '\Ks\UserBundle\Entity\User')) {
            $params['userId'] = $params['user']->getId();
                    
            // on détermine le périmètre en fonction de $perimenter
            $userRep    = $this->_em->getRepository('KsUserBundle:User');
            $user       = $params['user'];
            $clubIds    = $userRep->getClubIds($user->getId());
            if (count($clubIds) == 0) {
                $clubIds = array(0);
            }
            $params['myClubsIds'] = $clubIds;
            
            $friendIds = $userRep->getFriendIds($user->getId());
            if (count($friendIds) == 0) {
                $friendIds = array(0);
            }
            $params['myFriendsIds'] = $friendIds;
            
            $athletesIds = $userRep->getAthletesIds($user->getId());
            if (count($athletesIds) == 0) {
                $athletesIds = array(0);
            }
            $params['myAthletesIds'] = $athletesIds;
            
            $myLeagueIds = $userRep->getMyLeagueIds($user->getId());
            if (count($myLeagueIds) == 0) {
                $myLeagueIds = array(0);
            }
            $params['myLeagueIds'] = $myLeagueIds;
        } else {
            //throw new \Exception('Paramètres invalides pour findActivities');
        }

        $stmt = $this->getStatementForActivity($params);
//var_dump($stmt);
        // requête pour récupérer les commentaires associés à chaque activité
        $commentStmt    = $this->getPreparedStatementForActivityComments();
        $userPointsStmt = $this->getPreparedStatementForUserPoints(true);
        
        $userPoints     = array();
        while ($activity = $stmt->fetch(\PDO::FETCH_ASSOC)) {
            
            if( isset( $params['extendedSearch'] ) && $params['extendedSearch'] ) {
                if( isset( $params['searchTerms'] ) && !empty($params['searchTerms']) && is_array($params['searchTerms']) && count( $params['searchTerms'] ) > 0 ) {

                    //var_dump($params['searchTerms']);
                    $termMatchesFound = array();
                    foreach( $params['searchTerms'] as $termNum => $term ) {
                        $termMatchesFound[$termNum] = false;

                        //Recherche dans le pseudo
                        if( ! $termMatchesFound[$termNum] ) {
                            $pos = strpos(strtolower($user["username"]), $term);
                            if ( $pos !== false ) {
                                $termMatchesFound[$termNum] = true;
                            }
                        }

                        //Recherche dans le prénom
                        if( ! $termMatchesFound[$termNum] ) {
                            $pos = strpos(strtolower($user["firstName"]), $term);
                            if ( $pos !== false ) {
                                $termMatchesFound[$termNum] = true;
                            }
                        }

                        //Recherche dans le nom
                        if( ! $termMatchesFound[$termNum] ) {
                            $pos = strpos(strtolower($user["lastName"]), $term);
                            if ( $pos !== false ) {
                                $termMatchesFound[$termNum] = true;
                            }
                        }

                        //Recherche dans la ville
                        if( ! $termMatchesFound[$termNum] ) {
                            $pos = strpos(strtolower($user["town"]), $term);
                            if ( $pos !== false ) {
                                $termMatchesFound[$termNum] = true;
                            }
                        }

                        /*if( ! $termMatchesFound[$termNum] ) {
                            $sportTranslated = $translator->trans( "sports." . $activity['id'] );                       
                            //Recherche dans le sport
                            if( ! $termMatchesFound[$termNum] ) {
                                $pos = strpos(strtolower($sport), $term);
                                if ( $pos !== false ) {
                                    $termMatchesFound[$termNum] = true;
                                }
                            }

                        }*/
                    }
                }
            }
            
            if( !isset( $params['getExtraDatas'] ) || ( isset( $params['getExtraDatas'] ) && $params['getExtraDatas'] )) {
            
                // on récupère les commentaires de l'activité à partir de la requête préparée
                $commentStmt->execute(array('activityId' => $activity['id']));

                if (!array_key_exists($activity['user_id'], $userPoints)) {
                    $userPointsStmt->execute(array(
                        'userId'    => $activity['user_id'],
                        'startOn'   => date('Y-m-01') // FIXME: != beginSeasonDate!!! En dur dans le code !!!!
                    ));
                    $userPoints[$activity['user_id']] = $userPointsStmt->fetchColumn(); 
                }
                $activity['userPoints'] = $userPoints[$activity['user_id']];
                //var_dump($this->getActivityExtraDatas($activity));
                $activities[] = array_merge(
                    array('activity' => $activity),
                    $this->getActivityExtraDatas($activity),
                    array('comments' => $commentStmt->fetchAll(\PDO::FETCH_ASSOC))
                );
            } else {
                $activities[] = $activity;
            }
        }
        
        // FIXME: il faut définir (et utiliser) une fonction findOneActivityDatas($activityId)
        // ... à la place de findActivities(array('activityId' => $activityId))
        if (isset($params['activityId']) && count($activities) == 1 || isset($params['lastOne']) && $params['lastOne']) {
            return $activities[0];
        } else {
            return $activities;
        }
    }
    
    /**
     *
     * @param int $activityId
     * @return type 
     */
    public function getRawTrackingDatasOnActivityId($activityId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select trackingDatas from ks_activity where id = :activityId',
            array('activityId' => $activityId)
        );
        $res    = $stmt->fetchColumn();
        
        return $res != false ? $res : '';
    }
    
    /**
     * Récupère le tableau des scores d'une activité.
     * 
     * @param int $activityId
     * @return array
     */
    public function getScoresOnActivityId($activityId)
    {
        $dbh        = $this->_em->getConnection();
        $scoresStmt = $dbh->executeQuery(
            'select score1, score2, roundOrder'
            .' from ks_score'
            .' where activity_id = ?'
            .' order by roundOrder asc',
            array($activityId)
        );
       
        return $scoresStmt->fetchAll(\PDO::FETCH_ASSOC);
    }
    
    /**
     *
     * @param int $activityId
     * @return array 
     */
    public function getActivityDatas($activityId)
    {
        $qParams    = array('activityId' => (int)$activityId);
        $stmt       = $this->getStatementForActivity($qParams);   
        $res        = $stmt->fetch(\PDO::FETCH_ASSOC);
        
        return $res ? $res : null;
    }
    
    /**
     * 
     * @param array $activity
     * @return type
     */
    public function getActivityExtraDatas(array $activity)
    {
        $dbh        = $this->_em->getConnection();
        $activityId = $activity['id'];
        
        // si c'est un partage d'activité on récupère l'activite partagée
        $connectedActivity = null;
        if ($activity['connectedActivity_id'] != null) {
            $connectedActivity  = $this->getActivityDatas($activity['connectedActivity_id']);
            $activityId         = $activity['connectedActivity_id'];
            
            // Si l'activité partagée est un article on récupère aussi le dernier titre/description
            // à partir du tableau des modifications
            if ($connectedActivity['type'] == 'article') {
                $connectedActivity['modifications'] = $this->getModificationsOnArticle($activity['connectedActivity_id']);
            }
        }
        
        $photoStmt              = $dbh->executeQuery('select * from ks_photo where activity_id = ?', array($activityId));
        
        // si besoin, on récupère les teamates/opponents
        $activityTeamatesStmt   = $dbh->executeQuery(
            'select u.id, u.username from ks_user_participates_activity upa'
                .' inner join ks_user u on (u.id = upa.user_id) where activitySession_id = ?',
            array($activity['id'])
        );
        $activityOpponentsStmt  = $dbh->executeQuery(
            'select u.id, u.username from ks_opponents_participates_activity opa'
                .' inner join ks_user u on (u.id = opa.user_id) where activitySession_id = ?',
            array($activity['id'])
        );
        
        
        $clubManagersStmt = $this->getPreparedStatementForClubManagers();
        $clubManagers = array();
        if( $activity['club_id'] != null) {
            $clubManagersStmt->execute(array('clubId' => $activity['club_id']));
            $clubManagers = $clubManagersStmt->fetchAll(\PDO::FETCH_ASSOC);
        }
       
        return array(
            'activityTeamates'  => $activityTeamatesStmt->fetchAll(\PDO::FETCH_ASSOC),
            'activityOpponents' => $activityOpponentsStmt->fetchAll(\PDO::FETCH_ASSOC),
            'activityScores'    => $this->getScoresOnActivityId($activityId),
            'connectedActivity' => $connectedActivity,
            'photos'            => $photoStmt->fetchAll(\PDO::FETCH_ASSOC),
            'clubManagers'      => $clubManagers
        );
    }
    
    /**
     *
     * @param bool $withStartOn default false
     * @return PreparedStatement 
     */
    public function getPreparedStatementForUserPoints($withStartOn = false, $withEndOn = false, $withActivity = false, $withSport = false, $withCountry = false, $withTest = false)
    {
        $dbh    = $this->_em->getConnection();
        
        $sql    =  'SELECT SUM(p.points) from ks_activity_earns_points p'
            .' INNER JOIN ks_activity a on (a.id = p.activitySession_id)'
            .' INNER JOIN ks_user u on (u.id = p.user_id)'
            .' INNER JOIN ks_user_detail ud on (ud.id = u.userDetail_id)'
            .' LEFT JOIN ks_event e on (e.id = a.event_id)'
            .' WHERE p.user_id = :userId'
            .' AND a.isDisabled = FALSE'
            .' AND a.isValidate != FALSE';
        
        if ($withStartOn) {
            $sql .= ' and SUBSTRING(a.issuedAt, 1, 10) >= :startOn';
            $sql .= ' and SUBSTRING(e.startDate, 1, 10) >= :startOn';
        }
        
        if ($withEndOn) {
            $sql .= ' and SUBSTRING(a.issuedAt, 1, 10) <= :endOn';
            $sql .= ' and SUBSTRING(e.endDate, 1, 10) <= :endOn';
        }
        
        if ($withActivity) {
            $sql .= ' and p.activitySession_id = :activityId';
        }
        
        if ($withSport) {
            $sql .= ' and (a.sport_id = :sportId OR :sportId = -1)';
        }
        
        if ($withCountry) {
            $sql .= ' and (ud.country_code = :countryCode OR :countryCode = -1)';
        }
        
        if( $withTest ) {
            var_dump("getPreparedStatementForUserPoints : ", $sql);
        }
        
        return $dbh->prepare($sql);
    }
    
    public function getPreparedStatementForUserActivitiesNumber($withStartOn = false, $withEndOn = false)
    {
        $dbh    = $this->_em->getConnection();
        $params = array();
        $sql    =  'select COUNT(a.id) from ks_activity a'
            .' LEFT JOIN ks_event e on (e.id = a.event_id)'
            .' where a.user_id = :userId'
            .' AND a.isDisabled = FALSE'
            .' AND a.isValidate != FALSE'
            .' AND a.type in (
                "session",
                "session_team_sport",
                "session_endurance_on_earth",
                "session_endurance_under_water"
            )';
        
        if ($withStartOn) {
            $sql .= ' and SUBSTRING(a.issuedAt, 1, 10) >= :startOn';
            $sql .= ' and SUBSTRING(e.startDate, 1, 10) >= :startOn';
        }
        
        if ($withEndOn) {
            $sql .= ' and SUBSTRING(a.issuedAt, 1, 10) <= :endOn';
            $sql .= ' and SUBSTRING(e.endDate, 1, 10) <= :endOn';
        }
        
        return $dbh->prepare($sql);
    }
    
    /**
     * 
     * @return type
     */
    protected final function getPreparedStatementForActivityComments($withCommentId = false)
    {
        $dbh        = $this->_em->getConnection();
        $commentSql = 'select c.*, u.username as user_username, u.id as user_id,'
            .' ud.image_name as user_imageName,'
            .' ll.starNumber as ll_starNumber,'
            .' ll_category.label as ll_categoryLabel'
            .' FROM ks_comment c'
            .' inner join ks_user u on (u.id = c.user_id)'
            .' LEFT JOIN ks_user_detail ud on (u.userDetail_id = ud.id)'
            .' LEFT JOIN ks_league_level ll on (ll.id = u.leagueLevel_id)'
            .' INNER JOIN ks_league_category ll_category on (ll.category_id = ll_category.id)'
            .' where 1';
            
        
        if ($withCommentId) {
            $commentSql .= ' and c.id = :commentId';
        } else {
            $commentSql .= ' and c.activity_id = :activityId';
        }
        
        $commentSql .= ' ORDER BY c.commentedAt asc';
        
        return $dbh->prepare($commentSql);
    }
    
    /**
     * 
     * @return type
     */
    protected final function getPreparedStatementForClubManagers()
    {
        $dbh        = $this->_em->getConnection();
        $managersSql = 'select u.id '
            .' FROM ks_user_manage_clubs club_managers'
            .' INNER JOIN ks_user u on (u.id = club_managers.user_id)'
            .' where club_managers.club_id = :clubId';
        
        return $dbh->prepare($managersSql);
    }
    
    /**
     * FIXME: à déplacer dans articleRepository
     * @param type $articleId
     * 
     * @return array  
     */
    public function getModificationsOnArticle($articleId)
    {
        $dbh = $this->_em->getConnection();
        $res = $dbh->executeQuery(
            'select content from ks_user_modifies_article where article_id = :articleId'
            .' order by modifiedAt desc limit 1',
            array('articleId' => $articleId)
        );
        $modifications = $res->fetch(\PDO::FETCH_ASSOC);
        
        if (!$modifications) {
            return null;
        }
        
        $content = json_decode($modifications['content']);
        
        return array(
            'title'         => isset( $content->title ) ? base64_decode($content->title) : "",
            'description'   => isset( $content->description ) ? base64_decode($content->description) : "",
            'tags'          => isset( $content->tags ) ? $content->tags : array()
        );
    }
    
    /**
     *
     * @param \Ks\ActivityBundle\Entity\Activity $activity 
     */
    public function getCommentsOnActivity(\Ks\ActivityBundle\Entity\Activity $activity)
    {
        $stmt = $this->getPreparedStatementForActivityComments(false);
        $stmt->execute(array(
            'activityId' => $activity->getId()
        ));
        
        return $stmt->fetchAll();
    }
    
    /**
     * 
     * @param type $commentId
     */
    public function getCommentDatas($commentId)
    {
        $stmt = $this->getPreparedStatementForActivityComments(true);
        $stmt->execute(array('commentId' => $commentId));
        
        return $stmt->fetch(\PDO::FETCH_ASSOC);
    }
        
  
    
    public function findLastSynchronizedActivities($params) {
        $params['perimeter'] = 'me';
        $params['activitiesTypes'] = array('session');
        
        if (isset($params['user']) && is_a($params['user'], '\Ks\UserBundle\Entity\User')) {
            $params['synchronizedAfter'] = $params['user']->getLastLogin()->format('Y-m-d H:i:s');
        }
        
        $params['synchronizedOnly'] = true;
        
        $activities = $this->findActivities($params);
        return $activities;
    }
    
    /**
     *
     * @param \Ks\UserBundle\Entity\User $user
     * @param array $params
     * 
     * @return array tableau de données sur les activités
     */
    public function findLocalisedSportingActivities(array $params)
    {
        $activities = array();
        
        if (isset($params['user']) && is_a($params['user'], '\Ks\UserBundle\Entity\User')) {
            $params['userId'] = $params['user']->getId();
                    
            // on détermine le périmètre en fonction de $perimenter
            $userRep    = $this->_em->getRepository('KsUserBundle:User');
            $user       = $params['user'];
            
            $friendIds = $userRep->getFriendIds($user->getId());
            if (count($friendIds) == 0) {
                $friendIds = array(0);
            }
            $params['myFriendsIds'] = $friendIds;
        }
        
        $dbh        = $this->_em->getConnection();
        $vars       = array();
        $sqlParts   = array(
            'select' => 'SELECT'
                .' a.id, '
                .' place.latitude as place_latitude, place.longitude as place_longitude ',
            'from'  => 'FROM ks_activity a'  
                .' INNER JOIN ks_place place on (a.place_id = place.id)',
            'where' => 'WHERE a.isDisabled = FALSE'
                .' AND a.isValidate != FALSE',
            'group' => 'GROUP BY a.id',
            'order' => '',
            'limit' => ''
        );

        //filtrage sur la provenance
        if (isset($params['activitiesFrom']) && count($params['activitiesFrom']) > 0) {
            $sqlParts['where'] .= ' AND ( 0';
                //Les activités de l'utilisateur
                if( isset($params['userId']) && $params['userId'] != '' && in_array("me", $params['activitiesFrom']) ) {
                    $sqlParts['where'] .= ' OR a.user_id = :userId';
                    $vars['userId']   = $params['userId'];
                }

                //Les activités des amis de l'utilisateur
                if( isset( $params['myFriendsIds'] ) && is_array($params['myFriendsIds']) && in_array("my_friends", $params['activitiesFrom']) ) {
                    $sqlParts['where'] .= ' OR (a.user_id in ('.implode(',', $params['myFriendsIds']).') )';
                }

                //Les activités des clubs de l'utilisateur
                if( isset( $params['myClubsIds'] ) && is_array($params['myClubsIds']) && in_array("my_clubs", $params['activitiesFrom']) ) {
                    $sqlParts['where'] .= ' OR (a.club_id in ('.implode(',', $params['myClubsIds']).') AND a.user_id IS NULL )';
                }

                //Toutes les autres activités publiques
                 if( in_array("public", $params['activitiesFrom'] ) ) {
                    $sqlParts['where'] .= ' OR a.isPublic = :isPublic ';
                    $vars['isPublic']   = (int)true;
                }

            $sqlParts['where'] .= ')';
        }
        
        //filtrage sur un sport
        if (isset($params['sportId']) && $params['sportId'] != "" && $params['sportId'] != null) {
             $sqlParts['where'] .= ' AND a.sport_id = :sportId';
             $vars['sportId']   = $params['sportId'];
        }
        
        $params['activitiesTypes'] = array(
            'session',
            'session_team_sport',
            'session_endurance_on_earth',
            'session_endurance_under_water'
        );
        
        $sqlParts['where'] .= ' AND a.type in (\''.implode("','", $params['activitiesTypes']).'\')';
//var_dump($sqlParts);
        $stmt = $dbh->executeQuery(implode(' ', $sqlParts), $vars);
        
        while ($activity = $stmt->fetch(\PDO::FETCH_ASSOC)) {
            $activities[] = $activity;
        }

        return $activities;
    }
    
    /**
     *
     * @return array collection d'activités des amis qui ne sont pas encore affichées sur la page de l'utilisateur
     */
    public function findNotDisplayedFriendActivities(\Ks\UserBundle\Entity\User $user, $lastDisplayedActivityId, $lastRefreshTime)
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
 
        $queryBuilder->select('a')
            ->from('KsActivityBundle:Activity', 'a')
            ->innerJoin('a.user', 'u')
            ->leftJoin('u.friendsWithMe', 'f1')
            ->leftJoin('u.myFriends', 'f2')
            ->where('f1.user = ?1')
            ->orWhere('f2.friend = ?1')
            ->orWhere('u.id = ?1')
            ->andWhere('a.issuedAt > ?2')
            //->andWhere('a.id > ?3')
            ->orderBy('a.issuedAt', 'DESC')
            ->setParameter(1, $user->getId())
            ->setParameter(2, date('Y-m-d H:i:s', $lastRefreshTime));
            //->setParameter(3, $lastDisplayedActivityId);

        $query = $queryBuilder->getQuery();
        
        return $query->getResult();
    }
    
    /**
     * 
     * @param \Ks\ActivityBundle\Entity\Activity $activity
     * @param \Ks\UserBundle\Entity\User $user
     */
    public function voteOnActivity(\Ks\ActivityBundle\Entity\Activity $activity, \Ks\UserBundle\Entity\User $user)
    {
        $activityHasVotes = new ActivityHasVotes($activity, $user);

        $activityHasVotes->setVoter($user);
        $activityHasVotes->setActivity($activity);
        
        $this->_em->persist($activityHasVotes);
        $this->_em->flush();
    }
    
    /**
     *
     * @param \Ks\ActivityBundle\Entity\ActivityHasVotes $activityHasVotes 
     */
    public function removeVoteOnActivity(\Ks\ActivityBundle\Entity\ActivityHasVotes $activityHasVotes)
    {      
        $this->_em->remove($activityHasVotes);
        $this->_em->flush();
    }
    
    /**
     * 
     */
    public function getNumVotesOnActivity(\Ks\ActivityBundle\Entity\Activity $activity)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select count(*) from ks_activity_has_votes where activity_id = ? group by activity_id',
            array($activity->getId())
        );
        
        return $stmt->fetchColumn();
    }
    
    /**
     *
     * @param \Ks\ActivityBundle\Entity\Activity $activity
     * @return int 
     */
    public function getNumWarningsOnActivity(\Ks\ActivityBundle\Entity\Activity $activity)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select count(*) from ks_activity_is_disturbing where activity_id = ? group by activity_id',
            array($activity->getId())
        );
        
        return $stmt->fetchColumn();
    }
    
    /**
     *
     * @return boolean Si l'utilisateur a déjà voté sur l'activité
     */
    public function haveAlreadyVoted(\Ks\ActivityBundle\Entity\Activity $activity, \Ks\UserBundle\Entity\User $user)
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('count(a.id)')
                ->from('KsActivityBundle:Activity', 'a')
                ->innerJoin('a.voters', 'v')
                ->where('v.activity = ?1')
                ->andWhere('v.voter = ?2')
                ->setParameter(1, $activity->getId())
                ->setParameter(2, $user->getId());
        
        $query = $queryBuilder->getQuery();
        return (boolean)$query->getSingleScalarResult();
    }
    
    /**
     * Si l'utilisateur n'a jamais été abonné
     */
    public function subscribeOnActivity(\Ks\ActivityBundle\Entity\Activity $activity, \Ks\UserBundle\Entity\User $user)
    {
        $activityHasSubscribers = new ActivityHasSubscribers($activity, $user);

        $activityHasSubscribers->setSubscriber($user);
        $activityHasSubscribers->setActivity($activity);
        
        $activity->addActivityHasSubscribers($activityHasSubscribers);
        $user->addActivityHasSubscribers($activityHasSubscribers);
        
        $this->_em->persist($activityHasSubscribers);
        $this->_em->persist($activity);
        $this->_em->persist($user);
        $this->_em->flush();
    }
    
    /**
     * Si l'utilisateur a déjà été abonné mais qu'il s'était désabonné
     */
    public function subscribeAgainOnActivity(\Ks\ActivityBundle\Entity\ActivityHasSubscribers $activityHasSubscribers)
    {
        $activityHasSubscribers->setHasUnsubscribed(null);

        $this->_em->persist($activityHasSubscribers);
        $this->_em->flush();
    }
    
    public function unsubscribeOnActivity(\Ks\ActivityBundle\Entity\ActivityHasSubscribers $activityHasSubscribers)
    {         
        $activityHasSubscribers->setHasUnsubscribed(true);
        
        $this->_em->persist($activityHasSubscribers);
        $this->_em->flush();
    }
    
    /**
     *
     * @return boolean S'il est abonné et qu'il ne s'est pas désabonné de lui même
     */
    public function hasNotUnsubscribed(\Ks\ActivityBundle\Entity\Activity $activity, \Ks\UserBundle\Entity\User $user)
    {      
        $qb     = $this->_em->createQueryBuilder();
        $query  = $qb
            ->select('count(s)')
            ->from('KsActivityBundle:ActivityHasSubscribers', 's')
            ->where('s.activity = ?1')
                ->setParameter(1, $activity->getId())
            ->andWhere('s.subscriber = ?2')
                ->setParameter(2, $user->getId())
            ->andWhere('s.hasUnsubscribed is null')
            ->getQuery();
        
        return $query->getSingleScalarResult() > 0 ? true : false;
    }
    
    /**
     * 
     * @return boolean Si n'est pas abonné et qu'il ne s'est pas désabonné de lui même
     */
    public function isNotSubscribed(\Ks\ActivityBundle\Entity\Activity $activity, \Ks\UserBundle\Entity\User $user)
    {      
        $qb     = $this->_em->createQueryBuilder();
        $query  = $qb->select('count(s)')
            ->from('KsActivityBundle:ActivityHasSubscribers', 's')
            ->where('s.activity = ?1')
            ->andWhere('s.subscriber = ?2')
            ->setParameter(1, $activity->getId())
            ->setParameter(2, $user->getId())
            ->getQuery();
        
        return $query->getSingleScalarResult() > 0 ? false : true;
    }
    
    /**
     * Pour désactiver une activité
     */
    public function disableActivity(\Ks\ActivityBundle\Entity\Activity $activity)
    {
        $activity->setIsDisabled(true);
        $this->_em->flush();
    }
    
    /**
     * Pour supprimer une activité
     */
    public function deleteActivity(\Ks\ActivityBundle\Entity\Activity $activity)
    {
        //Si l'activité a été importée par un service de synchro, on fait un "soft delete"
        //Idem pour les activités liées à des plans d'entrainements d'un club, si on lance le remove, l'event associé est supprimé par la foreign key !
        
        if ($activity->getSynchronizedAt() != null || $activity->getClub() != null && $activity->getEvent() != null) {
            $activity->setIsDisabled(true);
            $this->_em->persist($activity);
        }
        else {
            $this->_em->remove($activity);
        }
        $this->_em->flush();
    }
    
    /**
     * Pour masquer une activité
     */
    public function hideActivity(\Ks\ActivityBundle\Entity\Activity $activity, \Ks\UserBundle\Entity\User $user)
    {
        $user->addActivitiesIHaveHidden($activity);
        $this->_em->persist($user);
        $this->_em->persist($activity);
        $this->_em->flush();
    }
    
    public function warnActivityLikeDisturbing(\Ks\ActivityBundle\Entity\Activity $activity, \Ks\UserBundle\Entity\User $user)
    {
        $activityIsDisturbing = new ActivityIsDisturbing($activity, $user);

        $activityIsDisturbing->setUser($user);
        $activityIsDisturbing->setActivity($activity);
        
        $this->_em->persist($activityIsDisturbing);
        $this->_em->flush();
    }
    
    public function removeWarnActivityLikeDisturbing(\Ks\ActivityBundle\Entity\ActivityIsDisturbing $activityIsDisturbing)
    {      
        $this->_em->remove($activityIsDisturbing);
        $this->_em->flush();
    }
    
    /**
     *
     * @return boolean Si l'utilisateur a déjà signalé l'activité comme dérangeante
     */
    public function haveAlreadyWarnedLikeDisturbing(\Ks\ActivityBundle\Entity\Activity $activity, \Ks\UserBundle\Entity\User $user)
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('count(a.id)')
                ->from('KsActivityBundle:Activity', 'a')
                ->innerJoin('a.usersWhoWarnedLikeDisturbing', 'uwwld')
                ->where('uwwld.activity = ?1')
                ->andWhere('uwwld.user = ?2')
                ->setParameter(1, $activity->getId())
                ->setParameter(2, $user->getId());
        
        $query = $queryBuilder->getQuery();
        return (boolean)$query->getSingleScalarResult();
    }
    
    /**
     * 
     * @param \Ks\ActivityBundle\Entity\ActivitySession $activitySession
     * @param \Ks\ActivityBundle\Entity\StateOfHealth $stateOfHealth
     */
    public function changeStateOfHealthOnActivitySession(\Ks\ActivityBundle\Entity\ActivitySession $activitySession, \Ks\ActivityBundle\Entity\StateOfHealth $stateOfHealth)
    {
        $activitySession->setStateOfHealth($stateOfHealth);
        
        $this->_em->persist($activitySession);
        $this->_em->flush();
    }
 
    /**
     * 
     * @param \Ks\ActivityBundle\Entity\Activity $activity
     */
    public function updateLastModificationDate(\Ks\ActivityBundle\Entity\Activity $activity)
    {      
        $activity->setModifiedAt(new \DateTime());
        
        $this->_em->persist($activity);
        $this->_em->flush();
    }
    
    /**
     *
     * @param \Ks\UserBundle\Entity\User $user
     * @param $limit si on souhaite récupérer tout ou un certain nombre
     * @return array collection de liens postés par l'utilisateur passé en paramètre
     */
    public function findLinksFromUser(\Ks\UserBundle\Entity\User $user, $limit = false)
    {      
        $qb = $this->_em->createQueryBuilder();

        $qb ->select('a')
            ->from('KsActivityBundle:ActivityStatus', 'a')
            ->where('a.user = ?1')
            ->andWhere('a.isDisabled = FALSE')
            ->andWhere('a.photo IS NOT NULL')
            ->setParameter(1, $user->getId())
            ->orderBy('a.modifiedAt', 'desc');
                    
        if ($limit !== false )
            $qb->setMaxResults($limit);
     
        return $qb->getQuery()->getResult();
    }
    
    /**
     *
     * @param \Ks\UserBundle\Entity\User $user
     * @param type $offset
     * @param type $resultsPerPage
     * @return array collection de sessions sportives réalisées par l'utilisateur passé en paramètre
     */
    public function findActivitySessionsFromUser(\Ks\UserBundle\Entity\User $user, $offset, $resultsPerPage, $sportId)
    {      
        $qb = $this->_em->createQueryBuilder();

        $qb ->select('a')
            ->from('KsActivityBundle:ActivitySession', 'a')
            ->where('a.user = ?1')
            ->andWhere('a.isDisabled = FALSE')
            //->andWhere('a NOT INSTANCE OF KsActivityBundle:ActivityStatus')
            ->setParameter(1, $user->getId())
            ->orderBy('a.issuedAt', 'desc')
            ->setFirstResult($offset)
            ->setMaxResults($resultsPerPage);
        
        if ( $sportId != "all" ) {
            $qb
            ->andWhere('a.sport = ?2')
            ->setParameter(2, $sportId);
        }
        
        return $qb->getQuery()->getResult();
    }
    
    /**
     *
     * @param \Ks\ActivityBundle\Entity\Activity $activity
     * @param \Ks\UserBundle\Entity\User $user
     * @param \Ks\NotificationBundle\Entity\NotificationType $notificationType
     * @param type $description
     * @return \Ks\ActivityBundle\Entity\AbstractActivity 
     */
    public function shareActivity(\Ks\ActivityBundle\Entity\Activity $activity, \Ks\UserBundle\Entity\User $user, \Ks\NotificationBundle\Entity\NotificationType $notificationType, $description)
    {
        $abstractActivity = new \Ks\ActivityBundle\Entity\AbstractActivity($notificationType, $user);
        $abstractActivity->setConnectedActivity( $activity );
        $abstractActivity->setDescription($description);
        
        $activity->addAbstractActivity($abstractActivity);
        
        $this->_em->persist($abstractActivity);
        $this->_em->persist($activity);
        $this->_em->flush();
        
        return $abstractActivity;
    }
    
    /**
     * 
     * @param \Ks\ActivityBundle\Entity\Article $article
     * @param \Ks\UserBundle\Entity\User $user
     * @param \Ks\NotificationBundle\Entity\NotificationType $notificationType
     * @return \Ks\ActivityBundle\Entity\AbstractActivity
     */
    public function collaborationOnArticle(\Ks\ActivityBundle\Entity\Article $article, \Ks\UserBundle\Entity\User $user, \Ks\NotificationBundle\Entity\NotificationType $notificationType)
    {
        $abstractActivity = new \Ks\ActivityBundle\Entity\AbstractActivity($notificationType, $user);
        $abstractActivity->setConnectedActivity($article);
        
        $article->addAbstractActivity($abstractActivity);
        
        $this->_em->persist($abstractActivity);
        $this->_em->persist($article);
        $this->_em->flush();
        
        //On abonne l'utilisateur à l'activité abstraite
        if ( $this->isNotSubscribed($abstractActivity, $user) && ! $this->hasNotUnsubscribed($abstractActivity, $user) ) {
            $this->subscribeOnActivity($abstractActivity, $user);
        }
        
        return $abstractActivity;
    }
    
    /**
     * @param  int $idUser 
     * @return array() ids of user clubs
     */
    public function getClubsList( $idUser )
    {
        $qb = $this->_em->createQueryBuilder();
        
        $qb->select('c') // string 'u' is converted to array internally
        ->from('KsClubBundle:Club', 'c')
        ->innerJoin('c.users', 'chu')
        ->where( "chu.user = ?0" )        
        ->setParameter(0, $idUser);
        
        $query = $qb->getQuery();

        return $query->getResult();
    }
    
    /**
     * Pour valider une activité
     */
    public function validateActivity(\Ks\ActivityBundle\Entity\Activity $activity, \Ks\NotificationBundle\Entity\Notification $notification)
    {
        $activity->setIsValidate(true);
        $notification->setGotAnAnswer(true);
        $notification->setIsRead(true);
        
        $this->_em->persist($activity);
        $this->_em->persist($notification);
        
        $this->_em->flush();
    }
    
    /**
     * Pour valider une activité
     */
    public function unvalidateActivity(\Ks\ActivityBundle\Entity\Activity $activity, \Ks\NotificationBundle\Entity\Notification $notification)
    {
        $activity->setIsValidate(false);
        $notification->setGotAnAnswer(true);
        $notification->setIsRead(true);
        
        //$this->_em->persist($activity);
        //FMO : si on remove l'activité la notification associée est supprimée aussi et donc le batch userHasSportFrequency recrée une nouvelle notification !
        //$this->_em->remove($activity); 
        $this->_em->persist($notification);
        
        $this->_em->flush();
    }
    
        /**
     * 
     * @param type $firstDayOfMonth
     * @param type $lastDayOfMonth
     */
    public function findEarnedPointsBySport($userId, $sportId, $firstDayOfMonth, $lastDayOfMonth) {
        $dbh        = $this->_em->getConnection();
        /*$sql = 'select a.id '
            .' FROM ks_activity a'
            .' WHERE a.sport_id = :sportId'
            .' AND a.user_id = :userId'
            .' AND SUBSTRING(a.issuedAt, 1, 10) >= :startOn'
            .' AND SUBSTRING(a.issuedAt, 1, 10) <= :endOn';
        
        $stmt = $dbh->prepare($sql);
        
        $stmt->execute(array(
            'userId'    => $userId,
            'sportId'   => $sportId,
            'startOn'   => $firstDayOfMonth,
            'endOn'     => $lastDayOfMonth
        ));*/
        
        $sqlParts   = array(
            'select' => 'SELECT'
                .' a.id',
            'from'  => ' FROM ks_activity a',
            'where' => ' WHERE a.user_id = :userId'
                .' AND SUBSTRING(a.issuedAt, 1, 10) >= :startOn'
                .' AND SUBSTRING(a.issuedAt, 1, 10) <= :endOn'
                .' AND a.isDisabled = FALSE'
                .' AND a.isValidate != FALSE',
            'group' => '',
            'order' => '',
            'limit' => ''
        );
        
        $vars = array();
        $vars["userId"] = $userId;
        $vars["startOn"] = $firstDayOfMonth;
        $vars["endOn"] = $lastDayOfMonth;
        
        $activitiesTypes = array(
            'session',
            'session_team_sport',
            'session_endurance_on_earth',
            'session_endurance_under_water'
        );
        $sqlParts['where'] .= ' AND a.type in (\''.implode("','", $activitiesTypes).'\')';
        
        if (isset($sportId) && $sportId != null && $sportId[0] != -1) {
            $sqlParts['where'] .= ' AND a.sport_id in (:sportId)';
            
            if (count($sportId) >1) $temp = implode(',', $sportId);
            else $temp = $sportId[0];
            $vars['sportId'] = $temp;
        }
        
        $stmt = $dbh->executeQuery(implode(' ', $sqlParts), $vars);
        
        $userPointsStmt = $this->getPreparedStatementForUserPoints(true, true, true);
        
        $points = 0;
        while ($activity = $stmt->fetch(\PDO::FETCH_ASSOC)) {
            $userPointsStmt->execute(array(
                'userId'    => $userId,
                'startOn'   => $firstDayOfMonth,
                'endOn'     => $lastDayOfMonth,
                'activityId'=> $activity["id"]
            ));
            $points += $userPointsStmt->fetchColumn(); 
        }
        
        return $points;
    }
    
    public function getLastActivityFromUserBySport($user, $sport) {
        $params['activitiesFrom'][] = 'me';
        $params['userId'] = $user->getId();
        $params['sportId'] = $sport->getId();
        $params['activitiesTypes'] = array('session');
        $params['lastOne'] = true;
        
        $activity = $this->findActivities($params);
        
        $lastActivity = $this->find($activity['activity']['id']);
        
        return $lastActivity;
    }
    
    /**
     * 
     * @param \Ks\ActivityBundle\Entity\Activity $activity
     * @param \Ks\UserBundle\Entity\User $user
     */
    public function noteOnActivity(\Ks\ActivityBundle\Entity\Activity $activity, \Ks\UserBundle\Entity\User $user, \Ks\ActivityBundle\Entity\ActivityNote $activityNote, $val)
    {
        $activityHasNotes = new ActivityHasNotes($activity, $user, $activityNote);

        $activityHasNotes->setVal($val);
        
        $this->_em->persist($activityHasNotes);
        $this->_em->flush();
    }
    
    /**
     *
     * @param \Ks\ActivityBundle\Entity\ActivityHasNotes $activityHasNotes 
     */
    public function removeNoteOnActivity(\Ks\ActivityBundle\Entity\ActivityHasNotes $activityHasNotes)
    {      
        $this->_em->remove($activityHasNotes);
        $this->_em->flush();
    }
    
    /**
     * 
     */
    public function getNoteOnActivity(\Ks\ActivityBundle\Entity\Activity $activity, \Ks\ActivityBundle\Entity\ActivityNote $activityNote)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select IFNULL(round(sum(val) / count(val), 1), 0) from ks_activity_has_notes where activity_id = ? and activityNote_id = ? group by activity_id',
            array($activity->getId(), $activityNote->getId())
        );
        
        return $stmt->fetchColumn();
    }
}