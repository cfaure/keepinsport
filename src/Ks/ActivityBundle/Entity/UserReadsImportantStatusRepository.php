<?php

namespace Ks\ActivityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserReadsImportantStatusRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserReadsImportantStatusRepository extends EntityRepository
{
    public function findImportantStatusClub( \Ks\UserBundle\Entity\User $user, \Ks\ClubBundle\Entity\Club $club) {
        $qb = $this->_em->createQueryBuilder();
        $qb ->select('a')
            ->from('KsActivityBundle:ActivityStatus', 'a')
            ->innerJoin('a.importantStatus', "s")
            ->where('s.user = ?0')
            ->andWhere('a.club = ?1')
            ->setParameter(0, $user->getId())
            ->setParameter(1, $club->getId())
            ->orderBy('a.issuedAt', 'desc');
        
        $query = $qb->getQuery();

        //var_dump($query->getSQL());
        return $query->getResult();
    }
    
    /**
     *
     * @param \Ks\UserBundle\Entity\User $user
     * @return type 
     */
    public function findLastImportantStatus( \Ks\UserBundle\Entity\User $user)
    {
        $dbh = $this->_em->getConnection();
        $sql = "select s.activity_id as id, coalesce(status_c.name, status_u.username) as statusFrom, a.description"
            ." from ks_user_reads_important_status s"
            ." inner join ks_activity a on (s.activity_id = a.id)"
            ." inner join ks_user u on (s.user_id = u.id)"
            ." left join ks_user status_u on (a.user_id = status_u.id)"
            ." left join ks_club status_c on (a.club_id = status_c.id)"
            ." where 1"
                ." and s.user_id = :userId"
                ." and s.isRead = :isRead"
            ." order by a.issuedAt desc"
            ." limit 1";
        $stmt = $dbh->executeQuery($sql, array('userId' => $user->getId(), 'isRead' => 0));
        $res = $stmt->fetch(\PDO::FETCH_ASSOC);
        
        return $res;
    }
    
    public function readImportantStatus( \Ks\ActivityBundle\Entity\UserReadsImportantStatus $importantStatus ) {
        $importantStatus->setIsRead( true );
        $this->_em->persist( $importantStatus );
        $this->_em->flush();
        
        return $importantStatus;
    }
}