<?php

namespace Ks\ActivityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * LeagueLevelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LeagueLevelRepository extends EntityRepository
{
    public function updateUserLeagueLevel(\Ks\ActivityBundle\Entity\LeagueLevel $leagueLevel, \Ks\UserBundle\Entity\User $user )
    {
        $user->setLeagueLevel($leagueLevel);
        $this->_em->persist($user);
        $this->_em->flush();
    }
    
    public function getLowestRank()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb ->select('MAX(ll.rank)')
            ->from('KsActivityBundle:LeagueLevel', 'll');

        return $qb->getQuery()->getSingleScalarResult();
    }
    
    public function getLeagueLevelSup($rank)
    {
        $rankSup = $rank - 1;

        $qb = $this->_em->createQueryBuilder();
        $qb ->select('ll')
            ->from('KsActivityBundle:LeagueLevel', 'll')
            ->where('ll.rank = ?1')
            ->setParameter(1, $rankSup);

        return $qb->getQuery()->getSingleResult();
    }
    
    public function getLeagueLevelInf($rank)
    {
        $rankInf = $rank + 1;

        $qb = $this->_em->createQueryBuilder();
        $qb ->select('ll')
            ->from('KsActivityBundle:LeagueLevel', 'll')
            ->where('ll.rank = ?1')
            ->setParameter(1, $rankInf);

        return $qb->getQuery()->getSingleResult();
    }
    
    public function findUsersByCategory(\Ks\ActivityBundle\Entity\LeagueCategory $leagueCategory)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb ->select('u')
            ->from('KsUserBundle:User', 'u')
            ->innerJoin('u.leagueLevel', 'll')
            ->where('ll.category = ?1')
            ->setParameter(1, $leagueCategory->getId());
        
        return $qb->getQuery()->getResult();
    }
    
    public function findUsersOfMyCommunityByCategory($leagueCategory, $myCommunityIds, \DateTime $beginDate)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb ->select('u')
            ->addSelect('SUM(p.points) as totalPoints')
            ->from('KsUserBundle:User', 'u')
            ->innerJoin('u.leagueLevel', 'll')
            ->innerJoin('u.myPoints', 'p')
            ->innerJoin('p.activitySession', 'a')
            ->where('u.id in (?2)')
            ->andWhere('ll.category = ?1')
            ->andWhere('a.issuedAt > ?3')
            ->andWhere('a.isDisabled != TRUE')
            ->andWhere('a.isValidate != FALSE')
            ->addOrderBy('ll.starNumber', 'DESC')
            ->addOrderBy('totalPoints', 'DESC')
            ->groupBy('u')            
            ->setParameter(1, $leagueCategory->getId())
            ->setParameter(2, $myCommunityIds)
            ->setParameter(3, $beginDate);
        
        $usersWhoHaveAlreadyEarnedPoints = $qb->getQuery()->getResult();
        
        $usersIdWhoHaveAlreadyEarnedPoints = array();
        foreach( $usersWhoHaveAlreadyEarnedPoints as $result ) {
            if( isset( $result[0] ) ) {
                $usersIdWhoHaveAlreadyEarnedPoints[] = $result[0]->getId();
            } 
            //var_dump($result[0]->getId());
        }

        //$usersIdToGet = array_diff($myCommunityIds, $usersIdWhoHaveAlreadyEarnedPoints);
        
        $usersIdToGet = array();
        foreach( $myCommunityIds as $userId ) {
            if( !in_array( $userId, $usersIdWhoHaveAlreadyEarnedPoints )) {
                $usersIdToGet[] = $userId;
            }
        }
        //var_dump($usersIdToGet);*/
        
        if( !empty( $usersIdToGet )) {
            $qb = $this->_em->createQueryBuilder();
            $qb ->select('u')
                ->addSelect('0 as totalPoints')
                ->from('KsUserBundle:User', 'u')
                ->innerJoin('u.leagueLevel', 'll')
                ->where('u.id in (?2)')
                ->andWhere('ll.category = ?1')  
                ->addOrderBy('ll.starNumber', 'DESC')
                ->groupBy('u')            
                ->setParameter(1, $leagueCategory->getId())
                ->setParameter(2, $usersIdToGet);

            $usersWhoHaveNeverEarnedPoints = $qb->getQuery()->getResult();

            $users = array_merge($usersWhoHaveAlreadyEarnedPoints, $usersWhoHaveNeverEarnedPoints);
        } else {
            $users = $usersWhoHaveAlreadyEarnedPoints;
        }
        
        
            
            /*$orModule = $qb->expr()->orx();
            $orModule->add($qb->expr()->eq('a.isDisabled', FALSE));
            $orModule->add($qb->expr()->eq('a.isDisabled', NULL));
            $qb->andWhere($orModule);
            
            
            $orModule2 = $qb->expr()->orx();
            $orModule2->add($qb->expr()->eq('a.isValidate', TRUE));
            $orModule2->add($qb->expr()->eq('a.isValidate', NULL));
            $qb->andWhere($orModule2);*/

//var_dump($qb->getQuery()->)
        return $users;
    }
    
    /**
     *
     * @param \Ks\UserBundle\Entity\User $user
     * @return array 
     */
    public function findNumFriendsByLeagues(\Ks\UserBundle\Entity\User $user)
    {
        $numUsersByLeagues = array();
        
        $query  = $this->_em->createQuery(
            'select count(friends.id) as num_friends, ll.id as league_id'
            .' from \Ks\UserBundle\Entity\User u'
            .' join u.myFriends friends'
            .' left join friends.leagueLevel ll'
            .' where u.id = :userId'
            .' group by ll.id'
        );
        $query->setParameters(array(
            'userId' => $user->getId()
        ));
        $results    = $query->getResult();
        
        foreach ($results as $curDatas) {
            $numUsersByLeagues[$curDatas['league_id']] = $curDatas['num_friends'];
        }
        
        return $numUsersByLeagues;
    }
    
    /**
     *
     * @param type $myCommunityIds
     * @return type 
     */
    public function findNbUsersOfMyCommunityByLeagueLevels($myCommunityIds)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb ->select('ll.id', 'COUNT(u.id) as nb')
            //->from('KsActivityBundle:LeagueLevel', 'll')
            ->from('KsUserBundle:User', 'u')
            ->where('u.id in (?1)') 
            ->innerJoin('u.leagueLevel', 'll')
            //->leftJoin('u. u ON u.leagueLevel_id = ll.id', 'll')
            //->leftJoin('u.leagueLevel', 'll')

            //->addFrom('KsUserBundle:User', 'u')
            //->leftJoin('u.friendsWithMe', 'f1')
            //->leftJoin('u.myFriends', 'f2');
        
        /*$orModule = $qb->expr()->orx();
        $orModule->add($qb->expr()->eq('f1.user', '?1'));
        $orModule->add($qb->expr()->eq('f2.friend', '?1'));
        $orModule->add($qb->expr()->eq('u.id', '?1'));*/
        
        //$qb ->andWhere($orModule)
            ->setParameter(1, $myCommunityIds)
            ->groupBy('ll.id');
        
        /*SELECT ll.id, ll.label, COUNT(u.id) as nb
FROM ks_league_level ll
LEFT JOIN ks_user u ON u.leagueLevel_id = ll.id
GROUP BY ll.id
*/

        return $qb->getQuery()->getResult();
        
        /*$sql = "SELECT ll.id, COUNT(u.id) as nb
                FROM ks_league_level ll 
                LEFT JOIN ks_user u ON u.leagueLevel_id = ll.id
                GROUP BY ll.id"; 

        $rsm = new \Doctrine\ORM\Query\ResultSetMapping;
        $rsm->addEntityResult($this->getEntityName(), "LeagueLevel");
        $rsm->addFieldResult("LeagueLevel", "id", "id");
        $rsm->addJoinedEntityResult('Ks\UserBundle\Entity\User' , 'User', 'u', 'u.leagueLevel');
        //$rsm->addEntityResult('Ks\UserBundle\Entity\User', "User");
        $rsm->addFieldResult('User', 'nb', 'nb');
        $rsm->getEntityResultCount();
        $query = $this->_em->createNativeQuery($sql , $rsm);
        
        /*$query = $this->_em->createQuery(
            "  SELECT ll.id, COUNT(u.id) as nb"
            ." FROM KsActivityBundle:LeagueLevel ll "
            ." LEFT JOIN ks_user u ON u.leagueLevel_id = ll.id"
            ." GROUP BY ll.id"
        );*/
        /*$query = $this->_em->createQuery(
            "  SELECT ll.id, COUNT(u.id) as nb"
            ." FROM KsActivityBundle:LeagueLevel ll "
            ." LEFT JOIN KsUserBundle:User u ON u.leagueLevel = ll.id"
            ." GROUP BY ll.id"
        );*/
        //$query->setParameters(array($user->getId(), $friend));
        
        //return $query->getSingleScalarResult();
        
        //var_dump($query->getSQL());*/
        //return $query->getArrayResult();
    }
    
    public function findNbUsersByCategory(\Ks\ActivityBundle\Entity\LeagueCategory $leagueCategory)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb ->select('COUNT(u)')
            ->from('KsUserBundle:User', 'u')
            ->innerJoin('u.leagueLevel', 'll')
            ->where('ll.category = ?1')
            ->setParameter(1, $leagueCategory->getId());

        $query = $qb->getQuery();
        return (int) $query->getSingleScalarResult();
    }
}