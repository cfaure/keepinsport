<?php

namespace Ks\ActivityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    /**
     *
     * @param type $numArticles
     * @return type 
     */
    public function getLinksToLastUpdatedArticles($numArticles)
    {
        $dbh            = $this->_em->getConnection();
        $numArticles    = (int)$numArticles;
        $sql            = "select"
            ." a.id, a.label as title"
            ." from ks_activity a"
            ." where 1"
            ." and a.type = 'article'"
            ." order by a.modifiedAt desc"
            ." limit $numArticles";
        
        $stmt = $dbh->executeQuery($sql);
        
        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }
    
    /**
     *
     * @param \Ks\ActivityBundle\Entity\Article $article
     * @param \Ks\UserBundle\Entity\User $user
     * @param type $modification
     * @param type $thingsWereChanged
     * @return \Ks\ActivityBundle\Entity\UserModifiesArticle 
     */
    public function modificationOnArticle(\Ks\ActivityBundle\Entity\Article $article, \Ks\UserBundle\Entity\User $user, $modification, $thingsWereChanged)
    {
        $userModifiesArticle = new UserModifiesArticle($article, $user);
        $userModifiesArticle->setContent($modification);
        $userModifiesArticle->setTitleWasChanged($thingsWereChanged["title"]);
        $userModifiesArticle->setDescriptionWasChanged($thingsWereChanged["description"]);
        $userModifiesArticle->setElementsWereChanged($thingsWereChanged["elements"]);
        $userModifiesArticle->setPhotosWereChanged($thingsWereChanged["photos"]);
        $userModifiesArticle->setTagsWereChanged($thingsWereChanged["tags"]);
        $userModifiesArticle->setTrainingPlanWasChanged($thingsWereChanged["trainingPlan"]);
        
        if( $thingsWereChanged["title"] ) {
            $aModification = json_decode( $modification, true );
            if( isset( $aModification["title"] ) && !empty( $aModification["title"] ) ) {
                $article->setLabel( base64_decode( $aModification["title"] ));
            }
        }
        $article->setModifiedAt( new \DateTime('now') );
        
        $this->_em->persist($userModifiesArticle);
        $this->_em->persist($article);
        $this->_em->flush();
        
        return $userModifiesArticle;
    }
    
    /**
     *
     * @param string $articleLabel
     * @return boolean exist or not
     */
    public function articleLabelExist($articleLabel)
    {   
        $qb = $this->_em->createQueryBuilder();

        $qb ->select('sc')
            ->from('KsActivityBundle:Article', 'sc')
            ->where("sc.label = ?1 and sc.categoryTag is not null")
            ->setParameter(1, $articleLabel);
        
        $query = $qb->getQuery();

        $nbResults = count($query->getResult());

        return ($nbResults > 0 ? true : false);
    }
    
    /**
     *
     * @param string $articleLabel
     * @return array collection d'articles
     */
    public function findBySimilarityLabel($articleLabel)
    {   
        /*$config = new \Doctrine\ORM\Configuration();
        $config->addCustomStringFunction($name, $class);*/
        \Doctrine\ORM\Query\Parser::registerNumericFunction('SOUNDHEX', '\DBAL\SoundHex');
        \Doctrine\ORM\Query\Parser::

        //$em = EntityManager::create($dbParams, $config);
        $qb = $this->_em->createQueryBuilder();

        /*$qb ->select('sc')
            ->from('KsActivityBundle:Article', 'sc')
            ->where("sc.label SOUNDS LIKE ?1")
            ->setParameter(1, $articleLabel);*/
        
        $query = $this->_em->createQuery(
            "select sc from KsActivityBundle:Article sc"
            ." where  SOUNDHEX(sc.label) = SOUNDHEX(?1) "
        );
        
        $query->setParameters(array($articleLabel));


        return $query->getResult();
    }
    
    /**
     *
     * @param array $articleTagsId
     * @return array collection d'articles
     */
    public function findByTagsId($articleTagsId)
    {   
        $qb = $this->_em->createQueryBuilder();

        $qb ->select('a')
            ->from('KsActivityBundle:Article', 'a')
            ->innerJoin('a.tags', 't')
            ->add('where', $qb->expr()->in("t.id","?1"))
            ->setParameter(1, implode(", ", $articleTagsId));
        
        $query = $qb->getQuery();

        return $query->getResult();
    }
    
    /**
     *
     * @param array $userId
     * @return array collection d'articles
     */
    public function findMyScubscriptions($userId)
    {   
        $qb = $this->_em->createQueryBuilder();

        $qb ->select('a')
            ->from('KsActivityBundle:Article', 'a')
            ->innerJoin('a.subscribers', 's')
            ->where('s.subscriber = ?1')
            ->setParameter(1, $userId);
        
        //création de l'expression OR
        $orModule = $qb->expr()->orx();
        $orModule->add($qb->expr()->eq('s.hasUnsubscribed', 'FALSE'));
        $orModule->add($qb->expr()->isNull('s.hasUnsubscribed'));

        $qb ->andWhere($orModule);
        
        $query = $qb->getQuery();

        return $query->getResult();
    }
    

    
    /**
     * L'utilisateur indique qu'il participe à un événement sportif
     */
    public function participateInSportingEvent(\Ks\ActivityBundle\Entity\Article $article, \Ks\UserBundle\Entity\User $user)
    {
        $userParticipatesEvent = new \Ks\EventBundle\Entity\UserParticipatesEvent( $event, $user);
        //$user->addArticle($article);

        $this->_em->persist($user);
        $this->_em->flush();
    }
    
    /**
     * L'utilisateur indique qu'il ne participe plus à un événement sportif
     */
    public function participateAnymoreInSportingEvent(\Ks\ActivityBundle\Entity\Article $article, \Ks\UserBundle\Entity\User $user)
    {
        $user->removeArticleSportingEventParticipation($article);

        $this->_em->persist($user);
        $this->_em->flush();
    }
    
    public function createWikisportEvent( $title ) {
        
        $event = new \Ks\EventBundle\Entity\Event();
        $event->setName($title);
        $event->setIsPublic(true);

        $this->_em->persist($event);
        $this->_em->flush();
        
        return $event;
    }
    
    public function findCompetitionsFromNow()
    {
        $dbh            = $this->_em->getConnection();
        $now = new \DateTime();
        
        $sql  = "select a.id, a.label as name, a.distance, a.duration, a.elevationGain, a.elevationLost, e.startDate, e.sport_id "
            ." FROM ks_activity a, ks_article_tag at, ks_event e"
            ." WHERE 1"
            ." AND a.type = 'article'"
            ." AND a.categoryTag_id = at.id "
            ." AND at.label = 'Evénement Sportif'"
            ." AND a.event_id = e.id"
            ." AND e.startDate >= '".$now->format('Y-m-d')."'"
            ." ORDER BY e.startDate ASC";
        
        $stmt = $dbh->executeQuery($sql);
        
        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }
}