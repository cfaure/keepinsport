 {% extends "::layout_V2.html.twig" %}

{% block title %}
	{{ parent() }}
{% endblock %}

{% block stylesheets %}
    {{ parent() }}   
    {# zoom sur photos #}
    <link rel="stylesheet" type="text/css" href="{{ asset('colorbox/colorbox.css') }}" />
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript" src="http://www.google.com/jsapi"></script>
    <!-- Le paramètre "sensor" indique si cette application utilise détecteur pour déterminer la position de l'utilisateur -->
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script type="text/javascript" src="{{ asset('bundles/ksactivity/js/v3_epoly.js') }}"></script> {# fonctions additionnelles pour l'objet polyline de google map #}
        
    <script src="{{ asset('js/jquery.elastic.source.js') }}"></script>
    <script src="{{ asset('colorbox/jquery.colorbox.js') }}"></script>
    
{% endblock %}
    
{% block activity_content %}
    <div id="avatarBloc-{{ activity.id }}" class="span1">
    {#% include 'KsActivityBundle:Activity:_activity_userImage.html.twig' with {'user': activity.user } %#}
</div>
<div id="activityBloc-{{ activity.id }}" class="span11">
    <div class="activityBloc">
        
        <div class="contentDetailsBloc">
            <br clear="all" /><br/>

{% if activity.services|length > 0  or activity.gpx is not null %}
    <table id="tableEndurenceDetails" class="table table-bordered">
        <tr>
            <td>
                Durée<br/><b>{{ activity.duration|date('H:i:s') }}</b>
            </td>
            <td>
                Distance<br/><b>{{ activity.distance/1000 }} Km</b>
            </td>
            {% if activity.duration|seconds > 0 %}
                {% set speed = ((activity.distance/1000) / activity.duration|seconds * 60 * 60) %}
            {% else %}
                {% set speed = 0 %}
            {% endif %}
            <td>
                Vitesse<br/>
                {% if speed > 0 %}
                    <b>{{ speed|number_format(2, '.', ',') }} km/h</b>
                {% endif %}
            </td>
            <td>
                Rythme<br/>
                {% if speed > 0 %}
                    <b>{{ (1/speed*60)|number_format(2, "'") }}"/km</b>
                {% endif %}
            </td>
            {% if activity.type == 'session_endurance_on_earth' %}
                <td>
                    D+<br/><b><span id="deniveleGain"></span></b>
                </td>
                <td>
                    D-<br/><b><span id="deniveleLost"></span></b>
                </td>
            {% else %}
                {% if activity.depthMax is not null or activity.depthGain is not null %}
                    <td><b>Profondeur</b><br/>
                        {% if activity.depthMax is not null %}
                            {{ 'depthMax'|trans }} :{{ activity.depthMax }}<br/>
                        {% endif %}
                        {% if activity.depthGain is not null %}
                            {{ 'depthGain'|trans }} : {{ activity.depthGain }}
                        {% endif %}
                    </td> 
                {% endif %}
            {% endif %}
            {% if activity.calories is not null %}
                <td>Calories<br/><b>{{ activity.calories }}</b></td>
            {% endif %}
            <td>
                <span id="stateOfHealthBloc">
                    {% include 'KsActivityBundle:Activity:_stateOfHealth_edit.html.twig' with {'activity': activity, 'statesOfHealth': statesOfHealth} %}
                </span>  
            </td>

        </tr>
    </table>
    <div class="row-fluid">
        <div class="span9">
            <div id="gmap-{{ activity.id }}" style="margin-left:0px;height:300px;width:100%;border: 1px solid black;border-radius: 4px 4px 4px 4px;"></div>
        </div>
            <div class="span3">
            <div style="height: 300px; overflow: auto"><!-- tableau des splits -->
                <table width="100%" cellspacing="0" cellpadding="0" border="0" align="center" id="distanceSplits">
                   <tbody><tr>
                      <td valign="top" align="left" class="tableHeader">km</td>
                      <td valign="top" align="center" class="tableHeader">Pace <span class="details">(min/km)</span></td>
                      <td valign="top" align="center" class="tableHeader">Elevation <span class="details">(m)</span></td>
                   </tr>
                   <tr style="display:none" id="distanceSplitTemplate">
                      <td valign="top" align="left"><span class="number"></span></td>
                      <td valign="top" align="center"><span class="pace"></span></td>
                      <td valign="top" align="center"><span class="climb"></span></td>
                   </tr>
                 <tr style="" id="distanceSplit_1" class="odd distanceSplit">
                      <td valign="top" align="left"><span class="number">1</span></td>
                      <td valign="top" align="center"><span class="pace">5:19</span></td>
                      <td valign="top" align="center"><span class="climb">-6</span></td>
                   </tr><tr style="" id="distanceSplit_2" class="even distanceSplit">
                      <td valign="top" align="left"><span class="number">2</span></td>
                      <td valign="top" align="center"><span class="pace">5:09</span></td>
                      <td valign="top" align="center"><span class="climb">-7</span></td>
                   </tr><tr style="" id="distanceSplit_3" class="odd distanceSplit">
                      <td valign="top" align="left"><span class="number">3</span></td>
                      <td valign="top" align="center"><span class="pace">5:19</span></td>
                      <td valign="top" align="center"><span class="climb">8</span></td>
                   </tr><tr style="" id="distanceSplit_4" class="even distanceSplit">
                      <td valign="top" align="left"><span class="number">4</span></td>
                      <td valign="top" align="center"><span class="pace">5:13</span></td>
                      <td valign="top" align="center"><span class="climb">10</span></td>
                   </tr><tr style="" id="distanceSplit_5" class="odd distanceSplit">
                      <td valign="top" align="left"><span class="number">5</span></td>
                      <td valign="top" align="center"><span class="pace">5:11</span></td>
                      <td valign="top" align="center"><span class="climb">-14</span></td>
                   </tr><tr style="" id="distanceSplit_6" class="even distanceSplit">
                      <td valign="top" align="left"><span class="number">6</span></td>
                      <td valign="top" align="center"><span class="pace">4:55</span></td>
                      <td valign="top" align="center"><span class="climb">-6</span></td>
                   </tr><tr style="" id="distanceSplit_7" class="odd distanceSplit">
                      <td valign="top" align="left"><span class="number">7</span></td>
                      <td valign="top" align="center"><span class="pace">3:59</span></td>
                      <td valign="top" align="center"><span class="climb">5</span></td>
                   </tr><tr style="" id="distanceSplit_8" class="even distanceSplit">
                      <td valign="top" align="left"><span class="number">8</span></td>
                      <td valign="top" align="center"><span class="pace">5:04</span></td>
                      <td valign="top" align="center"><span class="climb">5</span></td>
                   </tr><tr style="" id="distanceSplit_9" class="odd distanceSplit">
                      <td valign="top" align="left"><span class="number">9</span></td>
                      <td valign="top" align="center"><span class="pace">4:08</span></td>
                      <td valign="top" align="center"><span class="climb">-1</span></td>
                   </tr><tr style="" id="distanceSplit_10" class="even distanceSplit">
                      <td valign="top" align="left"><span class="number">10</span></td>
                      <td valign="top" align="center"><span class="pace">5:02</span></td>
                      <td valign="top" align="center"><span class="climb">-3</span></td>
                   </tr><tr style="" id="distanceSplit_11" class="odd distanceSplit">
                      <td valign="top" align="left"><span class="number">11</span></td>
                      <td valign="top" align="center"><span class="pace">4:21</span></td>
                      <td valign="top" align="center"><span class="climb">-1</span></td>
                   </tr><tr style="" id="distanceSplit_12" class="even distanceSplit">
                      <td valign="top" align="left"><span class="number">12</span></td>
                      <td valign="top" align="center"><span class="pace">4:57</span></td>
                      <td valign="top" align="center"><span class="climb">0</span></td>
                   </tr><tr style="" id="distanceSplit_13" class="odd distanceSplit">
                      <td valign="top" align="left"><span class="number">13</span></td>
                      <td valign="top" align="center"><span class="pace">5:55</span></td>
                      <td valign="top" align="center"><span class="climb">10</span></td>
                   </tr><tr style="" id="distanceSplit_14" class="even distanceSplit">
                      <td valign="top" align="left"><span class="number">14</span></td>
                      <td valign="top" align="center"><span class="pace">5:08</span></td>
                      <td valign="top" align="center"><span class="climb">-7</span></td>
                   </tr><tr style="" id="distanceSplit_15" class="odd distanceSplit">
                      <td valign="top" align="left"><span class="number">15</span></td>
                      <td valign="top" align="center"><span class="pace">5:15</span></td>
                      <td valign="top" align="center"><span class="climb">-1</span></td>
                   </tr><tr style="" id="distanceSplit_16" class="even distanceSplit">
                      <td valign="top" align="left"><span class="number">16</span></td>
                      <td valign="top" align="center"><span class="pace">5:27</span></td>
                      <td valign="top" align="center"><span class="climb">3</span></td>
                   </tr><tr style="" id="distanceSplit_17" class="odd distanceSplit">
                      <td valign="top" align="left"><span class="number">17</span></td>
                      <td valign="top" align="center"><span class="pace">5:18</span></td>
                      <td valign="top" align="center"><span class="climb">-4</span></td>
                   </tr><tr style="" id="distanceSplit_18" class="even distanceSplit">
                      <td valign="top" align="left"><span class="number">18</span></td>
                      <td valign="top" align="center"><span class="pace">5:07</span></td>
                      <td valign="top" align="center"><span class="climb">7</span></td>
                   </tr><tr style="" id="distanceSplit_19" class="odd distanceSplit">
                      <td valign="top" align="left"><span class="number">19</span></td>
                      <td valign="top" align="center"><span class="pace">5:22</span></td>
                      <td valign="top" align="center"><span class="climb">-2</span></td>
                   </tr>
                   </tr><tr style="" id="distanceSplit_15" class="odd distanceSplit">
                      <td valign="top" align="left"><span class="number">15</span></td>
                      <td valign="top" align="center"><span class="pace">5:15</span></td>
                      <td valign="top" align="center"><span class="climb">-1</span></td>
                   </tr><tr style="" id="distanceSplit_16" class="even distanceSplit">
                      <td valign="top" align="left"><span class="number">16</span></td>
                      <td valign="top" align="center"><span class="pace">5:27</span></td>
                      <td valign="top" align="center"><span class="climb">3</span></td>
                   </tr><tr style="" id="distanceSplit_17" class="odd distanceSplit">
                      <td valign="top" align="left"><span class="number">17</span></td>
                      <td valign="top" align="center"><span class="pace">5:18</span></td>
                      <td valign="top" align="center"><span class="climb">-4</span></td>
                   </tr><tr style="" id="distanceSplit_18" class="even distanceSplit">
                      <td valign="top" align="left"><span class="number">18</span></td>
                      <td valign="top" align="center"><span class="pace">5:07</span></td>
                      <td valign="top" align="center"><span class="climb">7</span></td>
                   </tr><tr style="" id="distanceSplit_19" class="odd distanceSplit">
                      <td valign="top" align="left"><span class="number">19</span></td>
                      <td valign="top" align="center"><span class="pace">5:22</span></td>
                      <td valign="top" align="center"><span class="climb">-2</span></td>
                   </tr>
                   </tbody></table>
               </div>
            </div>
        </div>
    </div>
    <div class="row-fluid">
        <div class="span12">
            <div id="graphContainer" style="height:250px"><!-- affichage du graphe --></div>
        </div>
    </div>
    {% if activity.label is defined and activity.label is not null %}
        <br/>
        <p>{{ activity.label|nl2br }}</p>
    {% endif %}
    {% if activity.description is defined and activity.description is not null %}
        <br/>
        <p>{{ activity.description|nl2br }}</p>
    {% endif %}
    
{% else %}
    <span id="stateOfHealthBloc">
        {% include 'KsActivityBundle:Activity:_stateOfHealth_edit.html.twig' with {'activity': activity, 'statesOfHealth': statesOfHealth} %}
    </span>  
        
    {% include 'KsActivityBundle:Activity:_enduranceSession_content.html.twig' with {'activity': activity} %}
{% endif %}

<style type="text/css">  
    #tableEndurenceDetails td, #tableEndurenceDetails td:hover{
        background-color:#49AFCD;
        color:white;
        text-align:center;
    }
</style>

<script type="text/javascript">
    var landmarks = []; // stockage des markers gmap
    var latLong = {};  //Stockage des points latitude/longitude
    
    function km_on(map, traceRoute, distanceForOneMarkInKm) {
        if (landmarks.length && (landmarks.length > 0)) {
            for (i = 0; i<landmarks.length; ++i) landmarks[i].setMap(map);
        } else {
            var km_points = traceRoute.GetPointsAtDistance(distanceForOneMarkInKm * 1000);
            for (i = 0; i < km_points.length; i++) {
                landmarks.push(
                    createKmMarker(map, km_points[i], i*distanceForOneMarkInKm)
                );
            }
        }
    }

    function createKmMarker(map, point, km) {
        return new google.maps.Marker({
            position: point,
            map: map,
            title: "Km " + km,
            icon: new google.maps.MarkerImage('https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=' + km + '|49AFCD|FFFFFF'),
            zIndex: Math.round(point.lat() * -100000) << 5
        });
    }
    
    $(document).ready(function() {
        //MAP
        jsonDatas           = {{ activity.rawTrackingDatas|raw }};
        var waypoints       = jsonDatas.waypoints;
        var firstWaypoint   = 0;
        var lastWaypoint    = waypoints.length - 1;
        var kmsNumber       = parseInt({{ activity.distance/1000 }});
        var duration        = {{ activity.duration|seconds }};
        var map             = new google.maps.Map(
            document.getElementById("gmap-{{ activity.id }}"), {
            mapTypeId: google.maps.MapTypeId.TERRAIN
        });
        var mapPoints       = [];

        if( waypoints[firstWaypoint] !== undefined ) {
            var lat_min = waypoints[firstWaypoint].lat;
            var lat_max = waypoints[firstWaypoint].lat;
            var lon_min = waypoints[firstWaypoint].lon;
            var lon_max = waypoints[firstWaypoint].lon;
        

            $.each(waypoints, function(key, waypoint) {
                mapPoints.push(
                    new google.maps.LatLng(waypoint.lat,  waypoint.lon)
                );
                if ( waypoint.lat < lat_min ) lat_min = waypoint.lat;
                if ( waypoint.lat > lat_max ) lat_max = waypoint.lat;
                if ( waypoint.lon < lon_min ) lon_min = waypoint.lon;
                if ( waypoint.lon > lon_max ) lon_max = waypoint.lon;
            });

            var locationMarker = new google.maps.Marker({
                map     : map,
                icon    : new google.maps.MarkerImage("{{ asset('bundles/ksactivity/images/location.png') }}" ),
                position: new google.maps.LatLng( waypoints[firstWaypoint].lat, waypoints[firstWaypoint].lon ),
            });

            new google.maps.Marker({
                map     : map,
                icon    : new google.maps.MarkerImage("{{ asset('bundles/ksactivity/images/green-pin.png') }}" ),
                position: new google.maps.LatLng( waypoints[firstWaypoint].lat, waypoints[firstWaypoint].lon ),
                title   : "Départ"
            });

            new google.maps.Marker({
                map     : map,
                icon    : new google.maps.MarkerImage("{{ asset('bundles/ksactivity/images/red-pin.png') }}" ),
                position: new google.maps.LatLng( waypoints[lastWaypoint].lat, waypoints[lastWaypoint].lon ),
                title   : "Fin"
            });

            //On trace le parcours 
            traceRoute = new google.maps.Polyline({
                path: mapPoints,
                strokeColor: "#FF0000",
                strokeOpacity: 1.0,
                strokeWeight: 2
            });
            map.setCenter(new google.maps.LatLng(
                ((lat_max + lat_min) / 2.0),
                ((lon_max + lon_min) / 2.0)
            ));
            map.fitBounds(traceRoute.Bounds());
            traceRoute.setMap(map);

            if ( kmsNumber > 50 ) {
                distanceForOneMark = 10; //On ajoute que les dizaines
            }
            else if( kmsNumber <= 15 ) {         
                distanceForOneMark = 1; //On affuche tous les kilomètres
            } 
            else {
                distanceForOneMark = 5; //On affiche tous les 5 kilomètres
            }
            km_on(map, traceRoute, distanceForOneMark);
        }
        
        
        //GRAPH
        var dataType = { ELEVATION : 0, SPEED : 1, PACE : 2, FLAGS : 3 };

        var options = {
      chart: {
         renderTo: 'graphContainer',
         zoomType: 'x',
         alignTicks: false,
         margin: [0, 20, 30, 20]
      },
      title: {text:""},
      credits: {enabled:false},
      legend: {
          borderWidth: 0,
            style: {
               left: "0px",
               right: "auto",
               top: "-10px",
               bottom: "auto"
            },
            itemHiddenStyle: {
               color: "#888"
            }
      },
      xAxis: [{
		min: 0,
        data: []
      }],
      yAxis: [{  // ELEVATION
               gridLineWidth: 0,
               title: {enabled: false, text: ""},
               labels: {enabled: false},
               startOnTick: false,
               endOnTick: false,
               minRange: 100,
               //max: (chartData.series["ELEVATION"]) ? chartData.series["ELEVATION"].maxValY + ((chartData.series["ELEVATION"].maxValY - chartData.series["ELEVATION"].minValY) * 0.15) : null,
               min: 0 //(chartData.series["ELEVATION"]) ? chartData.series["ELEVATION"].minValY : null
            },
            {  // PACE
               gridLineWidth: 0,
               title: {enabled: false, text: ""},
               labels: {enabled: false},
               maxPadding: 0.15,
               min: 0
            },
            {  // SPEED
               gridLineWidth: 0,
               title: {enabled: false, text: ""},
               labels: {enabled: false},
               maxPadding: 0.15,
               min: 0
            }],
	  plotOptions: {
		line : {
			marker: {
			   enabled: false,
			   states: {
				  hover: {
					 enabled: true,
					 symbol: 'circle',
					 radius: 5,
					 lineWidth: 1
				  }
			   }   
			}
		},
		areaspline : {
			marker: {
			   enabled: false,
			   states: {
				  hover: {
					 enabled: true,
					 symbol: 'circle',
					 radius: 5,
					 lineWidth: 1
				  }
			   }   
			}
		}
	  },
      tooltip: {
         formatter: function() {
            var unit = {
               0: 'm',
               1: 'km/h',
               2: 'min/km'
            }[this.series.name];
            
            return ''+
               this.x +'km : '+ this.y +' '+ unit;
         }
      },
      series: [{
         name: dataType.ELEVATION,
         color: '#89A54E',
         type: 'areaspline',
         yAxis: 0,
         data: []
      }, {
         name: dataType.PACE,
         color: '#AA4643',
         type: 'line',
         yAxis: 1,
         data: []
      }, {
         name: dataType.SPEED,
         type: 'line',
         color: '#4572A7',
         yAxis: 2,
         data: []
      
      }]
   };

        $.get(
            Routing.generate('ksActivity_getDataGraph', {'activityId' : {{ activity.id }}} ), 
            function(response) {
                options.xAxis.data      = response.chart.distances;
                options.series[0].data  = response.chart.elevations;
                if (response.info.minEle && response.info.maxEle) {
                    console.log(response.info.minEle + ' ' + response.info.maxEle );
                    options.yAxis[0].min  = response.info.minEle;
                    options.yAxis[0].max  = response.info.maxEle + ((response.info.maxEle - response.info.minEle) * 0.15);
                    console.log(options.yAxis[0].min + ' ' + options.yAxis[0].max);
                }
                options.series[1].data  = response.chart.paces;
                options.series[2].data  = response.chart.speeds;
                
                $.each(response.map.waypoints, function(key, waypoint) {
                    latLong[response.chart.distances[key]] = (new google.maps.LatLng( waypoint.lat, waypoint.lon ) );         
                });
                
                $("#deniveleGain").html(response.info["D+"]);
                $("#deniveleLost").html(response.info["D-"]);
                //options.series[1].data = responseJson.chart.heart_rate
                new Highcharts.Chart(options);
            }
        );
    });
</script>
        </div>
    </div>
</div>
{% endblock %}