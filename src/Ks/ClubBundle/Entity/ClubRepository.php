<?php

namespace Ks\ClubBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClubRepository extends EntityRepository
{
    public function findClubs( $params = array() ) {
        $dbh            = $this->_em->getConnection();
        
        $vars       = array();  
        $sqlParts   = array(
            'select' => 'SELECT'
                .' c.id, c.name'
            ,
            'from'  => 'FROM ks_club c'
            ,
            'where' => "WHERE 1",
            'group' => 'GROUP BY c.id',
            'order' => 'ORDER BY c.name',
            'limit' => ''
        );
        
        if( isset( $params['searchTerm'] ) && $params['searchTerm'] != '' ) {
            $sqlParts["where"] .= ' AND c.name LIKE :searchTerm';
                $vars['searchTerm'] = "%" . $params['searchTerm'] . "%";
        }      
        
        $stmt = $dbh->executeQuery(implode(' ', $sqlParts), $vars);
        
        $clubs = array();
        while( $club = $stmt->fetch(\PDO::FETCH_ASSOC) ) {
            $clubs[] = $club;       
        }
        
        return $clubs;
    }
    
    public function findOneClub( $params = array() ) {
        $clubs = $this->findClubs( $params );
        
        if( count( $clubs ) > 0 ) return $clubs[0];
        else return null;   
    }
    
     /**
     *
     * @return int Nombre total d'activités dans la base pour un utilisateur
     */
    public function getMembersByClubQB( $clubId )
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('u')
                ->from('KsUserBundle:User' , 'u' )
                ->innerJoin('u.clubs', 'chu')
                ->where('chu.club = ?1')
                ->andWhere("chu.membershipAskInProgress = ?2")
                ->orderBy("u.username", "ASC")
                ->setParameter(1, $clubId)
                ->setParameter(2, false)
                ;
        
        return $queryBuilder;
 
    }
    
     /**
     *
     * @return l'ensemble des managers (type super admin et type encadrants)
     */
    public function getManagersByClubQB( $clubId )
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('u')
                ->from('KsUserBundle:User' , 'u' )
                ->innerJoin('u.clubs', 'chu')
                ->innerJoin('u.myClubsManaged', 'umc')
                ->where('chu.club = ?1')
                ->andWhere("chu.membershipAskInProgress = ?2")
                ->orderBy("u.username", "ASC")
                ->setParameter(1, $clubId)
                ->setParameter(2, false)
                ;
        
        return $queryBuilder;
 
    }
    
    /**
     *
     * @return 
     */
    public function getMembersAwaitingByClubQB( $clubId )
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('u')
                ->from('KsUserBundle:User' , 'u' )
                ->innerJoin('u.clubs', 'chu')
                ->where('chu.club = ?1')
                ->andWhere("chu.membershipAskInProgress = ?2")
                ->orderBy("u.username", "ASC")
                ->setParameter(1, $clubId)
                ->setParameter(2, true);
        
        return $queryBuilder;
 
    }
    
    public function findMembersByClub( $clubId ) {
        $queryBuilder = $this->getMembersByClubQB( $clubId );
 
        $query = $queryBuilder->getQuery();
        
        return $query->getResult();
    }
    
    public function findMembersAwaitingByClub( $clubId ) {
        $queryBuilder = $this->getMembersAwaitingByClubQB( $clubId );
 
        $query = $queryBuilder->getQuery();
        
        return $query->getResult();
    }
    
    /**
     *
     * @return queryBuilder return my clubs
     */
    public function findMyClubsQB(\Ks\UserBundle\Entity\User $user)
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('c')
                ->from('KsClubBundle:Club' , 'c' )
                ->innerJoin('c.users', 'chu')
                ->where('chu.user = ?0')
                ->orderBy("c.name", "ASC")
                ->setParameter(0, $user->getId());
        
        return $queryBuilder;
 
    }
    
    /**
     *
     * @return array return my clubs
     */
    public function findMyClubs(\Ks\UserBundle\Entity\User $user)
    {      
        $queryBuilder = $this->findMyClubsQB( $user );
 
        $query = $queryBuilder->getQuery();
        
        return $query->getResult();
    }
    
    /**
     *
     * @return array return my clubs
     */
    public function findMyClubsManaged(\Ks\UserBundle\Entity\User $user)
    {      
        $queryBuilder =  $this->_em->createQueryBuilder();
        
        $queryBuilder->select('c')
                ->from('KsClubBundle:Club' , 'c' )
                ->innerJoin('c.managers', 'umc')
                ->where('umc.user = ?0')
                ->orderBy("c.name", "ASC")
                ->setParameter(0, $user->getId());
 
        $query = $queryBuilder->getQuery();
        
        return $query->getResult();
    }
    
    /**
     *
     * @return array
     */
    public function findManagersByClub( $clubId )
    {              
        $sql = "SELECT user_id, super_admin, function "
            ." FROM ks_user_manage_clubs umc "
            ." WHERE umc.club_id = ". $clubId;
        
        $dbh        = $this->_em->getConnection();
        $results    = $dbh->query($sql)->fetchAll(\PDO::FETCH_ASSOC);
        
        return $results;
    }
    
    /**
     *
     * @return array
     */
    public function findOneManagerByClubAndFunction($clubId, $function)
    {              
        $sql = "SELECT user_id, super_admin, function "
            ." FROM ks_user_manage_clubs umc "
            ." WHERE umc.club_id = ". $clubId
            ." AND umc.function = '". $function . "'"
            ." LIMIT 1";
        
        $dbh        = $this->_em->getConnection();
        $results    = $dbh->query($sql)->fetchAll(\PDO::FETCH_ASSOC);
        
        return $results;
    }
    
    /**
     *
     * @return array
     */
    public function findAthletesByClub( $clubId )
    {              
        $sql = "SELECT user_id "
            ." FROM ks_club_has_users chu "
            ." WHERE not exists (select 1 from ks_user_manage_clubs umc where umc.club_id = chu.club_id and umc.user_id = chu.user_id) "
            ." AND   chu.club_id = ". $clubId;
        
        $dbh        = $this->_em->getConnection();
        $results    = $dbh->query($sql)->fetchAll(\PDO::FETCH_ASSOC);
        
        return $results;
    }
    
    /**
     *
     * @return array return my clubs
     */
    public function findUserClubsIds( $userId )
    {              
        $sql = "SELECT club_id "
            ." FROM ks_club_has_users chu "
            ." WHERE user_id = '". $userId ."'"
            ." AND membershipAskInProgress = 0";
        
        $dbh        = $this->_em->getConnection();
        $results    = $dbh->query($sql)->fetchAll(\PDO::FETCH_ASSOC);
        
        $clubsId = array();
        foreach( $results as $res ) {
            $clubsId[] = $res["club_id"];
        }
        return $clubsId;
    }
    
    /**
     *
     * @return array return my clubs
     */
    public function findMembersIds( $clubId )
    {              
        $sql = "SELECT user_id "
            ." FROM ks_club_has_users "
            ." WHERE club_id = '". $clubId ."'"
            ." AND membershipAskInProgress = 0";
        
        $dbh        = $this->_em->getConnection();
        $results    = $dbh->query($sql)->fetchAll(\PDO::FETCH_ASSOC);
        
        $usersIds = array();
        foreach( $results as $res ) {
            $usersIds[] = $res["user_id"];
        }
        return $usersIds;
    }
    
    /**
     *
     * @param User $user
     * @return type 
     */
    public function getRandomClubByProximity(\Ks\UserBundle\Entity\User $user)
    {
        $clubsAround    = array();
        $userDetail     = $user->getUserDetail();
        
        $myClubsIds = $this->findUserClubsIds( $user->getId() );

        //On cherche de club dans un rayon de 10,20,50km 
        if (!empty($userDetail) && $userDetail->getLatitude() && $userDetail->getLongitude()) { 
            $clubsAround = $this->searchNearbyClubs(
                $userDetail,
                $myClubsIds,
                1000
            );
        }

        return $clubsAround;
    }
    
    /**
     * On cherche par proximite gÃ©ographique par rapport Ã  $club
     * 
     * @param Club $club
     * @param array Tableau d'id clubs Ã  exclure de la recherche
     * @param int $range Rayon de la recherche, en km
     * @param int $limit Limite le nombre de clubs retrouvÃ©s
     * 
     * @return array Tableau des clubs à  proximitÃ©
     */
    public function searchNearbyClubs(\Ks\UserBundle\Entity\UserDetail $userDetail, array $excludeClubIds, $range, $limit = 5)
    {
        if( count( $excludeClubIds ) > 0 ) $whereClause = " AND ks_club.id not in (".implode(",", $excludeClubIds).")";
        else $whereClause = " ";
        
        $sql = "SELECT"
            ." ks_club.id, ks_club.name, ks_club.avatar, "
            ." (ROUND(6366 * acos(cos(radians(".$userDetail->getLatitude().")) * cos(radians(`latitude`))"
                ." * cos(radians(`longitude`) - radians(".$userDetail->getLongitude()."))"
                ." + sin(radians(".$userDetail->getLatitude().")) * sin(radians(`latitude`))))) as proximite"
            ." FROM ks_club"
            ." WHERE 1"
            . $whereClause
            ." HAVING proximite >= 0 AND proximite < $range"
            ." order by rand()"
            ." limit $limit";
        
        $dbh        = $this->_em->getConnection();
        $results    = $dbh->query($sql)->fetchAll(\PDO::FETCH_ASSOC);
                
        return $results;
    }
    
    /**
     * RequÃªte pour rÃ©cupÃ©rer les amis d'amis.
     * On compte Ã©galement le nombre d'amis en commun.
     * 
     * TODO: enlever la jointure en passant directement par friendIds
     * TODO: doit Ãªtre possible de faire le array intersect via mysql
     * 
     * @param User $user
     * @param type $limit
     * @return type array Tableau d'amis d'amis Ã  afficher
     */
    public function getClubsWithFriendsOfFriends(\Ks\UserBundle\Entity\User $user, $fofIds, $friendIds, $limit = 5)
    {
        $clubs    = array();
        
        $myClubsIds = $this->findUserClubsIds( $user->getId() );
        if( count( $myClubsIds ) > 0 ) $whereClause = " AND ks_club.id not in (".implode(",", $myClubsIds).")";
        else $whereClause = " ";
        
        $sql = "SELECT"
            ." ks_club.id, ks_club.name, ks_club.avatar, group_concat(chu.user_id) as memberIds "
            ." FROM ks_club "
            ." LEFT JOIN ks_club_has_users chu on (chu.club_id = ks_club.id)"
            //." WHERE chu.user_id in (".implode(",", $fofIds).")"
            .$whereClause
            ." group by chu.club_id"
            ." order by rand()"
            ." limit $limit";
        //var_dump($sql);
        $dbh        = $this->_em->getConnection();
        /*while( $res    = $dbh->query($sql)->fetch(\PDO::FETCH_ASSOC) ) {
            $res['numCommonFriends'] = 0;
            $clubs = $res;
        }*/
        $results = $dbh->query($sql)->fetchAll(\PDO::FETCH_ASSOC);
        foreach( $results as $res ) {
            $memberIds  = explode(',', $res['memberIds']);
            $commonFriends      = array_intersect(
                array_unique($memberIds),
                $friendIds
            );
            if (count($commonFriends) > 0) {
                $res['numCommonFriends'] = count($commonFriends);
                $clubs[] = $res;    
            }         
        }
        //var_dump($res);
        
        /*$sql        = "SELECT"
            ." ks_club.id, ks_club.name, ks_club.avatar, "
            ." ks_user.username,"
            ." ks_user_detail.image_name, ks_user_detail.firstname, ks_user_detail.lastname"
            ." FROM `ks_user_has_friends` a1"
            ." left join ks_user_has_friends a2 on (a2.user_id = a1.friend_id)"
            ." inner join ks_user on (a2.friend_id = ks_user.id)"
            ." left join ks_user_detail on (ks_user.userDetail_id = ks_user_detail.id)"
            ." WHERE a1.user_id = :userId"
            ." and a2.friend_id != a1.friend_id"
            .' and a1.friend_id != :keepinsportUserId' 
            .' and a2.friend_id != :keepinsportUserId' 
            ." group by a2.friend_id"
            ." order by rand()"
            ." limit $limit";
        
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->prepare($sql);
                
        $stmt->execute(array(
            'userId'            => $user->getId(),
            'keepinsportUserId' => self::KEEPINSPORT_USER_ID
        ));
        while ($res = $stmt->fetch(\PDO::FETCH_ASSOC)) {
            $friendOfFriendIds  = explode(',', $res['friendOfFriendIds']);
            $commonFriends      = array_intersect(
                array_unique($friendOfFriendIds),
                $friendIds
            );
            if (count($commonFriends) > 0) {
                $res['numCommonFriends'] = count($commonFriends);
                $friends[] = $res;    
            }
        }*/
         
        return $clubs;
    }
    
    public function GetRandomClubByProximityld($user){
        $clubRep = $this->_em->getRepository("KsClubBundle:Club");
          
        $clubsAround        = null;
        $aClubsSuggest      = null;
        $aClubsAround       = array();
        $userDetail         = $user->getUserDetail();
        
        //On cherche de clubs dans un rayon de 10,20,50km 
        if(!empty($userDetail) && $userDetail->getLatitude() && $userDetail->getLongitude()) {    
            
            $aAreaKm = array(10,20,50,100,200,500,1000,10000);
            foreach($aAreaKm as $keyarea => $area){
                
                if($keyarea==0){
                    $clubsAround = $this->searchClubsOrderByProximity( $user, 0, $area );
                }else{
                    $clubsAround = $this->searchClubsOrderByProximity( $user, $aAreaKm[$keyarea-1], $area );
                }

                if(!empty($clubsAround)){
                    
                    foreach($clubsAround as $ca){
                        $aClubsAround[] = array(
                            "id"        => $ca[0]["id"],
                            "proximite" => $ca["proximite"],
                            "name"      => $ca[0]["name"]
                        );  
                    }
                
                    if(count($aClubsAround) > 99){
                        break;
                    }
                }
              
            }

            if(count($aClubsAround)!=0){
            
                $nbClubsAround = count($aClubsAround);
                if($nbClubsAround < 2 ){
                    foreach($aClubsAround as $key => $clubAround){
                        $clubAround["obj"] = $clubRep->find( $clubAround["id"] );
                        $aClubsSuggest[] = $clubAround;
                    }
                }else{
                    $rand_keys = array_rand($aClubsAround, 1);
                }
                
                
                if(isset($rand_keys)){
                    if( is_array( $rand_keys )) {
                        foreach($rand_keys as $key){
                            $aClubsAround[$key]["obj"] = $clubRep->find( $aClubsAround[$key]["id"] );
                            $aClubsSuggest[] = $aClubsAround[$key];
                        }
                    } else {
                        $aClubsAround[$rand_keys]["obj"] = $clubRep->find( $aClubsAround[$rand_keys]["id"] );
                        $aClubsSuggest[] = $aClubsAround[$rand_keys];
                    }
                }               
            }
        }
        
        return $aClubsSuggest; 
    }
    
        /**
     * On cherche par Pseudo
     * Ordonné par Proximite
     * @param float latitude 
     * @param float longitude 
     * @param int $area of search
     * @return array Users (idUserDetail et proximite)
     */
    public function searchClubsOrderByProximity(\Ks\UserBundle\Entity\User $user,$areaSup = 0, $areaInf = 100)
    {
          
        $sql = "SELECT c.id as id, c.name as name, ";
        $sql .= "(ROUND(6366*acos(cos(radians(".$user->getUserDetail()->getLatitude()."))*cos(radians(`latitude`))*cos(radians(`longitude`)-radians(".$user->getUserDetail()->getLongitude()."))+sin(radians(".$user->getUserDetail()->getLatitude()."))*sin(radians(`latitude`))))) as proximite ";
        $sql .= "FROM ks_club c HAVING proximite >= $areaSup AND proximite < $areaInf "; 
        

        /*$rsm2 = new \Doctrine\ORM\Query\ResultSetMappingBuilder($this->getEntityManager());
        $rsm2->addRootEntityFromClassMetadata($this->getEntityName(), "club");
        $rsm2->addScalarResult("proximite", "proximite");*/
        
        $rsm = new \Doctrine\ORM\Query\ResultSetMapping;
        $rsm->addEntityResult($this->getEntityName(), "club");
        $rsm->addFieldResult("club", "id", "id");
        $rsm->addFieldResult('club', 'longitude', 'longitude');
        $rsm->addFieldResult('club', 'latitude', 'latitude');
        $rsm->addFieldResult('club', 'name', 'name');
        $rsm->addScalarResult("proximite", "proximite");
        //$rsm->addJoinedEntityResult('Ks\ActivityBundle\Entity\Sport' , 's', 'c', 'sport');
        //$rsm->addFieldResult('sport', 'name', 'name');
        $query = $this->_em->createNativeQuery($sql, $rsm);
        /*print_r("<pre>");
        print_r($query->getSQL());
        print_r("</pre>");*/
        $result = $query->getArrayResult();
        return $result;
    }
    
    public function isManager($clubId, $userId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select count(*) from ks_user_manage_clubs where club_id = :club_id and user_id = :user_id',
            array(
                "club_id" => $clubId,
                "user_id" => $userId
            )
        );
        
        $nb    = $stmt->fetchColumn();
        
        return $nb > 0 ? true : false;
    }
    
    /**
     *
     * @return tournaments
     */
    public function getTournamentsByClubQB( $clubId )
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('t')
                ->from('KsTournamentBundle:Tournament' , 't' )
                ->where('t.club = ?1')
                ->orderBy("t.title", "ASC")
                ->setParameter(1, $clubId);
        
        return $queryBuilder;
 
    }
 
    /**
     *
     * @param type $user
     * @param type $friend
     * @return type 
     */
    public function isMembershipAskInProgress($clubId, $userId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select count(chu.user_id) from ks_club_has_users chu '
            .' where chu.membershipAskInProgress = 1 '
            .' and chu.club_id = :club_id '
            .' and chu.user_id = :user_id',
            array(
                "club_id" => $clubId,
                "user_id" => $userId
            )
        );
        
        $nb    = $stmt->fetchColumn();
        
        return $nb > 0 ? true : false;
    }
    
    /**
     * Pour supprimer les liens event/activity d'une session planifiée
     */
    public function unlinkSession($activityId, $eventId)
    {
        //$eventId = 0 => cas de la suppression d'une activité, on a pas le eventId donc coté perf moins bien mais suffisant
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'update ks_event set activitySession_id = null where activitySession_id = :activityId and (id = :eventId OR :eventId = 0)',
            array(
                "activityId"    => $activityId,
                "eventId"       => $eventId
            )
        );
        $this->_em->flush();
        $stmt   = $dbh->executeQuery(
            'update ks_activity set event_id = null, club_id = null where id = :activityId and (event_id = :eventId OR :eventId = 0)',
            array(
                "activityId"    => $activityId,
                "eventId"       => $eventId
            )
        );
        $this->_em->flush();
    }
    
     public function getScheduleRequired($clubId)
    {
        $clubRep = $this->_em->getRepository("KsClubBundle:Club");
        $scheduleRequired    = array();
        
        $club = $clubRep->find($clubId);

        //Méthode max des dates
//        $sql = "SELECT "
//            ." username, DATE_FORMAT(startDate, '%d-%m-%Y') as startDate, TIMESTAMPDIFF(DAY, '" . date("Y-m-d") ."', startDate) as gap from ("
//            ." SELECT ehu.user_id, u.username as username, max(e.startDate) as startDate "
//            ." FROM ks_event e "
//            ." LEFT JOIN ks_event_has_users ehu on (ehu.event_id = e.id)"
//            ." LEFT JOIN ks_user u on (u.id = ehu.user_id) "
//            ." WHERE e.club_id = " . $clubId
//            ." group by ehu.user_id) as table_ref"
//            ." WHERE TIMESTAMPDIFF(DAY, '" . date("Y-m-d") ."', startDate) <= ". $club->getDelayWarning()
//            ." AND TIMESTAMPDIFF(DAY, '" . date("Y-m-d") ."', startDate) >= 0 "
//            ." ORDER BY startDate asc";
        
//        //Méthode le 1er jour vide si délai mini dépassé
//        $sql = " select user_id, username, DATE_FORMAT(missingDate, '%d-%m-%Y') as missingDate from("
//               ." select user_id, username, min(missingDate) as missingDate from("
//               ."select chu.user_id, u.username, periode.date as missingDate from ks_club_has_users chu, ks_user u,"
//               ." (SELECT DATE_FORMAT(CURDATE() + INTERVAL c.number DAY, '%Y-%m-%d') AS date"
//               ." FROM (SELECT singles + tens + hundreds number FROM "
//               ." ( SELECT 0 singles"
//               ." UNION ALL SELECT   1 UNION ALL SELECT   2 UNION ALL SELECT   3"
//               ." UNION ALL SELECT   4 UNION ALL SELECT   5 UNION ALL SELECT   6"
//               ." UNION ALL SELECT   7 UNION ALL SELECT   8 UNION ALL SELECT   9"
//               ." ) singles JOIN "
//               ." (SELECT 0 tens"
//               ." UNION ALL SELECT  10 UNION ALL SELECT  20 UNION ALL SELECT  30"
//               ." UNION ALL SELECT  40 UNION ALL SELECT  50 UNION ALL SELECT  60"
//               ." UNION ALL SELECT  70 UNION ALL SELECT  80 UNION ALL SELECT  90"
//               ." ) tens  JOIN "
//               ." (SELECT 0 hundreds"
//               ." UNION ALL SELECT  100 UNION ALL SELECT  200 UNION ALL SELECT  300"
//               ." UNION ALL SELECT  400 UNION ALL SELECT  500 UNION ALL SELECT  600"
//               ." UNION ALL SELECT  700 UNION ALL SELECT  800 UNION ALL SELECT  900"
//               ." ) hundreds"
//               ." ORDER BY number DESC) c  "
//               ." WHERE c.number BETWEEN 0 and ". $club->getDelayWarning() . ") as periode"
//               ." WHERE chu.club_id = ". $clubId
//               //." AND chu.isEnabled = 1"
//               ." AND u.id = chu.user_id"
//               ." AND not exists (select 1 from ks_user_manage_clubs umc where umc.club_id = chu.club_id and umc.user_id = u.id)"
//               ." AND not exists (select 1 from ks_event e, ks_event_has_users ehu "
//               ." where ehu.user_id = chu.user_id and ehu.event_id = e.id and e.club_id = chu.club_id and e.typeEvent_id = 5 and DATE_FORMAT(e.startDate, '%Y-%m-%d') = periode.date)) as missingDates"
//               ." group by user_id"
//               ." ORDER BY missingDate asc) as finalTable";
        
        //Méthode on récupére tout le monde
        $sql = " select user_id, username, HRMax, HRRest, VMASpeed, DATE_FORMAT(missingDate, '%d-%m-%Y') as missingDate, DATEDIFF(missingDate, CURDATE()) as delay, isEnabled from("
               ." select user_id, username, HRMax, HRRest, VMASpeed, min(missingDate) as missingDate, isEnabled from("
               ."select chu.user_id, u.username, IFNULL(ud.HRMax, 0) as HRMax, IFNULL(ud.HRRest, 0) as HRRest, IFNULL(ud.VMASpeed, 0) as VMASpeed, periode.date as missingDate, chu.isEnabled from ks_club_has_users chu, ks_user u, ks_user_detail ud, "
               ." (SELECT DATE_FORMAT(CURDATE() + INTERVAL c.number DAY, '%Y-%m-%d') AS date"
               ." FROM (SELECT singles + tens + hundreds number FROM "
               ." ( SELECT 0 singles"
               ." UNION ALL SELECT   1 UNION ALL SELECT   2 UNION ALL SELECT   3"
               ." UNION ALL SELECT   4 UNION ALL SELECT   5 UNION ALL SELECT   6"
               ." UNION ALL SELECT   7 UNION ALL SELECT   8 UNION ALL SELECT   9"
               ." ) singles JOIN "
               ." (SELECT 0 tens"
               ." UNION ALL SELECT  10 UNION ALL SELECT  20 UNION ALL SELECT  30"
               ." UNION ALL SELECT  40 UNION ALL SELECT  50 UNION ALL SELECT  60"
               ." UNION ALL SELECT  70 UNION ALL SELECT  80 UNION ALL SELECT  90"
               ." ) tens  JOIN "
               ." (SELECT 0 hundreds"
               ." UNION ALL SELECT  100 UNION ALL SELECT  200 UNION ALL SELECT  300"
               ." UNION ALL SELECT  400 UNION ALL SELECT  500 UNION ALL SELECT  600"
               ." UNION ALL SELECT  700 UNION ALL SELECT  800 UNION ALL SELECT  900"
               ." ) hundreds"
               ." ORDER BY number DESC) c  "
               ." WHERE c.number BETWEEN 0 and 365) as periode"
               ." WHERE chu.club_id = ". $clubId
               ." AND chu.isEnabled = 1" //ICI !!!
               ." AND u.id = chu.user_id"
               ." AND ud.id = u.userDetail_id"
               ." AND not exists (select 1 from ks_user_manage_clubs umc where umc.club_id = chu.club_id and umc.user_id = u.id and umc.super_admin = 0)"
               ." AND not exists (select 1 from ks_event e, ks_event_has_users ehu "
               ." where ehu.user_id = chu.user_id and ehu.event_id = e.id and e.club_id = chu.club_id and e.typeEvent_id = 5 and DATE_FORMAT(e.startDate, '%Y-%m-%d') = periode.date)) as missingDates"
               ." group by user_id"
               ." ORDER BY missingDate asc) as finalTable"
               ." UNION ALL"
               ." select user_id, username, HRMax, HRRest, VMASpeed, DATE_FORMAT(missingDate, '%d-%m-%Y') as missingDate, DATEDIFF(missingDate, CURDATE()) as delay, isEnabled from("
               ." select user_id, username, HRMax, HRRest, VMASpeed, min(missingDate) as missingDate, isEnabled from("
               ."select chu.user_id, u.username, IFNULL(ud.HRMax, 0) as HRMax, IFNULL(ud.HRRest, 0) as HRRest, IFNULL(ud.VMASpeed, 0) as VMASpeed, periode.date as missingDate, chu.isEnabled from ks_club_has_users chu, ks_user u, ks_user_detail ud, "
               ." (SELECT DATE_FORMAT(CURDATE() + INTERVAL c.number DAY, '%Y-%m-%d') AS date"
               ." FROM (SELECT singles + tens + hundreds number FROM "
               ." ( SELECT 0 singles"
               ." UNION ALL SELECT   1 UNION ALL SELECT   2 UNION ALL SELECT   3"
               ." UNION ALL SELECT   4 UNION ALL SELECT   5 UNION ALL SELECT   6"
               ." UNION ALL SELECT   7 UNION ALL SELECT   8 UNION ALL SELECT   9"
               ." ) singles JOIN "
               ." (SELECT 0 tens"
               ." UNION ALL SELECT  10 UNION ALL SELECT  20 UNION ALL SELECT  30"
               ." UNION ALL SELECT  40 UNION ALL SELECT  50 UNION ALL SELECT  60"
               ." UNION ALL SELECT  70 UNION ALL SELECT  80 UNION ALL SELECT  90"
               ." ) tens  JOIN "
               ." (SELECT 0 hundreds"
               ." UNION ALL SELECT  100 UNION ALL SELECT  200 UNION ALL SELECT  300"
               ." UNION ALL SELECT  400 UNION ALL SELECT  500 UNION ALL SELECT  600"
               ." UNION ALL SELECT  700 UNION ALL SELECT  800 UNION ALL SELECT  900"
               ." ) hundreds"
               ." ORDER BY number DESC) c  "
               ." WHERE c.number BETWEEN 0 and 365) as periode"
               ." WHERE chu.club_id = ". $clubId
               ." AND chu.isEnabled = 0" //ICI !!!
               ." AND u.id = chu.user_id"
               ." AND ud.id = u.userDetail_id"
               ." AND not exists (select 1 from ks_user_manage_clubs umc where umc.club_id = chu.club_id and umc.user_id = u.id and umc.super_admin = 0)"
               ." AND not exists (select 1 from ks_event e, ks_event_has_users ehu "
               ." where ehu.user_id = chu.user_id and ehu.event_id = e.id and e.club_id = chu.club_id and e.typeEvent_id = 5 and DATE_FORMAT(e.startDate, '%Y-%m-%d') = periode.date)) as missingDates"
               ." group by user_id"
               ." ORDER BY missingDate asc) as finalTable";    
        
        //var_dump($sql);
        $dbh        = $this->_em->getConnection();
        
        $results = $dbh->query($sql)->fetchAll(\PDO::FETCH_ASSOC);
        foreach( $results as $res ) {
            $scheduleRequired[] = $res;    
        }
        //var_dump($res);
        
        return $scheduleRequired;
    }
    
    public function getSessions($context, $id=null)
    {
        if ($context == "user") $where = "where cs.user_id = ". $id;
        elseif ($context == "club") $where = "where cs.club_id = ". $id;
        elseif ($context == "all") $where = "where cs.club_id is null";
        
        //Récupération des sessions selon le contexte
        $sql = "SELECT count(*) as total, cc.id as coachingCategory_id, cc.name as category, "
                ." cs.id as coachingSession_id, cs.name as sessionTitle, cs.detail as content, cs.distanceMin, cs.distanceMax, cs.durationMin, cs.durationMax, cs.elevationGainMin, cs.elevationGainMax, cs.elevationLostMin, cs.elevationLostMax, cs.speedAverageMin, cs.speedAverageMax, cs.hrType, cs.hrCoeffMin, cs.hrCoeffMax, cs.powMin, cs.powMax, cs.intervalDistance, cs.intervalDuration, cs.VMACoeff, "
                ." e.difficulty_id, e.sport_id, s.codeSport as sport_code, s.label as sport_label "
                ." FROM ks_coaching_session cs "
                ." LEFT JOIN ks_coaching_category cc on (cc.id = cs.category_id) "
                ." LEFT JOIN ks_event e on (e.coachingSession_id = cs.id) "
                ." INNER JOIN ks_sport s on (s.id = e.sport_id) "
                . $where
                ." GROUP BY cs.id "
                ." ORDER BY category, sessionTitle";
                //." limit 0,20";
        
        //var_dump($sql);
        $dbh        = $this->_em->getConnection();
        
        $sessions = null;
        
        $results = $dbh->query($sql)->fetchAll(\PDO::FETCH_ASSOC);
        foreach( $results as $res ) {
            $sessions[] = $res;    
        }
        //var_dump($sessions);exit;
        
        return $sessions;
    }
    
    public function getCoachingPlansData($context, $id)
    {
        $clubRep = $this->_em->getRepository("KsClubBundle:Club");
        $coachingPlansData    = array();
        
        if ($context == 'user') $where = "where cp.user_id = ". $id;
        else $where = "where cp.club_id = ". $id;
        
        //Récupération des sessions les plus utilisées par le club
        $sql = "select min(e.startDate) as startDate, max(e.endDate) as endDate, cp.id, cp.user_id as userId, cpt.code as type"
                ." from ks_coaching_plan cp "
                ." LEFT JOIN ks_event e on (e.coachingPlan_id = cp.id)"
                ." LEFT JOIN ks_coaching_plan_type cpt on (cpt.id = cp.coachingPlanType_id)"
                . $where 
                ." GROUP BY cp.id"
                ." ORDER BY cp.id";
        
        //var_dump($sql);
        $dbh        = $this->_em->getConnection();
        
        $coachingPlansData = null;
        
        $results = $dbh->query($sql)->fetchAll(\PDO::FETCH_ASSOC);
        foreach( $results as $res ) {
            $coachingPlansData[] = $res;    
        }
        
        return $coachingPlansData;
    }
    
    public function getCoachingPlanLength($planId)
    {
        //Récupération de la durée en jours d'un plan (qu'on souhaite partager)
        //var_dump($sql);
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            "select DATEDIFF(max(e.endDate), min(e.startDate)) as length "
                ." from ks_coaching_plan cp "
                ." LEFT JOIN ks_event e on (e.coachingPlan_id = cp.id)"
                ." WHERE cp.id = :planId"
                ." GROUP BY cp.id"
                ." ORDER BY cp.id",
            array(
                "planId" => $planId
            )
        );
        
        $nb    = $stmt->fetchColumn();
        
        return $nb;
    }
    
    public function getFirstPlan($userId)
    {
        $planData    = array();
        
        //Récupération du plan principal d'un user qui vient juste d'être crée sans event ou d'un plan en cours
        $sql = "SELECT count(id), id, onGoing, type FROM ("
                ." SELECT startDate <= CURDATE() as onGoing, type, id, endDate FROM (SELECT cpt.code as type, min(e.startDate) as startDate, max(e.endDate) as endDate, cp.id, cp.user_id as userId "
                ." FROM ks_coaching_plan cp"
                ." LEFT JOIN ks_event e on (e.coachingPlan_id = cp.id)"
                ." LEFT JOIN ks_coaching_plan_type cpt on (cpt.id = cp.coachingPlanType_id)"
                ." WHERE cp.user_id = ". $userId
                ." GROUP BY cp.id"
                ." ORDER BY cp.id) as mainPlans) as myTable"
                ." WHERE myTable.endDate >= CURDATE()"
                ." GROUP BY id"
                ." UNION "
                ." SELECT 0, cp.id, 0 as onGoing, cpt.code as type FROM ks_coaching_plan cp"
                ." LEFT JOIN ks_coaching_plan_type cpt on (cpt.id = cp.coachingPlanType_id)"
                ." WHERE cp.user_id = ". $userId
                ." AND   not exists (SELECT 1 FROM ks_event e WHERE e.coachingPlan_id = cp.id)";
        
        //var_dump($sql);exit;
        $dbh        = $this->_em->getConnection();
        
        $planData = null;
        
        $results = $dbh->query($sql)->fetchAll(\PDO::FETCH_ASSOC);
        foreach( $results as $res ) {
            $planData[] = $res;    
        }
        return $planData;
    }
}