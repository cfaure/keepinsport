<?php

namespace Ks\LeagueBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * LeagueCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LeagueCategoryRepository extends EntityRepository
{
    public function findLeaguesUpdatables(  ) {
        $dbh = $this->_em->getConnection();
        $sql = "SELECT lc.id, lc.label"
            ." FROM ks_league_category lc"
            ." WHERE lc.label != 'other'";
        
        $stmt = $dbh->executeQuery($sql, array());
        
        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }
    
    public function findLeagues(  ) {
        $dbh = $this->_em->getConnection();
        $sql = "SELECT lc.id, lc.label"
            ." FROM ks_league_category lc";
        
        $stmt = $dbh->executeQuery($sql, array());
        
        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }
    
    public function findUsersIdsByCategoryId( $leagueCategoryId )
    {
        $dbh = $this->_em->getConnection();
        $sql = "SELECT u.id"
            ." FROM ks_user u"
            .' LEFT JOIN ks_league_level ll on (ll.id = u.leagueLevel_id)'
            .' LEFT JOIN ks_league_category ll_category on (ll.category_id = ll_category.id)'
            ." WHERE ll_category.id = :leagueCategoryId";
        
        $stmt = $dbh->executeQuery($sql, array('leagueCategoryId' => $leagueCategoryId));

        return $stmt->fetchAll(\PDO::FETCH_COLUMN);
    }
    
    public function findUsersIdsBetweenRank( $leagueCategoryId, $firstRank, $lastRank )
    {
        $dbh = $this->_em->getConnection();
        $sql = "SELECT lr.user_id"
            ." FROM ks_league_ranking lr"
            ." WHERE lr.league_id = :leagueCategoryId "
            ." AND lr.rank >= :firstRank"
            ." AND lr.rank < :lastRank";
        
        $stmt = $dbh->executeQuery($sql, array(
            'leagueCategoryId'  => $leagueCategoryId,
            'firstRank'         => $firstRank,
            'lastRank'          => $lastRank,
        ));

        return $stmt->fetchAll(\PDO::FETCH_COLUMN);
    }
    
    public function findUserIdByLeagueAndRank( $leagueCategoryId, $rank )
    {
        $dbh = $this->_em->getConnection();
        $sql = "SELECT lr.user_id"
            ." FROM ks_league_ranking lr"
            ." WHERE lr.league_id = :leagueCategoryId "
            ." AND lr.rank = :rank";
        
        $stmt = $dbh->executeQuery($sql, array(
            'leagueCategoryId'  => $leagueCategoryId,
            'rank'               => $rank
        ));

        return $stmt->fetch(\PDO::FETCH_COLUMN);
    }
    
    public function findLeagueCategoryCodeByLeagueLevelId( $leagueLevelId )
    {
        $dbh = $this->_em->getConnection();
        $sql =   "SELECT lc.label "
                ." FROM ks_league_category lc "
                ." INNER JOIN ks_league_level ll ON ll.category_id = lc.id "
                ." AND ll.id = :leagueLevelId ";
        
        $stmt = $dbh->executeQuery($sql, array(
            'leagueLevelId'  => $leagueLevelId,
        ));

        return $stmt->fetch(\PDO::FETCH_COLUMN);
    }
    
    public function findBestPointsByLeagueAndStars( $leagueCategoryId, $stars, $translator = null )
    {
        $em = $this->_em;
        $userRep = $em->getRepository('KsUserBundle:User');  
        $leagueCatRep = $em->getRepository('KsLeagueBundle:LeagueCategory');  
        
        $usersIdsInCategory = $leagueCatRep->findUsersIdsByCategoryId( $leagueCategoryId );
        
        $users      = $userRep->findUsers(array(
            "usersIds"      => $usersIdsInCategory,
            "withPoints"    => true
        ), $translator);

        //Tri par points décroissants
        usort( $users, array( "Ks\UserBundle\Entity\UserRepository", "orderUsersByPointsDesc" ) );
        
        foreach( $users as $user ) {
            if ( $user["leagueLevelStarNumber"] == $stars ) {
                return $user["points"];
            }
        }

        return null;
    }
    
    public function findWorsePointsByLeagueAndStars( $leagueCategoryId, $stars, $translator = null )
    {
        $em = $this->_em;
        $userRep = $em->getRepository('KsUserBundle:User');  
        $leagueCatRep = $em->getRepository('KsLeagueBundle:LeagueCategory');  
        
        $usersIdsInCategory = $leagueCatRep->findUsersIdsByCategoryId( $leagueCategoryId );
        
        $users      = $userRep->findUsers(array(
            "usersIds"      => $usersIdsInCategory,
            "withPoints"    => true
        ), $translator);

        //Tri par points décroissants
        usort( $users, array( "Ks\UserBundle\Entity\UserRepository", "orderUsersByPointsAsc" ) );
        
        foreach( $users as $user ) {
            if ( $user["leagueLevelStarNumber"] == $stars ) {
                return $user["points"];
            }
        }

        return null;
    }
    
    public function updateUserRank( $userId, $leagueCategoryId, $rank, $hasPoints = 0 ) {
        $dbh = $this->_em->getConnection();
        
        $sql =   "INSERT INTO ks_league_ranking (`user_id`, `league_id`, `rank`, `hasPoints`) "
                ." VALUES (:userId, :leagueId, :rank, :hasPoints ) "
                ." ON DUPLICATE KEY UPDATE `league_id` = :leagueId, `rank` = :rank, `hasPoints` = :hasPoints";
        
        $dbh->executeQuery($sql, array(
            'userId'    => $userId,
            'leagueId'  => $leagueCategoryId,
            'rank'      => $rank,
            'hasPoints' => $hasPoints
        ));
    }
    
    public function updateStars( $leagueCategoryId, $month ) {
        $leagueLevelRep = $this->_em->getRepository('KsLeagueBundle:LeagueLevel');  
        $userRep        = $this->_em->getRepository('KsUserBundle:User');
        $dbh            = $this->_em->getConnection();
        
        if( $month == null ) {
            $month = date("m");
        }
        
        $sql =   "SELECT count(`user_id`) "
                ." FROM ks_league_ranking "
                ." WHERE `league_id` = :leagueId"
                ." AND `hasPoints` = :hasPoints";
        
        $stmt = $dbh->executeQuery($sql, array(
            'leagueId'      => $leagueCategoryId,
            'hasPoints'     => true,
        ));
        
        $nbUsersInLeagueWithPoints = $stmt->fetch(\PDO::FETCH_COLUMN);
        
        //On arrondi à l'entier inférieur. Le niveau 0 étoiles contiendra plus d'utilisateurs
        $nbUsersInEachLevel = floor( $nbUsersInLeagueWithPoints / 4 );
        $temp = $nbUsersInEachLevel * 4;
        $rest = $nbUsersInLeagueWithPoints - $temp;
        
        //Juste pour infos, pour comprendre la suite
        //On case les derniers utilisateurs
        switch( $rest ) {
            case 1;
                //1 user dans 0*
            case 2;
                //1 user dans 0*
                //1 user dans 1*
            case 3;
                //1 user dans 0*
                //1 user dans 1*
                //1 user dans 2*
        }
        
        //Définition d'un tableau avec toutes les étapes de rang à mettre à jour
        $rankSteps = array();
        $rankSteps["3*"] = array(
            "stars"     => 3,
            "firstRank" => 1,
            "lastRank"  => $nbUsersInEachLevel + 1
        );
        $rankSteps["2*"] = array(
            "stars"     => 2,
            "firstRank" => $rankSteps["3*"]["lastRank"],
            "lastRank"  => $rest >= 3 ? $rankSteps["3*"]["lastRank"] + $nbUsersInEachLevel + 1 : $rankSteps["3*"]["lastRank"] + $nbUsersInEachLevel
        );
        
        $rankSteps["1*"] = array(
            "stars"     => 1,
            "firstRank" => $rankSteps["2*"]["lastRank"],
            "lastRank"  => $rest >= 2 ? $rankSteps["2*"]["lastRank"] + $nbUsersInEachLevel + 1 : $rankSteps["2*"]["lastRank"] + $nbUsersInEachLevel
        );
        $rankSteps["0*"] = array(
            "stars"     => 0,
            "firstRank" => $rankSteps["1*"]["lastRank"],
            "lastRank"  => $rest >= 1 ? $rankSteps["1*"]["lastRank"] + $nbUsersInEachLevel + 1 : $rankSteps["1*"]["lastRank"] + $nbUsersInEachLevel
        );
        
        //Mise à jour du nivezau de ligue des users
        foreach( $rankSteps as $rankStep ) {
            $leagueLevelId = $leagueLevelRep->findLeagueLevelIdByCategoryIdAndStars( $leagueCategoryId, $rankStep["stars"] );
            $usersIds = $this->findUsersIdsBetweenRank( $leagueCategoryId, $rankStep["firstRank"], $rankStep["lastRank"] );
            
            foreach( $usersIds as $userId ) {
                $leagueLevelRep->updateLeagueLevel( $userId, $leagueLevelId );
            }
        }
        
        //Mise à jour des users avec 0 points -> 0 étoiles
        $usersWith0Points      = $userRep->findUsers(array(
            "withPoints"            => true,
            "usersWith0points"      => true,
            "usersWith0PointsOnly"  => true,
            "leagueCategoryId"      => $leagueCategoryId,
            "activitiesStartOn"     => date("Y-$month-01"),
            "activitiesEndOn"       => date("Y-$month-t")
        ));
        
        $leagueLevelId = $leagueLevelRep->findLeagueLevelIdByCategoryIdAndStars( $leagueCategoryId, 0 );
        foreach( $usersWith0Points as $user ) {
            $leagueLevelRep->updateLeagueLevel( $user["id"], $leagueLevelId );
        }
    }
}