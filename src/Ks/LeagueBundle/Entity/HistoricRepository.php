<?php

namespace Ks\LeagueBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * HistoricRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HistoricRepository extends EntityRepository
{
    public function save( $month, $year, $userId, $leagueLevelId, $leagueCategoryId, $rank, $points ) {
        $dbh = $this->_em->getConnection();
        
        //On efface l'ancienne ligne si elle existe
        $sql =    "DELETE "
                ." FROM `ks_league_historic` "
                ." WHERE `user_id` = :userId "
                ." AND `month` = :month "
                ." AND `year` = :year ";

        $dbh->executeQuery($sql, array(
            'month'     => $month,
            'year'      => $year,
            'userId'    => $userId,
        ));
        
        //On enregistre les nouvelles donnÃ©es
        
        $sql =   "INSERT INTO ks_league_historic (`month`, `year`, `user_id`, `leagueLevel_id`, `leagueCategory_id`, `rank`, `points`) "
                ." VALUES (:month, :year, :userId, :leagueLevelId, :leagueCategoryId, :rank, :points ) ";
        
        $dbh->executeQuery($sql, array(
            'month'             => $month,
            'year'              => $year,
            'userId'            => $userId,
            'leagueLevelId'     => $leagueLevelId,
            'leagueCategoryId'  => $leagueCategoryId,
            'rank'              => $rank,
            'points'            => $points
        ));
    }
    
    public function findLeagueHistoric( $month, $year, $userId ) {
        $dbh = $this->_em->getConnection();
        
        //On efface l'ancienne ligne si elle existe
        $sql =    "SELECT leagueLevel_id"
                ." FROM `ks_league_historic` "
                ." WHERE `user_id` = :userId "
                ." AND `month` = :month "
                ." AND `year` = :year ";

        $stmt = $dbh->executeQuery($sql, array(
            'month'     => $month,
            'year'      => $year,
            'userId'    => $userId,
        ));
        
        return $stmt->fetch(\PDO::FETCH_COLUMN);
    }
}