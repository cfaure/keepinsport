<?php

namespace Ks\NotificationBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository
{  
    /**
     *
     * @return int Nombre total de notifications dans la base pour un utilisateur
     */
    public function getTotalNotificationsNumber(\Ks\UserBundle\Entity\User $user)
    {      
        $query = $this->_em->createQuery(
            "select count(n.id) from KsNotificationBundle:Notification n"
            ." where (n.owner = ?0)"
        );
        $query->setParameters(array($user));
        
        return (int)$query->getSingleScalarResult();
    }
    
    /**
     *
     * @return int Nombre total de nouvelles notifications dans la base pour un utilisateur
     */
    public function getNumberWithoutNeedAnAnswer(\Ks\UserBundle\Entity\User $user)
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('count(n.id)')
                ->from('KsNotificationBundle:Notification', 'n')
                //->where('n.type not in (?1)')
                ->andWhere('n.isRead = ?2')
                ->andWhere('n.owner = ?3')
                ->andWhere('n.needAnAnswer != TRUE')
                ->andWhere('n.gotAnAnswer != TRUE')
                //->setParameter(1, $notificationTypesToBeRemove)
                ->setParameter(2, false)
                ->setParameter(3, $user->getId());

        $query = $queryBuilder->getQuery();
        
        return (int)$query->getSingleScalarResult();
    }
    
    /**
     *
     * @return int Nombre total de nouvelles notifications dans la base pour un utilisateur
     */
    public function getNewNotificationsNumber(\Ks\UserBundle\Entity\User $user, \Ks\NotificationBundle\Entity\NotificationType $type)
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('count(n.id)')
                ->from('KsNotificationBundle:Notification', 'n')
                ->where('n.needAnAnswer = ?1')
                ->andWhere('n.gotAnAnswer = ?2')
                ->andWhere('n.owner = ?3')
                ->andWhere('n.type = ?4')
                ->setParameter(1, true)
                ->setParameter(2, false)
                ->setParameter(3, $user->getId())
                ->setParameter(4, $type->getId());

        $query = $queryBuilder->getQuery();
        
        return (int)$query->getSingleScalarResult();
    }
   
    /**
    //TO MODIFY
     */
    public function getNewNeedAnAnswerNotifications(\Ks\UserBundle\Entity\User $user, \Ks\NotificationBundle\Entity\NotificationType $type)
    {      
        $currentDateTime = new \DateTime();
        
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('n')
                ->from('KsNotificationBundle:Notification', 'n')
                ->where('n.needAnAnswer = ?1')
                ->andWhere('n.gotAnAnswer = ?2')
                ->andWhere('n.owner = ?3')
                ->andWhere('n.type = ?4')
                ->andWhere('n.createdAt < ?5')
                ->setParameter(1, true)
                ->setParameter(2, false)
                ->setParameter(3, $user->getId())
                ->setParameter(4, $type->getId())
               ->setParameter(5, $currentDateTime);
        

        $query = $queryBuilder->getQuery();
        
        return $query->getResult();
    }
    
    /**
     *
     * @return array collection nouvelles demandes d'ami
     */
    public function findWithoutNeedAnAnswer(\Ks\UserBundle\Entity\User $user, $numberToGet)
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('n')
                ->from('KsNotificationBundle:Notification', 'n')
                //->where('n.type not in (?1)')
                ->andWhere('n.owner = ?2')
                ->andWhere('n.needAnAnswer != TRUE')
                ->andWhere('n.gotAnAnswer != TRUE')
                ->orderBy('n.createdAt', 'DESC')
                ->setMaxResults($numberToGet)
                //->groupBy('n.activity')
                //->addGroupBy('n.type')
                ->setParameter(2, $user->getId());

        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }
    
    /**
     *
     * @return int Nombre total de notifications dans la base pour un utilisateur
     */
    public function setReadNotifications(\Ks\UserBundle\Entity\User $user, $arrayNewNotifsId)
    {    
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->update('KsNotificationBundle:Notification', 'n')
                ->set('n.isRead', '?1')
                ->set('n.readAt', '?2')
                ->where('n.owner = ?3')
                ->andWhere('n.id in (?4)')
                ->setParameter(1, true)
                ->setParameter(2, new \DateTime())
                ->setParameter(3, $user->getId())
                ->setParameter(4, $arrayNewNotifsId);

        $query = $queryBuilder->getQuery();
        return (int)$query->getSingleScalarResult();
    }

    public function createNotification(\Ks\UserBundle\Entity\User $owner, \Ks\UserBundle\Entity\User $fromUser, \Ks\NotificationBundle\Entity\NotificationType $type, $message, $activity = null, $needAnAnswer = false, \Ks\ClubBundle\Entity\Club $fromClub = null, $event = null)
    {
        $possibleTypesMerge = array("vote", "comment");
        
        $notification = new Notification();
        $notification->setOwner($owner);
        $notification->setFromUser($fromUser);
        if ( $fromClub != null ) $notification->setFromClub($fromClub);
        $notification->setType($type);
        $notification->setText($message);
        $notification->setNeedAnAnswer($needAnAnswer);
        
        if ( isset($activity) && $activity != null ) $notification->setActivity($activity);
        if ( isset($event) && $event != null ) $notification->setEvent($event);
        
        if( in_array( $type->getName(), $possibleTypesMerge ) ) {
            $notification->setPossibleMerge( true );
        }
        
        $this->_em->persist($notification);
        $this->_em->flush();
        
        return $notification;
    }
    
    public function createClubNotification(\Ks\ClubBundle\Entity\Club $fromClub, \Ks\UserBundle\Entity\User $owner, \Ks\NotificationBundle\Entity\NotificationType $type, $message, \Ks\ClubBundle\Entity\TeamComposition $teamComposition = null, \Ks\UserBundle\Entity\User $fromUser = null)
    {      
        $notification = new Notification();
        $notification->setOwner($owner);
        $notification->setFromClub($fromClub);
        $notification->setType($type);
        $notification->setText($message);
        
        if( $teamComposition != null ) $notification->setTeamComposition( $teamComposition );
        if( $fromUser != null ) $notification->setFromUser($fromUser);
        
        $this->_em->persist($notification);
        $this->_em->flush();
        
        return $notification;
    }
    
    
    public function createNotificationEvent(\Ks\UserBundle\Entity\User $owner, \Ks\UserBundle\Entity\User $fromUser, \Ks\NotificationBundle\Entity\NotificationType $type, $message, $event = null, $needAnAnswer = false, $createdAt = null, $readAt = null)
    {
        $notification = new Notification($createdAt,$readAt);
        $notification->setOwner($owner);
        $notification->setFromUser($fromUser);
        $notification->setType($type);
        $notification->setText($message);
        $notification->setNeedAnAnswer($needAnAnswer);
        
        if ( $event != null ) $notification->setEvent($event);
        
        $this->_em->persist($notification);
        $this->_em->flush();
        
        return $notification;
    }
    
    public function createMessageNotification(\Ks\UserBundle\Entity\User $owner, \Ks\UserBundle\Entity\User $fromUser, \Ks\NotificationBundle\Entity\NotificationType $type, \Ks\MessageBundle\Entity\Message $message, $text)
    {        
        $notification = new Notification();
        $notification->setOwner($owner);
        $notification->setFromUser($fromUser);
        $notification->setType($type);
        $notification->setText($text);
        $notification->setMessage($message);
        
        $this->_em->persist($notification);
        $this->_em->flush();
        
        return $notification;
    }
   
    
    

    public function deleteNotification(\Ks\NotificationBundle\Entity\Notification $notification)
    {
        $this->em->remove($notification);
        $this->em->flush();
    }

    public function updateNotification(\Ks\UserBundle\Entity\User $notification, $andFlush = true)
    {
        $this->em->persist($notification);
        if ($andFlush) {
            $this->em->flush();
        }
    }

    public function findNotificationBy(array $criteria)
    {
        return $this->repository->findOneBy($criteria);
    }
}