<?php

namespace Ks\TournamentBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MatchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MatchRepository extends EntityRepository
{
    public function findTournamentsMatches( array $params = array() ) {
        $dbh        = $this->_em->getConnection();
        $userRep    = $this->_em->getRepository('KsUserBundle:User');
        
        $vars       = array();  
        $sqlParts   = array(
            'select' => 'SELECT'
                .' tm.id, tm.user1_id, tm.user2_id, tm.username1, tm.username2, tm.score,'
                .' tm.user1Won, tm.user2Won'
            ,
            'from'  => 'FROM ks_tournament_match tm'
            ,
            'where' => "WHERE 1",
            'group' => 'GROUP BY tm.id',
            'order' => '',
            'limit' => ''
        );
        
        if( isset( $params['tournamentRoundId'] ) && $params['tournamentRoundId'] != '' ) {
            $sqlParts["where"] .= ' AND tm.round_id = :tournamentRoundId';
            $vars['tournamentRoundId'] = $params['tournamentRoundId'];
        }
        
        if( isset( $params['tournamentMatchId'] ) && $params['tournamentMatchId'] != '' ) {
            $sqlParts["where"] .= ' AND tm.id = :tournamentMatchId';
            $vars['tournamentMatchId'] = $params['tournamentMatchId'];
        }
        
        $stmt = $dbh->executeQuery(implode(' ', $sqlParts), $vars);
        
        $matches = array();
        while( $match = $stmt->fetch(\PDO::FETCH_ASSOC) ) {
            //Si le sportif 1 est un vrai utilisateur, on le récupère
            if( $match["user1_id"] != null) {
                $match["user1"] = $userRep->findOneUser(array("userId" => $match["user1_id"])); 
            }

            //Si le sportif 2 est un vrai utilisateur, on le récupère
            if( $match["user2_id"] != null) {
                $match["user2"] = $userRep->findOneUser(array("userId" => $match["user2_id"]));
            }     
            
            $matches[] = $match;
        }
        
        return $matches;
    }
    
    public function findOneTournamentMatch( array $params = array() ) {
        $matches = $this->findTournamentsMatches( $params );
        
        if( count( $matches) > 0 ) return $matches[0];
        else return null;   
    }
    
    /**
     *
     * @param 
     * @return PreparedStatement 
     */
    public function getPreparedStatementForTournamentMatchs()
    {
        $dbh    = $this->_em->getConnection();
        $sql    =  'SELECT tm.id, tm.user1_id, tm.user2_id, tm.username1, tm.username2, tm.score'
            .' FROM ks_tournament_match tm'
            .' WHERE tm.round_id = :tournamentRoundId';
        
        return $dbh->prepare($sql);
    }
}