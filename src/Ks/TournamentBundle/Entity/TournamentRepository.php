<?php

namespace Ks\TournamentBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TournamentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TournamentRepository extends EntityRepository
{
    public function findTournaments( array $params = array() ) {
        $dbh        = $this->_em->getConnection();
        $userRep    = $this->_em->getRepository('KsUserBundle:User');
        $tournamentMatchRep = $this->_em->getRepository('KsTournamentBundle:Match');
        
        $vars       = array();  
        $sqlParts   = array(
            'select' => 'SELECT'
                .' t.id, t.title, t.startDate, t.endDate, t.club_id,'
                .' t.firstUser_id, t.firstUsername,'
                .' t.secondUser_id, t.secondUsername,'
                .' t.thirdUser_id, t.thirdUsername'
            ,
            'from'  => 'FROM ks_tournament t'
            ,
            'where' => "WHERE 1",
            'group' => 'GROUP BY t.id',
            'order' => '',
            'limit' => ''
        );
        
        if( isset( $params['tournamentId'] ) && $params['tournamentId'] != '' ) {
            $sqlParts["where"] .= ' AND t.id = :tournamentId';
            $vars['tournamentId'] = $params['tournamentId'];
        }
        
        if( isset( $params['clubId'] ) && $params['clubId'] != '' ) {
            $sqlParts["where"] .= ' AND t.club_id = :clubId';
            $vars['clubId'] = $params['clubId'];
        }
        
        $stmt = $dbh->executeQuery(implode(' ', $sqlParts), $vars);
        
        $tournamentRoundsStmt             = $this->getPreparedStatementForTournamentRounds();
        
        $tournaments = array();
        while( $tournament = $stmt->fetch(\PDO::FETCH_ASSOC) ) {
            //Recherche des rounds
            $tournamentRoundsStmt->execute(array('tournamentId'    => $tournament["id"]));
            $result = $tournamentRoundsStmt->fetchAll(\PDO::FETCH_ASSOC);  
            $rounds = is_array($result) ? $result : array();
            
            //Si le first user est un vrai utilisateur, on le récupère
            if( $tournament["firstUser_id"] != null) {
                $tournament["firstUser"] = $userRep->findOneUser(array("userId" => $tournament["firstUser_id"])); 
            }
            
            //Si le second user est un vrai utilisateur, on le récupère
            if( $tournament["secondUser_id"] != null) {
                $tournament["secondUser"] = $userRep->findOneUser(array("userId" => $tournament["secondUser_id"])); 
            }
            
            //Si le third user est un vrai utilisateur, on le récupère
            if( $tournament["thirdUser_id"] != null) {
                $tournament["thirdUser"] = $userRep->findOneUser(array("userId" => $tournament["thirdUser_id"])); 
            } 
            
            $tournament["rounds"] = array();
            foreach( $rounds as $round ) {                
                $round["matches"] = $tournamentMatchRep->findTournamentsMatches( array( 'tournamentRoundId' => $round["id"] ));
                
                $tournament["rounds"][] = $round;
            }
                
            $tournaments[] = $tournament;
        }
        
        return $tournaments;
    }
    
    public function findOneTournament( array $params = array() ) {
        $tournaments = $this->findTournaments( $params );
        
        if( count( $tournaments) > 0 ) return $tournaments[0];
        else return null;   
    }
    
    /**
     *
     * @param 
     * @return PreparedStatement 
     */
    public function getPreparedStatementForTournamentRounds()
    {
        $dbh    = $this->_em->getConnection();
        $sql    =  'SELECT tr.id, tr.num, tr.title'
            .' FROM ks_tournament_round tr'
            .' WHERE tr.tournament_id = :tournamentId'
            .' ORDER BY tr.num ASC';
        
        return $dbh->prepare($sql);
    }
    
    public function publishTournamentCreation(\Ks\TournamentBundle\Entity\Tournament $tournament )
    {
        $notificationTypeRep = $this->_em->getRepository( "KsNotificationBundle:NotificationType" );
        $notificationType_eventParticipation = $notificationTypeRep->findOneByName( "tournament" );
        
        if( is_object( $notificationType_eventParticipation ) ) {
            $abstractActivity = new \Ks\ActivityBundle\Entity\AbstractActivity( $notificationType_eventParticipation );
            $abstractActivity->setTournament( $tournament );
            
            $club = $tournament->getClub();
            if( is_object($club)) {
                $abstractActivity->setClub( $club );
            }

            $this->_em->persist( $abstractActivity );
            $this->_em->flush();

            return $abstractActivity;
        } 
        
        return null;
    }
    
       /**
     *
     * @return tournaments
     */
    public function getTournamentsByMyClubQB( $userId )
    {     
        $clubRep = $this->_em->getRepository( "KsClubBundle:Club" );
        $myClubsIds = $clubRep->findUserClubsIds( $userId );
        
        if( empty( $myClubsIds ) ) $myClubsIds = array(0);
        
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('t')
                ->from('KsTournamentBundle:Tournament' , 't' )
                ->where('t.club in (?1)')
                ->orderBy("t.title", "ASC")
                ->setParameter(1, $myClubsIds);
        
        return $queryBuilder;

    }
}