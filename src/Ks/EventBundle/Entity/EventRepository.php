<?php

namespace Ks\EventBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
    public function getTotal()
    {
        $qb = $this->createQueryBuilder('a')
                   ->select('COUNT(a)');     // On sélectionne simplement COUNT(a)

        return (int) $qb->getQuery()
                         ->getSingleScalarResult(); // Utilisation de getSingleScalarResult pour avoir directement le résultat du COUNT
    }
    
    public function findEventsNotConnectedToActivityQB()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb ->select('ev')
            ->from('KsEventBundle:Event', 'ev')
            ->leftJoin('ev.activitySession', 'a')
            ->where('a.id = ?1')
            ->setParameter(1, null);

        return $qb;
    }
    
    /*
     * @param $cal : \Zend_Gdata_Calendar 
     * @param $agendaHasEvents : object agendaHasEvents
     * @return $aLogEvent : array , logs of events sync 
     */
    public function syncKeepinToGoogle($agendaHasEvents , $cal)
    {
        $aLogEvent = array();
        
        $aLogEvent[] = "    in syncKeepinToGoogle";
        
        //FMO : remarque importante : modif pour ne prendre en compte que les modifs de Google vers KS !
        
        foreach($agendaHasEvents as $key => $agendaHasEvent){
            
            $eventBDD           = $this->find($agendaHasEvent->getEvent()->getId());
            $startTimeBDD       = $eventBDD->getStartDate();
            $endTimeBDD         = $eventBDD->getEndDate();
            $startDateBDD       = $eventBDD->getStartDate()->format("Y-m-d H:i:s");
            $endDateBDD         = $eventBDD->getEndDate()->format("Y-m-d H:i:s");
            $eventNameBDD       = $eventBDD->getName();
            $eventContentBDD    = $eventBDD->getContent();
            
            $aLogEvent[] = "    id=".$agendaHasEvent->getEvent()->getId();
            
            //on vérifie si c'est un événement de type google
            if($eventBDD->getIsGoogleEvent()){
                
              $googleEventBDD = $eventBDD->getIsGoogleEvent();
              $idUrlEvent = $googleEventBDD->getIdUrlEvent();
              
              try {
                  
                 $eventGoogle                   = $cal->getCalendarEventEntry($idUrlEvent);
                 $startTime                     = $eventGoogle->when[0]->startTime;
                 $endTime                       = $eventGoogle->when[0]->endTime;
                 $startTime                     = new \DateTime($startTime);
                 $startDateGoogle               = $startTime->format("Y-m-d H:i:s");
                 $endTime                       = new \DateTime($endTime);
                 $endDateGoogle                 = $endTime->format("Y-m-d H:i:s");
                 $eventNameGoogle               = $eventGoogle->title;
                 $eventContentGoogle            = $eventGoogle->content;          
                 $dateGoogle                    = new \DateTime($eventGoogle->updated);
                 $dateLastModificationsGoogle   = $dateGoogle->setTimeZone(new \DateTimeZone("Europe/Paris"));
                 $dateLastModificationsGoogle   = $dateLastModificationsGoogle->format("Y-m-d H:i:s");
                 $dateLastModificationsBDD      = $eventBDD->getLastModificationDate()->format("Y-m-d H:i:s");
                 //il y a une différence entre le bdd et la calendirer google
                 if($startDateBDD != $startDateGoogle || 
                    $endDateBDD != $endDateGoogle ||
                    $eventNameBDD != $eventNameGoogle ||
                    $eventContentBDD != $eventContentGoogle   
                    ){
                        //l'événement doit etre synchronisé si la date de modification de l'événement keepin est > date google 
//                        if($dateLastModificationsBDD > $dateLastModificationsGoogle){
//                            //Pas de modification possible alors on supprime et on recréé
//                            $eventGoogle->delete();
//                            $aLogEvent[] = "    GA - 1 - Modification de l'evenement repercution cote google ".$eventNameBDD ;
//                            $idEventUrl  = $this->addEventOnGoogleCalendar($cal , $eventNameBDD , $startTimeBDD , $endTimeBDD , $eventContentBDD = null , $eventPlace = null);
//                            $googleEvent = $this->addGoogleEvent($eventNameBDD, $idEventUrl);
//                            $this->associateGoogleEventToEvent($eventBDD, $googleEvent);
//                        }
                    }
              }catch (\Zend_Gdata_App_Exception $e) {
                $aLogEvent[] = "    GA - Suppression cote google ".$eventNameBDD ;
                $this->_em->remove($eventBDD);
                $this->_em->remove($googleEventBDD);
                $this->_em->flush();
//                $idEventUrl  = $this->addEventOnGoogleCalendar($cal , $eventNameBDD , $startTimeBDD , $endTimeBDD , $eventContentBDD = null , $eventPlace = null);
//                $googleEvent = $this->addGoogleEvent($eventNameBDD, $idEventUrl);          
//                $this->associateGoogleEventToEvent($eventBDD, $googleEvent);
              }
            }else{
//                $aLogEvent[] = "    GA - Ajout et liaison de l evenement - ".$eventNameBDD ;
//                $idEventUrl = $this->addEventOnGoogleCalendar($cal , $eventNameBDD , $startTimeBDD , $endTimeBDD , $eventContentBDD = null , $eventPlace = null);
//                $googleEvent = $this->addGoogleEvent($eventNameBDD, $idEventUrl);
//                $this->associateGoogleEventToEvent($eventBDD, $googleEvent);
            }
        }
        return $aLogEvent;
    }
    
    /*
     * @param $cal : \Zend_Gdata_Calendar 
     * @param $eventNameBDD 
     * @param $startTimeBDD
     * @param $endTimeBDD
     * @param $eventContentBDD
     * @param $eventPlace
     * @return $idGoogleEvent
     */
    public function addEventOnGoogleCalendar($cal , $eventNameBDD , $startTimeBDD , $endTimeBDD , $eventContentBDD = null , $eventPlace = null){
        
        $eventGoogle = $cal->newEventEntry();
        $eventGoogle->title = $cal->newTitle($eventNameBDD);
        //$event->where = array($cal->newWhere("Mountain View, California"));
        if(isset($eventContentBDD)){
            $eventGoogle->content = $cal->newContent($eventContentBDD);
        }
        $startDate = $startTimeBDD->format("Y-m-d");
        $startTime = $startTimeBDD->format("H:i");
        $endDate = $endTimeBDD->format("Y-m-d");
        $endTime = $endTimeBDD->format("H:i");
        $tzOffset = "+02";
        $when = $cal->newWhen();
        $when->startTime = "{$startDate}T{$startTime}:00.000{$tzOffset}:00";
        $when->endTime = "{$endDate}T{$endTime}:00.000{$tzOffset}:00";
        $eventGoogle->when = array($when);
        $newEvent = $cal->insertEvent($eventGoogle);

        return $newEvent->getId();
    }
    
    
    public function addGoogleEvent($eventNameBDD , $idEventUrl ){
        
        $googleEvent = new \Ks\EventBundle\Entity\GoogleEvent();
        $googleEvent->setName($eventNameBDD);
        $googleEvent->setIdUrlEvent($idEventUrl);
        $this->_em->persist($googleEvent);
        $this->_em->flush();
        
        return $googleEvent;
    }
    
    public function associateGoogleEventToEvent($eventBDD , $googleEvent){
        $eventBDD->setIsGoogleEvent($googleEvent);
        $this->_em->persist($eventBDD);
        $this->_em->flush();
    }
    
     public function updateGoogleEvent($eventNameBDD , $idEventUrl , $googleEvent){
        
        $googleEvent->setName($eventNameBDD);
        $googleEvent->setIdUrlEvent($idEventUrl);
        $this->_em->persist($googleEvent);
        $this->_em->flush();
    }
    
    
    public function updateEvent($eventBDD, $nameGoogle, $contentGoogle , $startTime , $endTime , $lastModification , $user , $typeEvent , $googleEvent = null){
        $eventBDD->setName($nameGoogle);
        if(isset($contentGoogle)){
           $eventBDD->setContent($contentGoogle);  
        }
     
        $eventBDD->setStartDate($startTime);
        $eventBDD->setEndDate($endTime);
        
        $eventBDD->setLastModificationDate($lastModification);
        $eventBDD->setUser($user);
        
        if(isset($typeEvent)){
            $eventBDD->setTypeEvent($typeEvent);
        }
        $eventBDD->setIsGoogleEvent($googleEvent);
        $this->_em->persist($eventBDD);
        $this->_em->flush();
    }
    
    public function addEvent($nameGoogle, $contentGoogle , $startTime , $endTime , $lastModification , $user , $typeEvent , $googleEvent = null){
        $eventBDD = new \Ks\EventBundle\Entity\Event();
        $eventBDD->setName($nameGoogle);
        if(isset($contentGoogle)){
           $eventBDD->setContent($contentGoogle);  
        }
     
        $eventBDD->setStartDate($startTime);
        $eventBDD->setEndDate($endTime);
        $eventBDD->setLastModificationDate($lastModification);
        $eventBDD->setUser($user);
        
        if(isset($typeEvent)){
            $eventBDD->setTypeEvent($typeEvent);
        }
        $eventBDD->setIsGoogleEvent($googleEvent);
        $this->_em->persist($eventBDD);
        $this->_em->flush();
        
        return $eventBDD;
    }
    
    public function updateEventToAgenda($agendaHasEvents, $agenda, $eventBDD){
       $agendaHasEvents->setAgenda($agenda);
       $agendaHasEvents->setEvent($eventBDD);
       $this->_em->persist($agendaHasEvents);
       $this->_em->flush();
       
    }
    
    public function addEventToAgenda($agendaHasEvents){
       $this->_em->persist($agendaHasEvents);
       $this->_em->flush();
    }
    
    public function deleteGoogleAgendaEvent($user , $idGoogleEvent){
        
       $userHasServicesRep = $this->_em->getRepository('KsUserBundle:UserHasServices');
       $service            = $this->_em->getRepository('KsUserBundle:Service')->findOneByName("Google-Agenda");
       if (!is_object($service) ) {
           return new AccessDeniedException("Impossible de trouver de trouver le service Google-Agenda ");
       }
       
       $userHasServices    = $userHasServicesRep->findOneBy(array("service"=>$service->getId() , "user"=>$user->getId())); 
       if (!is_object($userHasServices) ) {
           return new AccessDeniedException("Impossible de trouver de trouver le service Google-Agenda pour l'utilisateur ".$user->getId()." ");
       }
       
       $token = $userHasServices->getToken();
       if(isset($token)){
            $client = \Zend_Gdata_AuthSub::getHttpClient($token);
            $cal = new \Zend_Gdata_Calendar($client);
            try {
                $eventGoogle = $cal->getCalendarEventEntry($idGoogleEvent);
                $eventGoogle->delete();
            }catch (\Zend_Gdata_App_Exception $e) {
                return "event google existe plus";
            }
       }
       
       return "event a ete supprime avec succes ";

    }
    
    public function syncGoogleToKeepin($cal , $lastSync , $user){
        
        $aLogEventGoogle = array();
        $agenda = $user->getAgenda();
      
        try {
            $listFeed= $cal->getCalendarListFeed();
        } catch (\Zend_Gdata_App_Exception $e) {
            echo "Error: " .
            $e->getMessage();
        }
        
        if(!isset($lastSync)){
            //un mois avant 
            $between =  new \Datetime('Now');
            $interval = 'P30D';
            $i = new \DateInterval( $interval );
            date_sub($between, $i);
            $between = $between->format("Y-m-d");
            $futureEventOnly = false;
        }else{
            $between = $lastSync->format("Y-m-d");
            $futureEventOnly = true;
        }
        
        $query = $cal->newEventQuery();
        $query->setUser('default');
        $query->setVisibility('private');
        $query->setProjection('full');
        $query->setOrderby('starttime');
        $query->setMaxResults(100);
        $query->setStartMin($between);
        $query->setFutureevents($futureEventOnly);
        
        
        // Retrieve the event list from the calendar server
        try {
            $eventFeed = $cal->getCalendarEventFeed($query);
        } catch (\Zend_Gdata_App_Exception $e) {
            echo "Error: " . $e->getMessage();
        }

        if(!empty($eventFeed)){

            foreach($eventFeed as $key => $event){

                $idEventUrl     = $event->id; 
                
                //var_dump($event);

                if(isset($event->when) && isset($event->when[0]) && isset($event->when[0]->startTime)){
                        $startTime = $event->when[0]->startTime;
                        $startTime = new \DateTime($startTime);
                        $dateStartGoogle = $startTime->format("Y-m-d H:i:s");
                }

                if(isset($event->when) && isset($event->when[0]) && isset($event->when[0]->endTime)){
                    $endTime = $event->when[0]->endTime;
                    $endTime = new \DateTime($endTime);
                    $dateEndGoogle = $endTime->format("Y-m-d H:i:s");
                }
                
                $nameGoogle     = $event->title;
                $contentGoogle  = $event->content;
                $googleEventBDD = $this->_em->getRepository('KsEventBundle:GoogleEvent')->findOneBy(array("id_url_event"=>$idEventUrl));
                
                if(isset($googleEventBDD)){
                    //var_dump($googleEventBDD->getId());

                    $eventBDD           = $this->_em->getRepository('KsEventBundle:Event')->findOneBy(array("isGoogleEvent"=>$googleEventBDD->getId()));
                    
                    if(isset($eventBDD)){
                        $dateStartBDD       = $eventBDD->getStartDate()->format("Y-m-d H:i:s");
                        $dateEndBDD         = $eventBDD->getEndDate()->format("Y-m-d H:i:s");
                        $nameBDD            = $eventBDD->getName();
                        $contentBDD         = $eventBDD->getContent();
                        $googleEvent        = $eventBDD->getIsGoogleEvent();

                        $dateGoogle                     = new \DateTime($event->updated);
                        $dateLastModificationsGoogle    = $dateGoogle->setTimeZone(new \DateTimeZone("Europe/Paris"));
                        $dateLastModificationsGoogle    = $dateLastModificationsGoogle->format("Y-m-d H:i:s");
                        $dateLastModificationsBDD       = $eventBDD->getLastModificationDate()->format("Y-m-d H:i:s");

                        //Détection ici des changements 
                        if($dateStartBDD != $dateStartGoogle || 
                            $dateEndBDD != $dateEndGoogle ||
                            $nameBDD != $nameGoogle ||
                            $contentBDD != $contentGoogle   
                        ){

                            //l'événement doit etre synchronisé si la date de modification de l'événement keepin est > date google 
                            if($dateLastModificationsBDD < $dateLastModificationsGoogle){

                                /*if(!isset($googleEvent)){
                                    $googleEvent = new \Ks\EventBundle\Entity\GoogleEvent();  
                                }*/

                                if(isset($nameGoogle) && isset($dateStartGoogle) && isset($dateEndGoogle) && isset($idEventUrl) ){

                                        $aLogEventGoogle[] = "  KS - Modification de ".$nameGoogle;

                                        $this->updateGoogleEvent($nameGoogle, $idEventUrl, $googleEvent);
                                        //$googleEvent = $this->addGoogleEvent($nameGoogle, $idEventUrl);

                                        $lastModification   = new \DateTime('now');
                                        $typeEvent          = $this->_em->getRepository('KsEventBundle:TypeEvent')->findOneBy(array("nom_type"=>"event_google"));
                                        $this->updateEvent($eventBDD, $nameGoogle, $contentGoogle , $startTime , $endTime , $lastModification , $user , $typeEvent , $googleEvent);
                                        $agendaHasEvents = $this->_em->getRepository('KsAgendaBundle:AgendaHasEvents')->findOneBy(array("agenda"=>$agenda->getId(),"event"=>$eventBDD->getId()));
                                        if (isset($agendaHasEvents) and !is_null($agendaHasEvents)) {
                                            $this->updateEventToAgenda($agendaHasEvents, $agenda, $eventBDD);
                                        }
                                        else {
                                            $aLogEventGoogle[] = "  => udateEventToAgenda impossible !";
                                        }
                                        
//                                        var_dump($agenda->getId());
//                                        var_dump($eventBDD->getId());
//                                        $tmpA = $agendaHasEvents->getAgenda()->getId();
//                                        $tmpB = $agendaHasEvents->getEvent()->getId();
//                                        var_dump($tmpA);
//                                        var_dump($tmpB);
                                }
                            }
                        }

                    }else{
                        $aLogEventGoogle[]  = " KS - Suppression cote Keepin - Recreation de l evenement ".$nameGoogle;
                        $lastModification   = new \DateTime('now');
                        $typeEvent          = $this->_em->getRepository('KsEventBundle:TypeEvent')->findOneBy(array("nom_type"=>"event_google"));
                        $this->addEvent($nameGoogle, $contentGoogle , $startTime , $endTime , $lastModification , $user , $typeEvent , $googleEventBDD );
                    }
                    
                    
                
                }else{

                    $aLogEventGoogle[] = "  KS - Ajout de ".$nameGoogle;
                    $googleEvent = $this->addGoogleEvent($nameGoogle, $idEventUrl);
                    $lastModification   = new \DateTime('now');
                    $typeEvent          = $this->_em->getRepository('KsEventBundle:TypeEvent')->findOneBy(array("nom_type"=>"event_google"));
                    $eventBDD           = $this->addEvent($nameGoogle, $contentGoogle , $startTime , $endTime , $lastModification , $user , $typeEvent , $googleEvent );
                    $agendaHasEvents = new \Ks\AgendaBundle\Entity\AgendaHasEvents($agenda, $eventBDD);
                    $this->addEventToAgenda($agendaHasEvents);
                }
            }
        }

        //FMO : traitement du cas suppression d'un event coté Google agenda ?

    
        
        return $aLogEventGoogle;
        
        
    }
    
    public function publishEventCreation(\Ks\EventBundle\Entity\Event $event)
    {
        $notificationTypeRep = $this->_em->getRepository( "KsNotificationBundle:NotificationType" );
        $notificationType_eventParticipation = $notificationTypeRep->findOneByName( "eventCreation" );
        
        if( is_object( $notificationType_eventParticipation ) ) {
            $abstractActivity = new \Ks\ActivityBundle\Entity\AbstractActivity( $notificationType_eventParticipation );
            
            $club = $event->getClub();
            $user = $event->getUser();
            
            if( is_object( $club )) {
                $abstractActivity->setClub( $club );
            } else if ( is_object( $user )) {
                $abstractActivity->setUser( $user );
            }
            
            $abstractActivity->setLinkedEvent( $event );

            $event->addAbstractActivity( $abstractActivity );

            $this->_em->persist( $abstractActivity );
            $this->_em->persist( $event );
            $this->_em->flush();

            return $abstractActivity;
        } 
        
        return null;
    }
    
    public function getEventFromActivity($activityId)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb ->select('a')
            ->from('KsEventBundle:Event', 'a')
            ->add('where', $qb->expr()->in("a.activitySession","?1"))
            ->setParameter(1, $activityId);
        
        $query = $qb->getQuery();

        return $query->getResult();
    }
    
    /**
     * Pour supprimer un user de la table ks_event_has_users
     */
    public function deleteEventHasUsers($eventId, $userId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'delete from ks_event_has_users where event_id = ? and user_id = ?',
            array($eventId, $userId)
        );
        $this->_em->flush();
    }
    
    /**
     * Pour supprimer les liens event/activity
     */
    public function updateOddLinks($activityId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'update ks_event set activitySession_id = null where activitySession_id = ?',
            array($activityId)
        );
        $this->_em->flush();
    }
    
    /**
     * Pour supprimer les liens event/activity
     */
    public function deleteOddLinks()
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'DELETE FROM ks_event WHERE user_id is not null AND activitySession_id is null AND typeEvent_id = 1',
            array()
        );
        $this->_em->flush();
    }
}