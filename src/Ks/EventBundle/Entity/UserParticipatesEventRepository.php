<?php

namespace Ks\EventBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserParticipatesEventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserParticipatesEventRepository extends EntityRepository
{
    /**
     * L'utilisateur indique qu'il participe à un événement
     */
    public function userParticipatesEvent(\Ks\EventBundle\Entity\Event $event, \Ks\UserBundle\Entity\User $user)
    {
        $userParticipatesEvent = new \Ks\EventBundle\Entity\UserParticipatesEvent( $event, $user);
        
        $this->_em->persist($userParticipatesEvent);
        $this->_em->flush();
        
        $event->addUserParticipatesEvent($userParticipatesEvent);
        $user->addUserParticipatesEvent($userParticipatesEvent);

        $this->_em->persist($user);
        $this->_em->persist($event);
        $this->_em->flush();
    }
    
    /**
     * L'utilisateur indique qu'il ne participe plus à un événement
     */
    public function userParticipatesAnymoreEvent(\Ks\EventBundle\Entity\Event $event, \Ks\UserBundle\Entity\User $user)
    {
//        $userParticipatesEventRep = $this->_em->getRepository("KsEventBundle:UserParticipatesEvent");
//        
//        $userParticipatesEvent = $userParticipatesEventRep->findOneBy(array(
//            "event" => $event->getId(),
//            "user"  => $user->getId()
//        ));
//        
//        if( is_object( $userParticipatesEvent )) {
//            $this->_em->remove( $userParticipatesEvent );
//            $this->_em->flush();
//            
//            return true;
//        }
//
//        return false;
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'delete from ks_user_participates_event where event_id = ? and user_id = ?',
            array($event->getId(), $user->getId())
        );
        $this->_em->flush();
    }
    
    /**
     *
     * @return boolean Si l'utilisateur participe déjà à l'article qui est un événement sportif
     */
    public function userAlreadyParticipatesEvent(\Ks\EventBundle\Entity\Event $event, \Ks\UserBundle\Entity\User $user)
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('count(upe)')
                ->from($this->getEntityName(), 'upe')
                ->where('upe.event = ?1')
                ->andWhere('upe.user = ?2')
                ->setParameter(1, $event->getId())
                ->setParameter(2, $user->getId());
        
        $query = $queryBuilder->getQuery();
        
        $result = (int)$query->getSingleScalarResult();

        return ($result == 1 ? true : false);
    }   
    
    public function publishEventParticipation(\Ks\EventBundle\Entity\Event $event, \Ks\UserBundle\Entity\User $user)
    {
        $notificationTypeRep = $this->_em->getRepository( "KsNotificationBundle:NotificationType" );
        $notificationType_eventParticipation = $notificationTypeRep->findOneByName( "eventParticipation" );
        
        if( is_object( $notificationType_eventParticipation ) ) {
            $abstractActivity = new \Ks\ActivityBundle\Entity\AbstractActivity( $notificationType_eventParticipation );
            $abstractActivity->setUser( $user );
            $abstractActivity->setLinkedEvent( $event );
            
            $club = $event->getClub();
            if( is_object($club)) {
                $abstractActivity->setClub($club);
            }

            //$abstractActivity->setConnectedActivity( $event );
            $event->addAbstractActivity( $abstractActivity );

            $this->_em->persist( $abstractActivity );
            $this->_em->persist( $event );
            $this->_em->flush();

            return $abstractActivity;
        } 
        
        return null;
    }
}