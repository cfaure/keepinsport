<?php

namespace Ks\TrophyBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserWinTrophiesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserWinTrophiesRepository extends EntityRepository
{
    /**
     *
     * @param \Ks\UserBundle\Entity\User $user
     * @return array les trophés s'un utilisateurs séparé par Déboqué oui/non
     */
    public function findLockAnUnlockTrophies(\Ks\UserBundle\Entity\User $user)
    {      
        $qb = $this->_em->createQueryBuilder();

        $qb->select('uwt')
            ->from('KsTrophyBundle:UserWinTrophies', 'uwt')
            ->where('uwt.user = ?1')
            ->setParameter(1, $user->getId())
            ->orderBy('a.issuedAt', 'desc');
               
        return $qb->getQuery()->getResult();
    }
    
    public function addTimesToUserTrophy(\Ks\TrophyBundle\Entity\UserWinTrophies $userTrophy, $timesToAdd ) {
        $timesSinceBegin    = $userTrophy->getTimesSinceBegin();
        $newTimesSinceBegin = $timesSinceBegin += $timesToAdd;
        $userTrophy->setTimesSinceBegin( $newTimesSinceBegin );
        $userTrophy->setModifiedAt( new \DateTime() );
        $this->_em->persist( $userTrophy );
        $this->_em->flush();
    }
    
    public function completeUnlock(\Ks\TrophyBundle\Entity\UserWinTrophies $userTrophy ) {
        $userTrophy->setUnlockedAt( new \DateTime() );
        $this->_em->persist( $userTrophy );
        $this->_em->flush();
    }
    
    public function unlockTrophy( $userId, $month, $year, $leagueLevelId ) {
        $dbh                = $this->_em->getConnection();
        
        $trophyHabBeenUnlocked = false;
        
        //On récupère l'id du trophée
        $sql =    "SELECT t.id "
                ." FROM `ks_trophy` t"
                ." WHERE `leagueLevel_id` = :leagueLevelId "
                ." AND `month` = :month "
                ." AND `year` = :year ";

        $stmt = $dbh->executeQuery($sql, array(
            'month'         => $month,
            'year'          => $year,
            'leagueLevelId' => $leagueLevelId
        ));
        
        $trophyId = $stmt->fetch(\PDO::FETCH_COLUMN);
        
        if( is_numeric($trophyId) ) {
            //On enregistre les nouvelles données
            $sql =   "INSERT IGNORE INTO ks_user_win_trophies (`trophy_id`, `user_id`, `unlockedAt`, `modifiedAt`, `timesSinceBegin`) "
                    ." VALUES (:trophyId, :userId, :unlockedAt, :modifiedAt, :timesSinceBegin ) ";
                    //." WHERE NOT EXISTS (SELECT * FROM ks_user_win_trophies uwt2 WHERE `uwt2.trophy_id` = :trophyId AND `uwt2.user_id` = :userId)";

            $now = new \DateTime();
            $dbh->executeQuery($sql, array(
                'trophyId'          => $trophyId,
                'userId'            => $userId,
                'unlockedAt'        => $now->format("Y-m-d H:i:s"),
                "modifiedAt"        => $now->format("Y-m-d H:i:s"),
                "timesSinceBegin"   => 1,
            ));
            
            $trophyHabBeenUnlocked = true;
        }  
        
        return $trophyHabBeenUnlocked;
    }
}