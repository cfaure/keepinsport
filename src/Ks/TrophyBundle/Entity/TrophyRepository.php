<?php

namespace Ks\TrophyBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TrophyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TrophyRepository extends EntityRepository
{
    /**
     *
     * @param \Ks\UserBundle\Entity\User $user
     * @return array les trophés s'un utilisateurs séparé par Déboqué oui/non
     */
    public function findLockAnUnlockTrophies(\Ks\UserBundle\Entity\User $user)
    {      
        $qb = $this->_em->createQueryBuilder();

        $qb->select('t', 'uwhw')
            ->from('KsTrophyBundle:Trophy', 't')
            ->leftJoin('t.usersWhoHaveWon', 'uwhw')
            ->leftJoin('uwhw.user', 'u');
            //->where('u.id = ?1')
            //->setParameter(1, $user->getId());
            //->orderBy('uwhw.unlockedAt', 'desc');
        
        /*$qb->select('t, uwhw.unlockedAt AS isUnlocked')
            ->from('KsTrophyBundle:Trophy', 't')
            ->leftJoin('t.usersWhoHaveWon', 'uwhw')
            ->leftJoin('uwhw.user', 'u')
            ->where('u.id = ?1')
            ->setParameter(1, $user->getId());
        
        $query = $this->_em->createQuery(
            "select count(u.id) from KsUserBundle:User u"
            ." left join u.myFriends f"
            ." where ((u.id = ?0 and f.friend = ?1) or (u.id = ?1 and f.friend = ?0))"
            ." and f.pending_friend_request = 0"
        );*/
        
        /*$query = $this->_em->createQuery(
            "select t.label, t.categorie, t.pointsNumber, u.id"
            ."from KsTrophyBundle:Trophy t"
            ." left join t.usersWhoHaveWon uwhw"
            ." left join uwhw.user u"
        );*/
        //$query->setParameter(1, $user->getId());
            //->orderBy('uwhw.unlockedAt', 'desc');*/
            //
            $query = $this->_em->createQuery(
                "SELECT t.id as t1," 
                ."(   SELECT uwt"
                /*."        CASE t1 "
                ."            WHEN ks_user_win_trophies.trophy_id THEN true"
                ."            ELSE FALSE "
                ."        END "*/
                ."     FROM KsTrophyBundle:UserWinTrophies uwt "
                ."    WHERE uwt.user = ?1"
                ."    AND t1 = uwt.trophy"
                .") as isUnlocked "
                ."FROM KsTrophyBundle:Trophy t");
            
            $query->setParameter(1, $user->getId());
        return $query->getResult();
        var_dump($qb->getQuery()->getSQL());       
        return $qb->getQuery()->getResult();
        
        /*SELECT ks_trophy.label, case ks_user.id WHEN 20 THEN true ELSE FALSE END
FROM  ks_user
LEFT JOIN ks_user_win_trophies  ON  ks_user_win_trophies.user_id = ks_user.id
RIGHT JOIN ks_trophy ON ks_trophy.id = ks_user_win_trophies.trophy_id */
        
        /*SELECT ks_trophy.label, case ks_user.id WHEN 20 THEN true ELSE FALSE END
FROM ks_trophy 
LEFT JOIN ks_user_win_trophies ON ks_trophy.id = ks_user_win_trophies.trophy_id 
LEFT JOIN ks_user  ON  ks_user_win_trophies.user_id = ks_user.id
         * 
         * SELECT ks_trophy.id as t1, 
         *  (   SELECT 
         *          CASE t1 
         *              WHEN ks_user_win_trophies.trophy_id THEN true
         *              ELSE FALSE 
         *          END 
         *      FROM ks_user_win_trophies 
         *      WHERE ks_user_win_trophies.user_id = 20
         *  ) as isUnlocked
            FROM  ks_trophy
*/

    }
    

    
    public function unlockNewTrophy(\Ks\TrophyBundle\Entity\Trophy $trophy, \Ks\UserBundle\Entity\User $user ) {
        $userWinTrophy = new \Ks\TrophyBundle\Entity\UserWinTrophies($trophy, $user);
        $userWinTrophy->setTimesSinceBegin( 1 );
        $userWinTrophy->setUnlockedAt( new \DateTime() );
        $this->_em->persist($userWinTrophy);
        $this->_em->flush();
    }
    
    public function startUnlock(\Ks\TrophyBundle\Entity\Trophy $trophy, \Ks\UserBundle\Entity\User $user, $timesToAdd = 1 ) {
        $userWinTrophy = new \Ks\TrophyBundle\Entity\UserWinTrophies($trophy, $user);
        $userWinTrophy->setTimesSinceBegin( $timesToAdd );
        $this->_em->persist($userWinTrophy);
        $this->_em->flush();
        
        return $userWinTrophy;
    }
    
    public function trophyIsUnlocked(\Ks\TrophyBundle\Entity\Trophy $trophy, \Ks\UserBundle\Entity\User $user ) {
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('count(uwt)')
                ->from('KsTrophyBundle:UserWinTrophies', 'uwt')
                ->where('uwt.user = ?1')
                ->andWhere('uwt.trophy = ?2')
                ->andWhere('uwt.unlockedAt is not NULL')
                ->setParameter(2, $trophy->getId())
                ->setParameter(1, $user->getId());
        
        $query = $queryBuilder->getQuery();
        return (boolean)$query->getSingleScalarResult();
    }
    
    public function trophyIsBeingUnlocked(\Ks\TrophyBundle\Entity\Trophy $trophy, \Ks\UserBundle\Entity\User $user ) {
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('count(uwt)')
                ->from('KsTrophyBundle:UserWinTrophies', 'uwt')
                ->where('uwt.user = ?1')
                ->andWhere('uwt.trophy = ?2')
                ->andWhere('uwt.unlockedAt is NULL')
                ->setParameter(2, $trophy->getId())
                ->setParameter(1, $user->getId());
        
        $query = $queryBuilder->getQuery();
        return (boolean)$query->getSingleScalarResult();
    }
    
    public function createEndSeasonTrophy( $month, $year, $leagueLevelId ) {
        $dbh                = $this->_em->getConnection();
        $leagueLevelRep     = $this->_em->getRepository('KsLeagueBundle:LeagueLevel'); 
        $leagueCatRep       = $this->_em->getRepository('KsLeagueBundle:LeagueCategory');   
        $trophyCategoryRep  = $this->_em->getRepository('KsTrophyBundle:TrophyCategory');
        
        $trophyCategoryId   = $trophyCategoryRep->findTrophyCategoryIdByCode( "league" );
        $leagueCategoryCode = $leagueCatRep->findLeagueCategoryCodeByLeagueLevelId( $leagueLevelId );
        $starsNumber        = $leagueLevelRep->findStarsNumberByLeagueLevelId( $leagueLevelId );
        $code = $leagueCategoryCode . "_" . $starsNumber;
        $label = $leagueCategoryCode . "_" . $starsNumber;
        
        //On teste si le trophée existe
        $sql =    "SELECT t.id "
                ." FROM `ks_trophy` t"
                ." WHERE `leagueLevel_id` = :leagueLevelId "
                ." AND `month` = :month "
                ." AND `year` = :year ";

        $stmt = $dbh->executeQuery($sql, array(
            'month'         => $month,
            'year'          => $year,
            'leagueLevelId' => $leagueLevelId
        ));
        
        $trophyId = $stmt->fetch(\PDO::FETCH_COLUMN);
        
        //On efface l'ancienne ligne si elle existe
        /*$sql =    "DELETE "
                ." FROM `ks_trophy` "
                ." WHERE `leagueLevel_id` = :leagueLevelId "
                ." AND `month` = :month "
                ." AND `year` = :year ";

        $dbh->executeQuery($sql, array(
            'month'         => $month,
            'year'          => $year,
            'leagueLevelId' => $leagueLevelId
        ));*/
        
        //Si le trophée n'existe pas, on le cré
        if( !is_numeric($trophyId) ) {
        
            //On enregistre les nouvelles données
            $sql =   "INSERT INTO ks_trophy (`category_id`, `code`, `label`, `inSeveralTimes`, `timesToComplete`, `month`, `year`, `pointsNumber`, `leagueLevel_id`) "
                    ." VALUES (:categoryId, :trophyCode, :trophyLabel, :inSeveralTimes, :timesToComplete, :month, :year, :points, :leagueLevelId ) ";

            $dbh->executeQuery($sql, array(
                'categoryId'        => $trophyCategoryId,
                'trophyCode'        => $code,
                'trophyLabel'       => $label,
                "inSeveralTimes"    => 0,
                "timesToComplete"   => 1,
                'month'             => $month,
                'year'              => $year,
                'points'            => 0,
                'leagueLevelId'     => $leagueLevelId
            ));
        }
    }
}