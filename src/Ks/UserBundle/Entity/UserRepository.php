<?php

namespace Ks\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    const KEEPINSPORT_USER_ID = 1; // FIXME: A BANNIR:!!!! il faut modifier le fonctionnement ou supprimer le user "keepinsport"
    protected $friendIds = array();
    protected $usersIds = array();
    
    public function findUsers( $params = array(), $translator = null ) {
        $dbh            = $this->_em->getConnection();
        $activityRep    = $this->_em->getRepository('KsActivityBundle:Activity');
        
        $now = new \DateTime();
        
        $vars       = array();  
        $sqlParts   = array(
            'select' => 'SELECT'
                .' u.id, u.username, ud.image_name as imageName, ud.firstName, ud.lastName, ud.HRMax, ud.HRRest, ud.VMASpeed, gf.username as godFather_username, '
                .' ud.town, ud.country_code, sexe.code as sexe_code,'
                ." uhp.pack_id, (TIMESTAMPDIFF(DAY, '" . $now->format('Y-m-d') ."', uhp.startDate) <= 0) * IFNULL(TIMESTAMPDIFF(DAY, '" . $now->format('Y-m-d') ."', uhp.endDate) >= 0, 1) as isActive, "
                ." IFNULL(umc.super_admin, 0) as isCoach, "
                .' ll.id as leagueLevelId, ll.rank as leagueLevelRank, ll.label as leagueLevelLabel, ll.starNumber as leagueLevelStarNumber,'
                .' ll_category.id as leagueCategoryId, ll_category.label as leagueCategoryLabel,'
                .' GROUP_CONCAT(DISTINCT sport.codeSport SEPARATOR "|") as sports,'
                .' GROUP_CONCAT(DISTINCT club.name SEPARATOR "|") as clubs',

            'from'  => 'FROM ks_user u'
                .' LEFT JOIN ks_user_detail ud on (u.userDetail_id = ud.id)'
                .' LEFT JOIN ks_user_has_pack uhp on (u.id = uhp.user_id)'
                .' LEFT JOIN ks_league_level ll on (ll.id = u.leagueLevel_id)'
                .' LEFT JOIN ks_league_category ll_category on (ll.category_id = ll_category.id)'
                .' LEFT JOIN ks_user_detail_has_sport uds on (ud.id = uds.userdetail_id)'
                .' LEFT JOIN ks_sport sport on (uds.sport_id = sport.id)'
                .' LEFT JOIN ks_sport_type sportType on (sport.sportType_id = sportType.id)'
                .' LEFT JOIN ks_user_detail_sexe sexe on (ud.sexe_id = sexe.id)'
                .' LEFT JOIN ks_club_has_users chu on (chu.user_id = u.id)'
                .' LEFT JOIN ks_club club on (chu.club_id = club.id)'
                .' LEFT JOIN ks_user_manage_clubs umc on (umc.user_id = u.id)'
                .' LEFT JOIN ks_user gf on (gf.id = u.godFather_id)'
                ,
            'where' => "WHERE 1",
            'group' => 'GROUP BY u.id',
            'order' => 'ORDER BY u.username',
            'limit' => ''
        );
        
        if( isset( $params['searchTerm'] ) && $params['searchTerm'] != '' ) {
            $sqlParts["where"] .= ' AND (u.username LIKE :searchTerm OR ud.firstName LIKE :searchTerm OR ud.lastName LIKE :searchTerm)';
                $vars['searchTerm'] = "%" . $params['searchTerm'] . "%";
        }  
        
        if( isset( $params['userId'] ) && $params['userId'] != '' ) {
            $sqlParts["where"] .= ' AND u.id = :userId';
            $vars['userId'] = $params['userId'];
        }
        
        if( isset( $params['username'] ) && $params['username'] != '' ) {
            $sqlParts["where"] .= ' AND u.username = :username';
            $vars['username'] = $params['username'];
        }
        if( isset( $params['usersIds'] ) && !empty( $params['usersIds'] ) ) {
            $sqlParts["where"] .= ' AND u.id in ('.implode(',', $params['usersIds']) . ')';
        } 
        
        if( isset( $params['withUsersKsTeam'] ) && !$params['withUsersKsTeam'] ) {
            $sqlParts["where"] .= ' AND u.id not in (1,2,3,4,5,6,7,744)';
        } 
        elseif( isset( $params['withKsUser'] ) && !$params['withKsUser'] ) {
            $sqlParts["where"] .= ' AND u.id not in (1)';
        } 
        
        //On sélectionne seulements les sportifs étant parrains
        if( isset( $params['godFathersOnly'] ) && $params['godFathersOnly'] ) {
            $sqlParts["from"] .= ' INNER JOIN ks_user gs on (gs.godFather_id = u.id)' ;

        }
        
        if( isset( $params['leagueCategoryId'] ) && $params['leagueCategoryId'] != '' ) {
            $sqlParts["where"] .= ' AND ll_category.id = :leagueCategoryId';
            $vars['leagueCategoryId'] = $params['leagueCategoryId'];
        } 
        
        if( isset( $params['leagueCategoryLabel'] ) && $params['leagueCategoryLabel'] != '' ) {
            $sqlParts["where"] .= ' AND ll_category.label = :leagueCategoryLabel';
            $vars['leagueCategoryLabel'] = $params['leagueCategoryLabel'];
        } 
        
        if( isset( $params['leagueLevelLabel'] ) && $params['leagueLevelLabel'] != '' ) {
            $sqlParts["where"] .= ' AND ll.label = :leagueLevelLabel';
            $vars['leagueLevelLabel'] = $params['leagueLevelLabel'];
        } 
        
        if( isset( $params['leagues'] ) && !empty($params['leagues']) && count( $params['leagues'] ) > 0  ) {
            $sqlParts["where"] .= ' AND ll_category.label in (\''.implode('\',\'', $params['leagues']) . '\')';
        } 
        
        if( isset( $params['sexes'] ) && !empty($params['sexes']) && count( $params['sexes'] ) > 0  ) {
            $sqlParts["where"] .= ' AND sexe.code in (\''.implode('\',\'', $params['sexes']) . '\')';
        } 
        
        if( isset( $params['sportId'] ) && $params['sportId'] != '' ) {
            $sqlParts["where"] .= ' AND sport.id in( :sportId )';
            $vars['sportId'] = $params['sportId'];
        }
        
        if( isset( $params['latitude'] ) && $params['latitude'] != null && isset( $params['longitude'] ) && $params['longitude'] != '') {
                $sqlParts["where"] .= ' AND (ROUND(6366 * acos(cos(radians(ud.latitude)) * cos(radians('. $params['latitude']. ')) * cos(radians('. $params['longitude'].' ) - radians(ud.longitude)) + sin(radians(ud.latitude)) * sin(radians('. $params['latitude']. '))))) < 100';
        }
        else {
            if ( isset( $params['countryCode'] ) && $params['countryCode'] != '' ) {
                if ($params['countryCode'] == 'RE') {
                    $sqlParts["where"] .= ' AND ud.country_code = :countryCode';
                    $vars['countryCode'] = $params['countryCode'];
                }
                else if( isset( $params['countryArea'] ) && $params['countryArea'] != '' ) {
                    $sqlParts["where"] .= ' AND ud.country_area = :countryArea';
                    $vars['countryArea'] = $params['countryArea'];
                }
    //            else if( isset( $params['town'] ) && $params['town'] != '' ) {
    //                $sqlParts["where"] .= ' AND ud.town = :town';
    //                $vars['town'] = $params['town'];
    //            }
            }
        }
        
        if( isset( $params['userWithEmail'] ) && $params['userWithEmail'] ) {
            $sqlParts["where"] .= ' AND u.email is not null';
        }
        
        if( isset( $params['userWithPhone'] ) && $params['userWithPhone'] ) {
            $sqlParts["where"] .= ' AND u.email is not null';
        }
        
        if( isset( $params['delay'] ) && $params['delay'] <0 && isset($params['shopId'])) {
            //FMO :  si delay <0 on va chercher les anciens gagnants pour le magasin donné, si -1 est donné c'est qu'on cherche tous les gagnants quelque soit le magasin
            if (isset($params['activitiesEndOn'])) {
                $sqlParts["where"] .= ' AND u.id in (select user_id from ks_user_has_gifts uhg where SUBSTRING(uhg.winAt, 1, 10) = :activitiesEndOn AND (uhg.shop_id = :shopId OR :shopId = -1 ))';
                $vars['activitiesEndOn'] = $params['activitiesEndOn'];
            }
            else {
                //FMO : pour l'affichage de la page des magasins avec liste exhaustive des gagnants
                $sqlParts["where"] .= ' AND u.id in (select user_id from ks_user_has_gifts uhg where uhg.shop_id = :shopId OR :shopId = -1 )';
            }
            $vars['shopId'] = $params['shopId'];
        }
        
        $withTest = false;
        if( isset( $params['test'] ) && $params['test'] ) {
            var_dump(implode(' ', $sqlParts));
            var_dump($vars);
            $withTest = true;
        }
        
        $stmt = $dbh->executeQuery(implode(' ', $sqlParts), $vars);
        
        $withStartOn = isset( $params['activitiesStartOn'] ) ? true : false;
        $withEndOn = isset( $params['activitiesEndOn'] ) ? true : false;
        $withSport = isset( $params['sports'] ) ? true : false;
        $withCountry = isset( $params['countryCode'] ) ? true : false;
        $withOnlyGodSonsFromThisMonth = isset( $params['withOnlyGodSonsFromThisMonth'] ) ? true : false;
        
        $userPointsStmt             = $activityRep->getPreparedStatementForUserPoints(true, $withEndOn, false, $withSport, $withCountry, $withTest);
        $userActivitiesNumberStmt   = $activityRep->getPreparedStatementForUserActivitiesNumber(true, $withEndOn);
        $userGodsonsStmt            = $this->getPreparedStatementForUserGodsons($withOnlyGodSonsFromThisMonth);
        $userLittlesGodsonsStmt     = $this->getPreparedStatementForUserLittlesGodsons($withOnlyGodSonsFromThisMonth);
        if( isset( $params['delay'] ) && $params['delay'] <0 ) {
            //FMO :  si delay <0 on va chercher les anciens gagnants
            $userGiftsStmt          = $this->getPreparedStatementForUseHasGifts();
        }
        
        $users = array();
        while( $user = $stmt->fetch(\PDO::FETCH_ASSOC) ) {
            $addUser = true;
            //var_dump($user);
            
            $sports = explode("|", $user["sports"]);
            if ( $translator != null ) {
                foreach($sports as $key => $value) {
                    $sports[$key] = $translator->trans( "sports." . $value );
                }  
            } 
            
            if( isset( $params['searchTerms'] ) && !empty($params['searchTerms']) && is_array($params['searchTerms']) && count( $params['searchTerms'] ) > 0 ) {
                
                //var_dump($params['searchTerms']);
                $termMatchesFound = array();
                foreach( $params['searchTerms'] as $termNum => $term ) {
                    $termMatchesFound[$termNum] = false;
                    
                    //Recherche dans le pseudo
                    if( ! $termMatchesFound[$termNum] ) {
                        $pos = strpos(strtolower($user["username"]), $term);
                        if ( $pos !== false ) {
                            $termMatchesFound[$termNum] = true;
                        }
                    }

                    //Recherche dans le prénom
                    if( ! $termMatchesFound[$termNum] ) {
                        $pos = strpos(strtolower($user["firstName"]), $term);
                        if ( $pos !== false ) {
                            $termMatchesFound[$termNum] = true;
                        }
                    }

                    //Recherche dans le nom
                    if( ! $termMatchesFound[$termNum] ) {
                        $pos = strpos(strtolower($user["lastName"]), $term);
                        if ( $pos !== false ) {
                            $termMatchesFound[$termNum] = true;
                        }
                    }
                    
                    //Recherche dans la ville
                    if( ! $termMatchesFound[$termNum] ) {
                        $pos = strpos(strtolower($user["town"]), $term);
                        if ( $pos !== false ) {
                            $termMatchesFound[$termNum] = true;
                        }
                    }
                    
                    if( ! $termMatchesFound[$termNum] ) {
                        foreach( $sports as $sport ) {                       
                            //Recherche dans le sport
                            if( ! $termMatchesFound[$termNum] ) {
                                $pos = strpos(strtolower($sport), $term);
                                if ( $pos !== false ) {
                                    $termMatchesFound[$termNum] = true;
                                }
                            }
                        }
                    }
                }
                
                $addUser = true;
                //Si on a trouvé tous les termes, on ajoute l'utilisateur
                foreach( $params['searchTerms'] as $termNum => $term ) {
                    //Si ce terme n'a pas été trouvé, on arrête
                    if( !$termMatchesFound[$termNum] ) {
                        $addUser = false;
                        break;
                    }
                }
            }  
             
            $user["sports"] = $sports;

            
            if( isset( $params['withPoints'] ) && $params['withPoints'] ) {
                
                $userPointsParams = array(
                    'userId'    => $user["id"],
                );
                
                if( isset( $params['activitiesStartOn'] ) ) {
                    $userPointsParams['startOn'] = $params['activitiesStartOn'];
                } else {
                    $userPointsParams['startOn'] = date('Y-m-01');
                }
                
                if( isset( $params['activitiesEndOn'] ) ) {
                    $userPointsParams['endOn'] = $params['activitiesEndOn'];
                }
                
                if( isset( $params['countryCode'] ) && $params['countryCode'] != '' ) {
                    $userPointsParams['countryCode'] = $params['countryCode'];
                }
                
                $points =0;
                
                if( isset( $params['sports'] ) && $params['sports'] != '' ) {
                    if (count($params['sports']) == 1) {
                        //FIXME : FMO comprend pas pourquoi le foreach ne passe pas si 1 seul élément...testé unset($sport) mais sans succès :(
                        if (isset($params['shopId']) && $params['shopId'] == 16) { //FMO comprend pas non plus pourquoi -1 comme sport fait planter le getId() dessus :(
                            $userPointsParams['sportId'] = -1;
                        }
                        else {
                            $userPointsParams['sportId'] = $params['sports']->getId();
                        }
                        if( isset( $params['test'] ) && $params['test'] ) { 
                            //var_dump("userPointsParams=".$userPointsParams['startOn']."-".$userPointsParams['endOn']."-".$userPointsParams['sportId']."-".$userPointsParams['countryCode']);
                            var_dump("sportId=");
                            var_dump($userPointsParams['sportId']);
                        }
                        $userPointsStmt->execute($userPointsParams);
                        $points += $userPointsStmt->fetchColumn();
                    }
                    else {
                        foreach ($params['sports'] as $sport) {
                            $userPointsParams['sportId'] = $sport->getId();
                            if( isset( $params['test'] ) && $params['test'] ) { 
                                //var_dump("userPointsParams=".$userPointsParams['startOn']."-".$userPointsParams['endOn']."-".$userPointsParams['sportId']."-".$userPointsParams['countryCode']);
                                var_dump("sportId=");
                                var_dump($userPointsParams['sportId']);
                            }
                            $userPointsStmt->execute($userPointsParams);
                            $points += $userPointsStmt->fetchColumn(); 
                        }
                    }
                }
                else {
                    $userPointsStmt->execute($userPointsParams);
                    $points += $userPointsStmt->fetchColumn();
                }
                
                if( isset( $params['test'] ) && $params['test'] ) {
                    var_dump("id/points:".$user["id"] . "/".$points);
                }
               
                $user["points"] = $points > 0 ? $points : 0;
                $user["godsonsPoints"] = 0;
                $user["littlesGodsonsPoints"] = 0;
                $user["godFatherPoints"] = 0;
            }
            
            if( isset( $params['delay'] ) && $params['delay'] <0 ) {
                $userHasGiftsParams = array(
                    'userId'    => $user["id"],
                    'shopId'    => $params['shopId'],
                    'winAt'     => isset($params['activitiesEndOn']) ? $params['activitiesEndOn'] : -1
                );
                $userGiftsStmt->execute($userHasGiftsParams);
                $result = $userGiftsStmt->fetchAll();
                if (isset($result) && $result != null) {
                    $user["gift"]   = $result[0]['gift'];
                    $user["month"] = $result[0]['month'];
                    $user["year"] = $result[0]['year'];
                    $user["sentence"] = $result[0]['sentence'];
                    $user["shop"]['id'] = $result[0]['shopId'];
                    $user["shop"]['avatar'] = $result[0]['shopAvatar'];
                    $user["shop"]['name'] = $result[0]['shopName'];
                    $user["shop"]['url_site_web'] = '';
                }
            }
            
            if( isset( $params['withFriendsNumber'] ) && $params['withFriendsNumber'] ) {
                $friendsIds = $this->getFriendIds( $user["id"] );
                
                $user["friendsNumber"] = count( $friendsIds ); 
            }
            
            if( isset( $params['withActivitiesNumber'] ) && $params['withActivitiesNumber'] ) {
                
                $userActivitiesNumberParams = array(
                    'userId'    => $user["id"],
                );
                
                if( isset( $params['activitiesStartOn'] ) ) {
                    $userActivitiesNumberParams['startOn'] = $params['activitiesStartOn'];
                } else {
                    $userActivitiesNumberParams['startOn'] = date('Y-m-01');
                }
                
                if( isset( $params['activitiesEndOn'] ) ) {
                    $userActivitiesNumberParams['endOn'] = $params['activitiesEndOn'];
                }
                
                $userActivitiesNumberStmt->execute($userActivitiesNumberParams);
                $user["activitiesNumber"] = $userActivitiesNumberStmt->fetch(\PDO::FETCH_COLUMN); 
            }
            
            if( isset( $params['withGodsonsPoints'] ) && $params['withGodsonsPoints'] ) {
                
                $userPointsParams = array();
                
                if( isset( $params['countryCode'] ) && $params['countryCode'] != '' ) {
                    $userPointsParams['countryCode'] = $params['countryCode'];
                }
                
                if( isset( $params['activitiesStartOn'] ) ) {
                    $userPointsParams['startOn'] = $params['activitiesStartOn'];
                } else {
                    $userPointsParams['startOn'] = date('Y-m-01');
                }
                
                if( isset( $params['activitiesEndOn'] ) ) {
                    $userPointsParams['endOn'] = $params['activitiesEndOn'];
                }
                
                //Filleuls
                $userGodsonsStmt->execute(array('userId'    => $user["id"]));
                
                $result = $userGodsonsStmt->fetchAll(\PDO::FETCH_ASSOC);  
                
                $godsons = is_array($result) ? $result : array();
                
                $user["godsonsNumber"] = count( $godsons );
                
                foreach( $godsons as $godson ) {
                    unset($userPointsParams);
                    $userPointsParams = array();
                    $points = 0;
                    
                    $userPointsParams["userId"] = $godson["id"];
                    
                    if( isset( $params['activitiesStartOn'] ) ) {
                        $userPointsParams['startOn'] = $params['activitiesStartOn'];
                    } else {
                        $userPointsParams['startOn'] = date('Y-m-01');
                    }

                    if( isset( $params['activitiesEndOn'] ) ) {
                        $userPointsParams['endOn'] = $params['activitiesEndOn'];
                    }
                    
                    if( isset( $params['sports'] ) && $params['sports'] != '' ) {
                        if (count($params['sports']) == 1) {
                            //FIXME : FMO comprend pas pourquoi le foreach ne passe pas si 1 seul élément...testé unset($sport) mais sans succès :(
                            if (isset($params['shopId']) && $params['shopId'] == 16) { //FMO comprend pas non plus pourquoi -1 comme sport fait planter le getId() dessus :(
                                $userPointsParams['sportId'] = -1;
                            }
                            else {
                                $userPointsParams['sportId'] = $params['sports']->getId();
                            }
                            if( isset( $params['test'] ) && $params['test'] ) { 
                                //var_dump("userPointsParams=".$userPointsParams['startOn']."-".$userPointsParams['endOn']."-".$userPointsParams['sportId']."-".$userPointsParams['countryCode']);
                                var_dump("sportId=");
                                var_dump($userPointsParams['sportId']);
                            }
                            $userPointsStmt->execute($userPointsParams);
                            $points += $userPointsStmt->fetchColumn();
                        }
                        else {
                            foreach ($params['sports'] as $sport) {
                                $userPointsParams['sportId'] = $sport->getId();
                                if( isset( $params['test'] ) && $params['test'] ) { 
                                    //var_dump("userPointsParams=".$userPointsParams['startOn']."-".$userPointsParams['endOn']."-".$userPointsParams['sportId']."-".$userPointsParams['countryCode']);
                                    var_dump("sportId=");
                                    var_dump($userPointsParams['sportId']);
                                }
                                $userPointsStmt->execute($userPointsParams);
                                $points += $userPointsStmt->fetchColumn(); 
                            }
                        }
                    }
                    else {
                        $userPointsStmt->execute($userPointsParams);
                        $points += $userPointsStmt->fetchColumn();
                    }
                            
                    $user["godsonsPoints"] += round($points * 0.10, 0);
                }
                
                $user["points"] += $user["godsonsPoints"];
                $user["godFatherPoints"] += $user["godsonsPoints"];
                
                //Petits filleuils
                $userLittlesGodsonsStmt->execute(array('userId'    => $user["id"]));
                
                $result = $userLittlesGodsonsStmt->fetchAll(\PDO::FETCH_ASSOC);  
                
                $littlesGodsons = is_array($result) ? $result : array();
                
                $user["littleGodsonsNumber"] = count( $littlesGodsons );
                
                foreach( $littlesGodsons as $littleGodson ) {
                    $userPointsParams["userId"] = $littleGodson["id"];
                    if( isset( $params['sports'] ) && $params['sports'] != '' ) {
                        if (count($params['sports']) == 1) {
                            //FIXME : FMO comprend pas pourquoi le foreach ne passe pas si 1 seul élément...testé unset($sport) mais sans succès :(
                            if (isset($params['shopId']) && $params['shopId'] == 16) { //FMO comprend pas non plus pourquoi -1 comme sport fait planter le getId() dessus :(
                                $userPointsParams['sportId'] = -1;
                            }
                            else {
                                $userPointsParams['sportId'] = $params['sports']->getId();
                            }
                            if( isset( $params['test'] ) && $params['test'] ) { 
                                //var_dump("userPointsParams=".$userPointsParams['startOn']."-".$userPointsParams['endOn']."-".$userPointsParams['sportId']."-".$userPointsParams['countryCode']);
                                var_dump("sportId=");
                                var_dump($userPointsParams['sportId']);
                            }
                            $userPointsStmt->execute($userPointsParams);
                            $points += $userPointsStmt->fetchColumn();
                        }
                        else {
                            foreach ($params['sports'] as $sport) {
                                $userPointsParams['sportId'] = $sport->getId();
                                if( isset( $params['test'] ) && $params['test'] ) { 
                                    //var_dump("userPointsParams=".$userPointsParams['startOn']."-".$userPointsParams['endOn']."-".$userPointsParams['sportId']."-".$userPointsParams['countryCode']);
                                    var_dump("sportId=");
                                    var_dump($userPointsParams['sportId']);
                                }
                                $userPointsStmt->execute($userPointsParams);
                                $points += $userPointsStmt->fetchColumn(); 
                            }
                        }
                    }
                    else {
                        $userPointsStmt->execute($userPointsParams);
                        $points += $userPointsStmt->fetchColumn();
                    }
                    
                    $user["littlesGodsonsPoints"] += round($points * 0.01, 0);
                }
                
                $user["points"] += $user["littlesGodsonsPoints"];
                $user["godFatherPoints"] += $user["littlesGodsonsPoints"];
            }
            
             
             if( isset( $params['usersWith0points'] ) ) {
                 if( $params['usersWith0points'] ) {
                     //j'ajoute que si l'utilisateur a 0 points
                    if( $params['usersWith0PointsOnly'] && $params['usersWith0PointsOnly'] ) {
                        if( isset( $user["points"] ) && $user["points"] == 0 ) {
                            if( $addUser )
                                $users[] = $user;
                        }
                    } 
                    //J'ajoute dans tous les cas
                    else {
                        if( $addUser )
                        $users[] = $user; 
                    }
                        
                 } else {
                     //j'ajoute que si les points sont supérieurs à 0
                    if( isset( $user["points"] ) && $user["points"] > 0 ) {
                        if( $addUser )
                          $users[] = $user;
                    }
                 }
             } 
             //Si le paramètre "usersWith0points" n'existe pas : cas général
             else {
                 if( $addUser )
                    $users[] = $user;
             }
        }
        
        if( isset( $params['searchOffset'] ) && is_int($params['searchOffset']) && isset( $params['searchLimit'] ) && is_int($params['searchLimit']) ) {
            $usersFiltered = array_slice( $users, $params['searchOffset'], $params['searchLimit']);
            return array(
                "users"                 => $usersFiltered,
                "usersNumberNotLoaded"  => count( $users ) - count( $usersFiltered ) - $params['searchOffset']
           );
        }                                                                    
        else return $users;
        
    }
    
    public function findOneUser( $params = array(), $translator = null ) {
        $users = $this->findUsers( $params, $translator );
        
        if( count( $users) > 0 ) return $users[0];
        else return null;   
    }
    
    /**
     * Est-ce que user friend sont amis ?
     *
     * @param type $userId
     * @param type $friendId
     * @return boolean 
     */
    public function areFriends($userId, $friendId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select count(user_id)'
            .' from ks_user_has_friends'
            .' where ((user_id = :userId and friend_id = :friendId) or (user_id = :friendId and friend_id = :userId))'
            .' and pending_friend_request = 0',
            array(
                'userId'    => $userId,
                'friendId'  => $friendId
            )
        );
        
        return $stmt->fetchColumn() > 0 ? true : false;
    }

    /**
     *
     * @param type $user
     * @param type $friend
     * @return type 
     */
    public function mustGiveRequestFriendResponse($userId, $friendId)
    {
        $query = $this->_em->createQuery(
            "select count(u.id) from KsUserBundle:User u"
            ." left join u.myFriends f"
            ." where ((u.id = ?0 and f.friend = ?1))" // or (u.id = ?1 and f.friend = ?0)
            ." and f.pending_friend_request = 1"
        );
        $query->setParameter(0, $friendId);
        $query->setParameter(1, $userId);
        
        return $query->getSingleScalarResult();
    }
    
    /**
     *
     * @param type $user
     * @param type $friend
     * @return type 
     */
    public function isAwaitingRequestFriendResponse($userId, $friendId)
    {
        $query = $this->_em->createQuery(
            "select count(u.id) from KsUserBundle:User u"
            ." left join u.myFriends f"
            ." where ((u.id = ?0 and f.friend = ?1) )" //or (u.id = ?1 and f.friend = ?0)
            ." and f.pending_friend_request = 1"
        );
        $query->setParameters(array($userId, $friendId));
        
        return $query->getSingleScalarResult();
    }
    
    /**
     *
     * @return int Nombre total d'utilisateurs dans la base
     */
    public function getTotal()
    {
        $total = $this->_em
            ->createQuery("select count(u.id) from KsUserBundle:User u")
            ->getSingleScalarResult();
        
        return (int)$total;
    }
    
    
    /**
     * @param  int $userId 
     * @return array Tableau des amis de $userId
     */
    public function getFriendList($userId)
    {
        $friends    = array();
        $query      = $this->_em->createQuery(
            "select uha"
            ." from KsUserBundle:UserHasFriends uha"
            ." where uha.user = ?0"
            ." and uha.pending_friend_request = 0"
        );
        $query->setParameters(array($userId));
        $uhas = $query->getResult();
        foreach ($uhas as $uha) {
            $friends[] = $uha->getFriend();
        }
        
        return $friends;
    }   
    
    /**
     * @param  int $idUser 
     * @return array object Users 
     */
    public function getFriendsList($idUser)
    {
        $qb = $this->_em->createQueryBuilder();
        
        $qb->select(array('uaf')) // string 'u' is converted to array internally
        ->from('KsUserBundle:UserHasFriends', 'uaf')
        ->where( $qb->expr()->andX($qb->expr()->eq('uaf.pending_friend_request ', '?3')))        
        ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->eq('uaf.user', '?1'),
                        $qb->expr()->eq('uaf.friend', '?2')
                    )
                )
         ->setParameter(1, $idUser)
         ->setParameter(2, $idUser)
         ->setParameter(3, "0");
        
        $query = $qb->getQuery();
        
        $userHasFriends = $query->getResult();
        
        $aFriend = array();
        
        // On ne sait pas dans quel sens va être faite la liaison 
        // inviter ou être invité tel est la question ...
        foreach($userHasFriends as $key => $userHasFriend){
            $user = $userHasFriend->getUser();
            $friend = $userHasFriend->getFriend();
            if ($user->getId() == $idUser){
                $aFriend[] = $friend;
            } else {
                $aFriend[] = $user;
            }
        }
        
        return $aFriend;
    }

    /**
     * @param  int $idUser 
     * @return object Users 
     */
    public function getFriendsAndMeQB($user, $me = false, $toUserId = null)
    {
        if (isset($toUserId) && $toUserId != null) {
            $ids[] = $toUserId;
        }
        else {
            $ids = $this->getFriendIds( $user->getId() );
        }
        
        
        if ( $me ) {
            $ids[] = $user->getId();
        }
        
        if ( empty( $ids ) ) $ids = array(0);
            
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
            ->from('KsUserBundle:User', 'u')
            ->where('u.id in (?1)')
            ->addOrderBy('u.username', 'asc')
            ->setParameter(1, $ids);
        
        return $qb;
    }
    
    public function getCommunityOf($user)
    {
        $qb = $this->getFriendsAndMeQB($user, true);
        
        $query = $qb->getQuery();
        return $query->getResult();
    }
    
    public function getFriendsOf($user)
    {
        $qb = $this->getFriendsAndMeQB($user, false);
        
        $query = $qb->getQuery();
        return $query->getResult();
    }
    
    public function getUserQB($userId)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
            ->from('KsUserBundle:User', 'u')
            ->where('u.id  = ?1') 
            ->setParameter(1, $userId);
        
        return $qb;
    }
    
    

    
     /**
     * @param idAgenda
     * @return agendaHasEvent 
     */
    public function getAgendaHasEventOnFuture($idAgenda)
    {      
        $datetime = new \DateTime("now");
        $datetime = $datetime->format("Y-m-d H:i:s");
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('ahe')
                ->from('KsAgendaBundle:AgendaHasEvents' , 'ahe' )
                ->innerJoin('ahe.event', 'e')
                ->where('ahe.agenda = ?1')
                ->andWhere('e.startDate > ?2')
                ->orderBy('e.startDate', 'ASC')
                ->setParameter(1, $idAgenda)
                ->setParameter(2, $datetime);
        
        $query = $queryBuilder->getQuery();
        
        return $query->getResult();
 
    }
    
     /**
     * @param idAgenda
     * @param datetime
     * @return agendaHasEvent 
     */
    public function getAgendaHasEventAfterDateTime($idAgenda , $datetime)
    {      
        
        $datetime = $datetime->format("Y-m-d H:i:s");
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('ahe')
                ->from('KsAgendaBundle:AgendaHasEvents' , 'ahe' )
                ->innerJoin('ahe.event', 'e')
                ->where('ahe.agenda = ?1')
                ->andWhere('e.startDate > ?2')
                ->orderBy('e.startDate', 'ASC')
                ->setParameter(1, $idAgenda)
                ->setParameter(2, $datetime);
        
        $query = $queryBuilder->getQuery();
        
        return $query->getResult();
 
    }
    
     /**
     * @param idAgenda (one by user)
     * @return events 
     */
    public function getEventOfActivitySessionPassedAndIsInactive($idAgenda)
    {      
        $datetime = new \DateTime("now");
        $datetime = $datetime->format("Y-m-d H:i:s");
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('ahe')
                ->from('KsAgendaBundle:AgendaHasEvents' , 'ahe' )
                ->innerJoin('ahe.event', 'e')
                ->innerJoin('e.activitySession', 'actsport')
                ->innerJoin('e.typeEvent', 'mte')
                ->where('ahe.agenda = ?1')
                ->andWhere('e.startDate < ?2')
                ->andWhere('actsport.isValidate = ?5')
                ->andWhere('mte.nom_type = ?3 OR mte.nom_type = ?4')
                ->orderBy('e.startDate', 'ASC')
                ->setParameter(1, $idAgenda)
                ->setParameter(2, $datetime)
                ->setParameter(3, "event_training")
                ->setParameter(4, "event_competition")
                ->setParameter(5, 0);
        
        $query = $queryBuilder->getQuery();
        
        return $query->getResult();
 
    }
    
    
    
     /**
     * @param idAgenda (one by user)
     * @return activitySession 
     */
    public function getActivitySessionInStandByOfAUser($idAgenda)
    {
        $datetime = new \DateTime("now");
        $datetime = $datetime->format("Y-m-d H:i:s");
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('ahe')
                ->from('KsAgendaBundle:AgendaHasEvents' , 'ahe' )
                ->innerJoin('ahe.event', 'e')
                ->innerJoin('e.activitySession', 'actsport')
                ->innerJoin('e.typeEvent', 'mte')
                ->where('ahe.agenda = ?1')
                ->andWhere('e.startDate < ?2')
                ->andWhere('actsport.isValidate = ?5')
                ->andWhere('mte.nom_type = ?3 OR mte.nom_type = ?4')
                ->orderBy('e.startDate', 'ASC')
                ->setParameter(1, $idAgenda)
                ->setParameter(2, $datetime)
                ->setParameter(3, "event_training")
                ->setParameter(4, "event_competition")
                ->setParameter(5, 0);
        
        $query = $queryBuilder->getQuery();
        
        return $query->getResult();
 
    }
   

    /**
     * On cherche par Nom de famille
     * OrdonnÃ© par Proximite
     * @param float latitude 
     * @param float longitude 
     * @param string $string of lastname
     * @return array Users (idUserDetail et proximite)
     */
    public function searchFriendByLastNameOrderByProximity($latCurrentUser,$lngCurrentUser,$idCurrentUser,$string)
    {
          
        $sql = "SELECT *, ROUND(6371*acos(cos(PI()* `latitude` /180)*cos(PI()*".$latCurrentUser."/180)*cos(PI()* `longitude` /180)*cos(PI()*".$lngCurrentUser."/180) 
            + cos(PI()* `latitude` /180)*sin(PI()* `longitude`/180)*cos(PI()*".$latCurrentUser."/180)*sin(PI()*".$lngCurrentUser."/180)
            + sin(PI()* `latitude` /180)*sin(PI()*".$latCurrentUser."/180))) as proximite
               FROM ks_user INNER JOIN ks_user_detail ON ks_user.userDetail_id = ks_user_detail.id WHERE ks_user_detail.lastname LIKE '%{$string}%' AND ks_user.id<>'$idCurrentUser' ORDER BY proximite ASC"; 

        $rsm = new \Doctrine\ORM\Query\ResultSetMapping;
        $rsm->addEntityResult($this->getEntityName(), "utilisateur");
        $rsm->addFieldResult("utilisateur", "id", "id");
        $rsm->addFieldResult("utilisateur", "proximite", "proximite");
        $rsm->addJoinedEntityResult('Ks\UserBundle\Entity\UserDetail' , 'ud', 'u', 'userDetail');
        $rsm->addFieldResult('ud', 'longitude', 'longitude');
        $rsm->addFieldResult('ud', 'latitude', 'latitude');
        $rsm->addFieldResult('ud', 'lastname', 'lastname');
        $query = $this->_em->createNativeQuery($sql , $rsm);
        $result = $query->getArrayResult();
        return $result;
    }
    
    
    /**
     * On cherche par Pseudo
     * OrdonnÃ© par Proximite
     * @param float latitude 
     * @param float longitude 
     * @param string $string of lastname
     * @return array Users (idUserDetail et proximite)
     */
    public function searchFriendByUsernameOrderByProximity($latCurrentUser,$lngCurrentUser,$idCurrentUser,$string)
    {
          
        $sql = "SELECT *, ROUND(6371*acos(cos(PI()* `latitude` /180)*cos(PI()*".$latCurrentUser."/180)*cos(PI()* `longitude` /180)*cos(PI()*".$lngCurrentUser."/180) 
            + cos(PI()* `latitude` /180)*sin(PI()* `longitude`/180)*cos(PI()*".$latCurrentUser."/180)*sin(PI()*".$lngCurrentUser."/180)
            + sin(PI()* `latitude` /180)*sin(PI()*".$latCurrentUser."/180))) as proximite
               FROM ks_user INNER JOIN ks_user_detail ON ks_user.userDetail_id = ks_user_detail.id WHERE ks_user.username LIKE '%{$string}%' AND ks_user.id<>'$idCurrentUser' ORDER BY proximite ASC"; 

        $rsm = new \Doctrine\ORM\Query\ResultSetMapping;
        $rsm->addEntityResult($this->getEntityName(), "utilisateur");
        $rsm->addFieldResult("utilisateur", "id", "id");
        $rsm->addFieldResult("utilisateur", "proximite", "proximite");
        $rsm->addJoinedEntityResult('Ks\UserBundle\Entity\UserDetail' , 'ud', 'u', 'userDetail');
        $rsm->addFieldResult('ud', 'longitude', 'longitude');
        $rsm->addFieldResult('ud', 'latitude', 'latitude');
        $rsm->addFieldResult('ud', 'lastname', 'lastname');
        $query = $this->_em->createNativeQuery($sql , $rsm);
        $result = $query->getArrayResult();
        return $result;
    }
    
    
    

     /**
     * On cherche par email
     * OrdonnÃ© par Proximite
     * @param float latitude 
     * @param float longitude 
     * @param string $string of lastname
     * @return array Users (idUserDetail et proximite)
     */
    public function searchFriendByEmailOrderByProximity($latCurrentUser,$lngCurrentUser,$idCurrentUser,$string)
    {
          
        $sql = "SELECT *, ROUND(6371*acos(cos(PI()* `latitude` /180)*cos(PI()*".$latCurrentUser."/180)*cos(PI()* `longitude` /180)*cos(PI()*".$lngCurrentUser."/180) 
            + cos(PI()* `latitude` /180)*sin(PI()* `longitude`/180)*cos(PI()*".$latCurrentUser."/180)*sin(PI()*".$lngCurrentUser."/180)
            + sin(PI()* `latitude` /180)*sin(PI()*".$latCurrentUser."/180))) as proximite
               FROM ks_user INNER JOIN ks_user_detail ON ks_user.userDetail_id = ks_user_detail.id WHERE ks_user.email LIKE '%{$string}%' AND ks_user.id<>'$idCurrentUser' ORDER BY proximite ASC"; 

        $rsm = new \Doctrine\ORM\Query\ResultSetMapping;
        $rsm->addEntityResult($this->getEntityName(), "utilisateur");
        $rsm->addFieldResult("utilisateur", "id", "id");
        $rsm->addFieldResult("utilisateur", "proximite", "proximite");
        $rsm->addJoinedEntityResult('Ks\UserBundle\Entity\UserDetail' , 'ud', 'u', 'userDetail');
        $rsm->addFieldResult('ud', 'longitude', 'longitude');
        $rsm->addFieldResult('ud', 'latitude', 'latitude');
        $rsm->addFieldResult('ud', 'lastname', 'lastname');
        $query = $this->_em->createNativeQuery($sql , $rsm);
        $result = $query->getArrayResult();
        return $result;
    }
    
    /**
     * On cherche par Nom de famille
     * @param string $string of lastname
     * @return array Users (idUserDetail)
     */
    public function searchFriendByLastName($idCurrentUser,$string)
    {
          
        $sql = "SELECT *
               FROM ks_user INNER JOIN ks_user_detail ON ks_user.userDetail_id = ks_user_detail.id WHERE ks_user_detail.lastname LIKE '%{$string}%' AND ks_user.id<>'$idCurrentUser'"; 

        $rsm = new \Doctrine\ORM\Query\ResultSetMapping;
        $rsm->addEntityResult($this->getEntityName(), "utilisateur");
        $rsm->addFieldResult("utilisateur", "id", "id");
        $rsm->addJoinedEntityResult('Ks\UserBundle\Entity\UserDetail' , 'ud', 'u', 'userDetail');
        $rsm->addFieldResult('ud', 'lastname', 'lastname');
        $query = $this->_em->createNativeQuery($sql , $rsm);
        $result = $query->getArrayResult();
        return $result;
    }
    
    /**
     * 
     * @param type $userId
     * @param type $search
     * @return type
     */
    public function searchUserFriends($userId, $search)
    {
        $sql = "select u.id, u.username, u.last_login, u.userDetail_id, ud.firstname, ud.lastname"
            ." from ks_user u"
            .' left join ks_user_detail ud on (u.userDetail_id = ud.id)'
            ." where 1"
            ." and u.id != $userId";
        
        // si la chaine de recherche ressemble à une adresse mail "valide"
        // alors on fait la recherche uniquement sur le champ user.email
        if (preg_match('/.+@[a-z_0-9-]+[.][a-z]+/i', $search)) {
            $sql .= " and u.email like '{$search}'";
        } else {
            $sql .= " and (u.username like '{$search}' OR ud.lastname like '{$search}' OR ud.firstname like '{$search}')";
        }
        $sql    .= ' limit 5'; // NOTE: on limite le nombre de résultats, c'est à l'utlisateur de préciser sa requête
        $dbh    = $this->_em->getConnection();
        $res    = $dbh->executeQuery($sql, array());
        
        return $res->fetchAll();
    }
    
    
    /**
     * On cherche par Nom de famille
     * @param string $string of lastname
     * @return array Users (idUserDetail)
     */
    public function searchFriendByUsername($idCurrentUser,$string)
    {
          
        $sql = "SELECT *
               FROM ks_user WHERE ks_user.username LIKE '%{$string}%' AND ks_user.id<>'$idCurrentUser'"; 

        $rsm = new \Doctrine\ORM\Query\ResultSetMapping;
        $rsm->addEntityResult($this->getEntityName(), "utilisateur");
        $rsm->addFieldResult("utilisateur", "id", "id");
        $rsm->addJoinedEntityResult('Ks\UserBundle\Entity\UserDetail' , 'ud', 'u', 'userDetail');
        $rsm->addFieldResult('ud', 'lastname', 'lastname');
        $query = $this->_em->createNativeQuery($sql , $rsm);
        $result = $query->getArrayResult();
        return $result;
    }
    
    
    /**
     * On cherche par Nom de famille
     * @param string $string of lastname
     * @return array Users (idUserDetail)
     */
    public function searchFriendByEmail($idCurrentUser,$string)
    {
          
        $sql = "SELECT *
               FROM ks_user WHERE ks_user.email LIKE '%{$string}%' AND ks_user.id<>'$idCurrentUser'"; 

        $rsm = new \Doctrine\ORM\Query\ResultSetMapping;
        $rsm->addEntityResult($this->getEntityName(), "utilisateur");
        $rsm->addFieldResult("utilisateur", "id", "id");
        $rsm->addJoinedEntityResult('Ks\UserBundle\Entity\UserDetail' , 'ud', 'u', 'userDetail');
        $rsm->addFieldResult('ud', 'lastname', 'lastname');
        $query = $this->_em->createNativeQuery($sql , $rsm);
        $result = $query->getArrayResult();
        return $result;
    }
    
    
    /**
     * On cherche par proximite gÃ©ographique par rapport Ã  $userDetail
     * 
     * @param UserDetail $userDetail
     * @param array Tableau d'id utilisateurs Ã  exclure de la recherche
     * @param int $ranke Rayon de la recherche, en km
     * @param int $limit Limite le nombre d'utilisateurs retrouvÃ©s
     * 
     * @return array Tableau des utilisateurs Ã  proximitÃ©
     */
    public function searchNearbyUsers(UserDetail $userDetail, array $excludeUserIds, $ranke, $limit = 5)
    {
        $sql = "SELECT"
            ." ks_user.id, ks_user.username,"
            ." ks_user_detail.image_name, ks_user_detail.firstname, ks_user_detail.lastname, "
            ." (ROUND(6366 * acos(cos(radians(".$userDetail->getLatitude().")) * cos(radians(`latitude`))"
                ." * cos(radians(`longitude`) - radians(".$userDetail->getLongitude()."))"
                ." + sin(radians(".$userDetail->getLatitude().")) * sin(radians(`latitude`))))) as proximite"
            ." FROM ks_user"
            ." INNER JOIN ks_user_detail ON (ks_user.userDetail_id = ks_user_detail.id)"
            ." WHERE leagueLevel_id <= 12"
            ." AND ks_user.id not in (".implode(",", $excludeUserIds).")"
            ." HAVING proximite >= 0 AND proximite < $ranke"
            ." ORDER BY rand()"
            ." LIMIT $limit";
        
        $dbh        = $this->_em->getConnection();
        $results    = $dbh->query($sql)->fetchAll(\PDO::FETCH_ASSOC);
                
        return $results;
    }
    
    /**
     * 
     * @param \Ks\UserBundle\Entity\User $user
     * @return type
     */
    public function getClubIds($userId)
    {              
        $this->friendIds[$userId] = array();
        $sql = "select club_id from ks_club_has_users where user_id = :userId and membershipAskInProgress = 0";
        $dbh = $this->_em->getConnection();
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('userId' => $userId));
        
        return $stmt->fetchAll(\PDO::FETCH_COLUMN);
    }
    
    /**
     *
     * @return array 
     */
    public function getFriendIds($userId)
    {       
        if (isset($this->friendIds[$userId]) && !empty($this->friendIds[$userId])) { // FIXME: bizarre, obligÃ© de rajotuer le !empty, sinon le tableau se vide mais la clÃ© reste dÃ©finie
            return $this->friendIds[$userId];
        }
        
        $dbh = $this->_em->getConnection();
        
        $this->friendIds[$userId] = array();
        $sql = "select friend_id from ks_user_has_friends where user_id = :userId and pending_friend_request = 0";
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('userId' => $userId));
        $result1 = $stmt->fetchAll(\PDO::FETCH_COLUMN);

        $sql = "select user_id from ks_user_has_friends where friend_id = :userId and pending_friend_request = 0";
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('userId' => $userId));
        $result2 = $stmt->fetchAll(\PDO::FETCH_COLUMN);

        $this->friendIds[$userId] = array_unique(array_merge(
            array_unique($result1),
            array_unique($result2)
        ));

        return $this->friendIds[$userId];
    }
    
    /**
     *
     * @return array 
     */
    public function getAthletesIds($userId)
    {       
        if (isset($this->athletesIds[$userId]) && !empty($this->athletesIds[$userId])) { // FIXME: bizarre, obligÃ© de rajotuer le !empty, sinon le tableau se vide mais la clÃ© reste dÃ©finie
            return $this->athletesIds[$userId];
        }
        
        $dbh = $this->_em->getConnection();
        
        $this->athletesIds[$userId] = array();
        $sql = "select chu.user_id from ks_user_manage_clubs umc, ks_club_has_users chu where umc.user_id = :userId and umc.super_admin = 1 and chu.club_id = umc.club_id and chu.membershipAskInProgress = 0 and chu.isEnabled = 1";
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('userId' => $userId));
        $result1 = $stmt->fetchAll(\PDO::FETCH_COLUMN);

        $this->athletesIds[$userId] = array_unique($result1);

        return $this->athletesIds[$userId];
    }
    
    public function getFavoriteSportAndStartDate($userId)
    {       
        $dbh = $this->_em->getConnection();
        
        $this->favoriteSport[$userId] = array();
        $sql = "select a.sport_id, sum(aep.points) as total, (select min(issuedAt) from ks_activity where sport_id = a.sport_id and user_id = u.id) as startOn from ks_user u, ks_activity_earns_points aep, ks_activity a where u.id = :userId and aep.user_id = u.id and aep.activitySession_id = a.id group by a.sport_id order by total DESC";
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('userId' => $userId));
        $this->favoriteSport[$userId] = $stmt->fetchAll(\PDO::FETCH_ASSOC);

        return $this->favoriteSport[$userId];
    }
    
    /**
     *
     * @return array 
     */
    public function getMyLeagueIds($userId)
    {       
        if (isset($this->myLeagueIds[$userId]) && !empty($this->myLeagueIds[$userId])) { // FIXME: bizarre, obligÃ© de rajotuer le !empty, sinon le tableau se vide mais la clÃ© reste dÃ©finie
            return $this->myLeagueIds[$userId];
        }
        
        $dbh = $this->_em->getConnection();
        
        $this->myLeagueIds[$userId] = array();
        $sql = "select u.id from ks_user u, ks_league_level level where u.id != :userId and leaguelevel_id = level.id and level.category_id = (select level.category_id from ks_user u, ks_league_level level where u.id = :userId and leaguelevel_id = level.id)";
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('userId' => $userId));
        $this->myLeagueIds[$userId] = $stmt->fetchAll(\PDO::FETCH_COLUMN);

        return $this->myLeagueIds[$userId];
    }
    
    /**
     *
     * @return array 
     */
    public function getMySportsIds($userId)
    {       
        if (isset($this->mySportsIds[$userId]) && !empty($this->mySportsIds[$userId])) { // FIXME: bizarre, obligÃ© de rajotuer le !empty, sinon le tableau se vide mais la clÃ© reste dÃ©finie
            return $this->mySportsIds[$userId];
        }
        
        $dbh = $this->_em->getConnection();
        
        $this->mySportsIds[$userId] = array();
        $sql = "select udhs.sport_id from ks_user u, ks_user_detail ud, ks_user_detail_has_sport udhs where u.id = :userId and u.userDetail_id = ud.id and udhs.userDetail_id = ud.id";
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('userId' => $userId));
        $this->mySportsIds[$userId] = $stmt->fetchAll(\PDO::FETCH_COLUMN);

        return $this->mySportsIds[$userId];
    }
    
    public function findMySports($userId) {
        $dbh = $this->_em->getConnection();
        $sql = "select udhs.sport_id id, s.codeSport from ks_user u, ks_user_detail ud, ks_user_detail_has_sport udhs, ks_sport s where u.id = :userId and u.userDetail_id = ud.id and udhs.userDetail_id = ud.id and s.id = udhs.sport_id";
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('userId' => $userId));
        
        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }
    
    /**
     *
     * @return array 
     */
    public function getUsersIds()
    {       
        if (isset($this->usersIds) && !empty($this->usersIds)) {
            return $this->usersIds;
        }
        
        $dbh = $this->_em->getConnection();
        
        $this->usersIds = array();
        $sql = "select id from ks_user";
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute();
        
        $this->usersIds = $stmt->fetchAll(\PDO::FETCH_COLUMN);
        return $this->usersIds;
    }
    
    /**
     *
     * @return array 
     */
    public function getUserIds()
    {
        
        $sql = "select id from ks_user where username != 'keepinsport'";
        $dbh = $this->_em->getConnection();
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array());
        return $stmt->fetchAll(\PDO::FETCH_COLUMN);
    }
    /**
     *
     * @return array 
     */
    public function getUserIdsInLeague($leagueCategoryId)
    {
        
        $sql = "SELECT u.id "
            ." FROM ks_user u"
            ." LEFT JOIN ks_league_level ll on (ll.id = u.leagueLevel_id) "
            ." LEFT JOIN ks_league_category ll_category on (ll.category_id = ll_category.id)"
            ." WHERE username != 'keepinsport'"
            ." AND ll_category.id = :leagueCategoryId";
        //var_dump($sql);
        $dbh = $this->_em->getConnection();
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array(
            "leagueCategoryId" => $leagueCategoryId
        ));
        return $stmt->fetchAll(\PDO::FETCH_COLUMN);
    }
    
    /**
     *
     * @return array 
     */
    public function getUserWithPendingFriendIds(User $user)
    {
        $userId = $user->getId();
        
        $sql = "select friend_id from ks_user_has_friends where user_id = :userId and pending_friend_request = 1";
        $dbh = $this->_em->getConnection();
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('userId' => $userId));
        return $stmt->fetchAll(\PDO::FETCH_COLUMN);
    }
    
    /**
     *
     * @param User $user
     * @return type 
     */
    public function getRandomUserByProximity(User $user)
    {
        $usersAround    = array();
        $userDetail     = $user->getUserDetail();
        
        //On cherche de personnes dans un rayon de 10,20,50km 
        if (!empty($userDetail) && $userDetail->getLatitude() && $userDetail->getLongitude()) { 
            $usersAround = $this->searchNearbyUsers(
                $userDetail,
                array_merge(array($user->getId()), $this->getFriendIds($user->getId()), $this->getUserWithPendingFriendIds($user)),
                1000
            );
        }

        return $usersAround;
    }
    
    /**
     * RequÃªte pour rÃ©cupÃ©rer les amis d'amis.
     * On compte Ã©galement le nombre d'amis en commun.
     * 
     * TODO: enlever la jointure en passant directement par friendIds
     * TODO: doit Ãªtre possible de faire le array intersect via mysql
     * 
     * @param User $user
     * @param type $limit
     * @return type array Tableau d'amis d'amis Ã  afficher
     */
    public function getFriendsOfFriends(User $user, $limit = 5)
    {
        $friends    = array();
        $friendIds  = $this->getFriendIds($user->getId());
        
        $excludeUserIds = array_merge(array($user->getId()), $friendIds, $this->getUserWithPendingFriendIds($user));
        
        if( count( $excludeUserIds ) > 0 ) $whereClause = " AND a2.friend_id not in (".implode(",", $excludeUserIds).")";
        else $whereClause = " ";
        
        $sql        = "SELECT"
            ." a2.friend_id as id, group_concat(a2.user_id) as friendOfFriendIds,"
            ." ks_user.username,"
            ." ks_user_detail.image_name, ks_user_detail.firstname, ks_user_detail.lastname"
            ." FROM `ks_user_has_friends` a1"
            ." left join ks_user_has_friends a2 on (a2.user_id = a1.friend_id)"
            ." inner join ks_user on (a2.friend_id = ks_user.id)"
            ." left join ks_user_detail on (ks_user.userDetail_id = ks_user_detail.id)"
            ." WHERE a1.user_id = :userId"
            ." and a2.friend_id != a1.friend_id"
            .' and a1.friend_id != :keepinsportUserId' 
            .' and a2.friend_id != :keepinsportUserId'
            .' and ks_user.leagueLevel_id <= 12'
            . $whereClause
            ." group by a2.friend_id"
            ." order by rand()"
            ." limit $limit";
        
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->prepare($sql);
                
        $stmt->execute(array(
            'userId'            => $user->getId(),
            'keepinsportUserId' => self::KEEPINSPORT_USER_ID
        ));
        while ($res = $stmt->fetch(\PDO::FETCH_ASSOC)) {
            $friendOfFriendIds  = explode(',', $res['friendOfFriendIds']);
            $commonFriends      = array_intersect(
                array_unique($friendOfFriendIds),
                $friendIds
            );
            if (count($commonFriends) > 0) {
                $res['numCommonFriends'] = count($commonFriends);
                $friends[] = $res;    
            }
        }
         
        return $friends;
    }
    
    public function getUsersInMyClubs(User $user)
    {
        $users    = array();
        $friendIds  = $this->getFriendIds($user->getId());
        $myClubIds = $this->getClubIds($user->getId());
        $excludeUserIds = array_merge($friendIds, array($user->getId()), $this->getUserWithPendingFriendIds($user));
        
        
        if( count( $myClubIds ) > 0) {
            $sql        = "SELECT chu.user_id as id, group_concat(chu.club_id) as clubIds,"
                        ." ks_user.username,"
                        ." ks_user_detail.image_name, ks_user_detail.firstname, ks_user_detail.lastname"
                        ." FROM ks_club_has_users chu"
                        ." INNER JOIN ks_user on (chu.user_id = ks_user.id)"
                        ." LEFT JOIN ks_user_detail on (ks_user.userDetail_id = ks_user_detail.id)"
                        ." WHERE club_id in (".implode(",", $myClubIds).")"
                        . " AND user_id not in (".implode(",", $excludeUserIds).")"
                        . " AND ks_user.leagueLevel_id <= 12"
                        ." GROUP BY user_id";

            $dbh    = $this->_em->getConnection();
            $results = $dbh->query($sql)->fetchAll(\PDO::FETCH_ASSOC);

            foreach ($results as $res) {
                $clubIds  = explode(',', $res['clubIds']);
                $commonClubs      = array_intersect(
                    array_unique($clubIds),
                    $myClubIds
                );
                if (count($commonClubs) > 0) {
                    $res['numCommonClubs'] = count($commonClubs);
                    $users[] = $res;    
                }
            }
        }
         
        return $users;
    }
     
    /**
     *
     * @return boolean Si l'utilisateur participe dÃ©jÃ  Ã  l'article qui est un Ã©vÃ©nement sportif
     */
    public function alreadyParticipatesInArticleSportingEvent(\Ks\ActivityBundle\Entity\Article $article, \Ks\UserBundle\Entity\User $user)
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('count(u.id)')
                ->from('KsUserBundle:User', 'u')
                ->innerJoin('u.articleSportingEventsParticipations', 'asep')
                ->where('asep.id = ?1')
                ->andWhere('u.id = ?2')
                ->setParameter(1, $article->getId())
                ->setParameter(2, $user->getId());
        
        $query = $queryBuilder->getQuery();
        
        $result = (int)$query->getSingleScalarResult();

        return ($result == 1 ? true : false);
    }
    
    
    /*
     * 
     * @param \Ks\UserBundle\Entity\User $currentUser
     * return nomber of authorizations or throw exception if denied
     */
    public function couldInvitOther($currentUser) {
        $nbInvits = 1;
        $couldInvit = false;
        
        $emailCurrentUser    = $currentUser->getEmail();
        $invitationEmailBeta = $this->_em->getRepository('KsUserBundle:InvitationEmailBeta')->findOneByEmail($emailCurrentUser);
        if(isset($invitationEmailBeta)) {
            $couldInvit = $invitationEmailBeta->getCouldInvit();
            $nbInvits = $invitationEmailBeta->getNomberInvitation();
        }
        
        
        if($couldInvit == false || $nbInvits < 1 ) {
            throw new \Symfony\Component\Security\Core\Exception\AccessDeniedException();
            //$this->get('session')->setFlash('alert alert-error', 'Vous n\'Ãªtes pas autorisÃ©s Ã  envoyer des invitations par mail');
            //return $this->redirect($this->generateUrl('_ks_index')); 
        }
        
        return $nbInvits;
        
    }
    
        /**
     *
     * @return queryBuilder return members
     */
    public function findClubMembersQB(\Ks\ClubBundle\Entity\Club $club, \Ks\UserBundle\Entity\User $user=null)
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        
        if (is_null($user))
            $queryBuilder->select('u')
                ->from('KsUserBundle:User' , 'u' )
                ->innerJoin('u.clubs', 'chu')
                ->where('chu.club = ?0')
                //->andWhere('chu.isEnabled = 1')
                ->orderBy("u.username", "ASC")
                ->setParameter(0, $club->getId());
        else 
            $queryBuilder->select('u')
                ->from('KsUserBundle:User' , 'u' )
                ->innerJoin('u.clubs', 'chu')
                ->where('chu.club = ?0')
                ->andWhere('u.id != ?1')
                //->andWhere('chu.isEnabled = 1')
                ->orderBy("u.username", "ASC")
                ->setParameter(0, $club->getId())
                ->setParameter(1, $user->getId());
        
        return $queryBuilder;
 
    }
    
      /**
     *
     * @return queryBuilder return members
     */
    public function findTeamUsersQB(\Ks\ClubBundle\Entity\Team $team)
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('u')
                ->from('KsUserBundle:User' , 'u' )
                ->innerJoin('u.teams', 'thu')
                ->where('thu.team = ?0')
                ->orderBy("u.username", "ASC")
                ->setParameter(0, $team->getId());
        
        return $queryBuilder;
 
    }
    
    /**
     * RÃ©cupÃ¨re tous les Ã©vÃ©nÃ©ments d'un utilisateur,
     * pour l'affichage dans un calendrier.
     * 
     * @param User $user
     * @return type 
     */
    public function getAgendaEvents(User $user)
    {
        $dbh = $this->_em->getConnection();
        $sql = "select e.id, e.content, e.name, e.startDate, e.endDate, te.nom_type as nomType"
            ." from ks_user u"
            ." inner join ks_agenda_has_events ahe on (ahe.agenda_id = u.agenda_id)"
            ." inner join ks_event e on (ahe.event_id = e.id)"
            ." inner join ks_type_event te on (te.id = e.typeEvent_id)"
            ." where u.id = :userId";
        $stmt = $dbh->executeQuery($sql, array('userId' => $user->getId()));
        
        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }
    
    public function findTopFriendsBySport($userId, $nbUsersToFind, $startOn, $endOn, $sportId) {
        $activityRep = $this->_em->getRepository('KsActivityBundle:Activity');
        $user = $this->find($userId);
        $friendIds  = $this->getFriendIds($user->getId());
        
        $users = $points = array();
        
        //On est le premier utilisateur du tableau
        $users[] = array(
            "points" => $activityRep->findEarnedPointsBySport($userId, $sportId, $startOn, $endOn),
            "userId" => $userId
        );
        
        //On récupère tous les utilisateurs et leurs points respectifs
        foreach($friendIds as $friendId) {
            $userPoints = $activityRep->findEarnedPointsBySport($friendId, $sportId, $startOn, $endOn);
            $points[$friendId] = $userPoints;
        }
        
        //On trie par valeurs décroissantes
        arsort($points);
        
        //On prend le premier élement
        $currentValue = current($points);
        $currentKey = key($points);
        
        //Tant que on selectionne un élément non null et que l'on a pas atteint le nombre d'utilisateurs à renvoyer
        while( count( $users ) < ( $nbUsersToFind + 1 ) && $currentValue !== false && $currentKey !== false ) {
            $users[] = array(
                "points" => $currentValue,
                "userId" => $currentKey
            );
            
            //On sélectionne le suivant utilisateur
            $currentValue = next($points);
            $currentKey = key($points);
        }
        
        return $users;
    }
    
    public function findTopUsersBySport($userId, $nbUsersToFind, $startOn, $endOn, $sportId) {
        $activityRep = $this->_em->getRepository('KsActivityBundle:Activity');

        $userIds  = $this->getUserIds();
        
        $users = $points = array();
        
        //On est le premier utilisateur du tableau
        $users[] = array(
            "points" => $activityRep->findEarnedPointsBySport($userId, $sportId, $startOn, $endOn),
            "userId" => $userId
        );
        
        //On récupère tous les utilisateurs et leurs points respectifs
        foreach($userIds as $uId) {
            $userPoints = $activityRep->findEarnedPointsBySport($uId, $sportId, $startOn, $endOn);
            $points["$uId"] = $userPoints;
        }

        //On trie par valeurs décroissantes
        arsort($points);
        
        //On prend le premier élement
        $currentValue = current($points);
        $currentKey = key($points);
        
        //Tant que on selectionne un élément non null et que l'on a pas atteint le nombre d'utilisateurs à renvoyer
        while( count( $users ) < ( $nbUsersToFind + 1 ) && $currentValue !== false && $currentKey !== false ) {
            
            if( (string)$currentKey != (string)$userId) {
                $users[] = array(
                    "points" => $currentValue,
                    "userId" => $currentKey
                );
            }

            //On sélectionne le suivant utilisateur
            $currentValue = next($points);
            $currentKey = key($points);
        }

        return $users;
    }
    
    public function findTopLeagueUsers($nbUsersToFind, $leagueCategoryId, $startOn, $endOn) {
        $activityRep = $this->_em->getRepository('KsActivityBundle:Activity');

        $userIds  = $this->getUserIdsInLeague($leagueCategoryId);
        
        $users = $points = array();
        
        //On récupère tous les utilisateurs et leurs points respectifs
        foreach($userIds as $userId) {
            $userPoints = $activityRep->findEarnedPoints($userId, null, $startOn, $endOn);
            $points[$userId] = $userPoints;
        }
        
        //On trie par valeurs décroissantes
        arsort($points);
        
        //On prend le premier élement
        $currentValue = current($points);
        $currentKey = key($points);
        
        //Tant que on selectionne un élément non null et que l'on a pas atteint le nombre d'utilisateurs à renvoyer
        while( count( $users ) < $nbUsersToFind && $currentValue !== false && $currentKey !== false ) {
            $users[] = array(
                "points" => $currentValue,
                "userId" => $currentKey
            );
            
            //On sélectionne le suivant utilisateur
            $currentValue = next($points);
            $currentKey = key($points);
        }

        return $users;
    }
    
    public function findContestUsers($userId, $params) {
        $activityRep = $this->_em->getRepository('KsActivityBundle:Activity');
        
        $usersIds  = $this->getUsersIds();
        
        $contestUsers = $points = $displayedUsersIds = array();
        
        
        //On récupère tous les utilisateurs et leurs points respectifs
        /*foreach($usersIds as $uId) {
            $userPoints = $activityRep->findEarnedPoints($uId, null, $startOn, $endOn);
            $points[$uId] = $userPoints;
        }*/
        
        $users      = $this->findUsers($params);
        
        //usort( $users, array( $this, "orderUsersByPointsDesc" ) );
        usort( $users, array( $this, "orderUsersByGodFatherPointsDesc" ) );
        
        foreach($users as $user) {
            //$points[$user["id"]] = $user["points"];
            $points[$user["id"]] = $user["godFatherPoints"];
        }
        
        //On trie par valeurs décroissantes
        arsort($points);
        
        //On prend le premier élement
        $currentValue = current($points);
        $currentKey = key($points);
        $rank = 1;
        
        //Premier du concours
        /*$contestUsers["first"] = array(
            "points" => $currentValue,
            "userId" => $currentKey,
            "rank"   => $rank
        );*/
        
        //Moi 
        $me = false;
        while( !$me && $currentValue !== false && $currentKey !== false ) {
             
            if( $currentKey == $userId) {
                //Si je suis le premier du concours, je suis affiché 1 fois
                //if( $contestUsers["first"]["userId"] != $currentKey) {
                    $contestUsers["me"] = array(
                        "points" => $currentValue,
                        "userId" => $currentKey,
                        "rank"  => $rank
                    );
                    $displayedUsersIds[] = $currentKey;
                //}
                $me = true;
            }
            
            //On sélectionne le suivant utilisateur
            $currentValue = next($points);
            $currentKey = key($points);
            
            $rank++;
        }
        
        //Moi + 1
        if( $currentValue !== false && $currentKey !== false ) {
            if( !in_array($currentKey, $displayedUsersIds) ) {
                $displayedUsersIds[] = $currentKey;
                $contestUsers["afterMe"] = array(
                    "points" => $currentValue,
                    "userId" => $currentKey,
                    "rank"  => $rank
                );
            }
        }
        
        //Moi - 1
        prev($points); // on recule de 1
        $meMoins1 = prev($points); // on recule de 1
        $meMoins1Key = key($points);
        if( $meMoins1 !== false && $meMoins1Key !== false ) {
            if( !in_array($meMoins1Key, $displayedUsersIds) ) {
                $displayedUsersIds[] = $meMoins1Key;
                $contestUsers["beforeMe"] = array(
                    "points" => $meMoins1,
                    "userId" => $meMoins1Key,
                    "rank"  => $rank-2
                );
            }
        }
        
        //Dernier du concours
        $last = end($points); // on place à la fin du tableau
        $lastKey = key($points);
        if( $last !== false && $lastKey !== false ) {
            if( !in_array($lastKey, $displayedUsersIds) ) {
                $displayedUsersIds[] = $lastKey;
                $contestUsers["last"] = array(
                    "points"    => $last,
                    "userId"    => $lastKey,
                    "rank"      => count($points)
                );
            }
        }
        
        //Premier du concours
        $first = reset($points); // on place à la fin du tableau
        $firstKey = key($points);
        if( $first !== false && $firstKey !== false ) {
            if( !in_array($firstKey, $displayedUsersIds) ) {
                $displayedUsersIds[] = $firstKey;
                $contestUsers["first"] = array(
                    "points"    => $first,
                    "userId"    => $firstKey,
                    "rank"      => 1
                );
            }
        }
        
        $contestUsersIds = array();
        foreach( $contestUsers as $key => $user ) {
            $contestUsersIds[] = $user["userId"];
            $u = $this->findOneUser(array(
                "userId"                        => $user["userId"],
                "withPoints"                    => isset( $params["withPoints"] )           ? $params["withPoints"]         : false,
                "withGodsonsPoints"             => isset( $params["withGodsonsPoints"] )    ? $params["withGodsonsPoints"]  : false,
                "activitiesStartOn"             => $params["activitiesStartOn"],
                "activitiesEndOn"               => $params["activitiesEndOn"],
                "withOnlyGodSonsFromThisMonth"  => true,
                "usersKsTeam"                   => false,
            ));
            
            $u["rank"] = $user["rank"];
            $users[$key] = $u;
        }
        
        return $users ;
    }
    
    public static function orderUsersByPointsDesc($user1, $user2)
    {   
        if ( $user1["points"] > $user2["points"] ) {
            return -1;
        }
        elseif ( $user1["points"] < $user2["points"] ) {
            return 1;
        } else {
            return 0;
        }
    }
    
    public static function orderUsersByGodFatherPointsDesc($user1, $user2)
    {   
        if ( $user1["godFatherPoints"] > $user2["godFatherPoints"] ) {
            return -1;
        }
        elseif ( $user1["godFatherPoints"] < $user2["godFatherPoints"] ) {
            return 1;
        } else {
            return 0;
        }
    }
    
    public static function orderUsersByPointsAsc($user1, $user2)
    {   
        if ( $user1["points"] > $user2["points"] ) {
            return 1;
        }
        elseif ( $user1["points"] < $user2["points"] ) {
            return -1;
        } else {
            return 0;
        }
    }
    
    /**
     *
     * @param bool $withStartOn default false
     * @return PreparedStatement 
     */
    public function getPreparedStatementForUserGodsons($withOnlyGodSonsFromThisMonth = false)
    {
        $now = new \DateTime();
        
        $dbh    = $this->_em->getConnection();
        $sql    =  'select gs.id from ks_user gs'
            .' left join ks_user gf on (gs.godFather_id = gf.id)'
            .' where gf.id = :userId';
        if ($withOnlyGodSonsFromThisMonth) {
            $sql .= " and DATE_FORMAT(gs.inscribedAt, '%Y-%m') = '".$now->format('Y-m')."'";
        }
        
        return $dbh->prepare($sql);
    }
    
    /**
     *
     * @param bool $withStartOn default false
     * @return PreparedStatement 
     */
    public function getPreparedStatementForUserLittlesGodsons($withOnlyGodSonsFromThisMonth = false)
    {
        $now = new \DateTime();
        
        $withOnlyGodSonsFromThisMonth = false; //FMO : pour avoir des points sinon page un peu vide...
        
        $dbh    = $this->_em->getConnection();
        $sql    =  'select lgs.id from ks_user lgs'
            .' left join ks_user gs on (lgs.godFather_id = gs.id)'
            .' left join ks_user gf on (gs.godFather_id = gf.id)'
            .' where gf.id = :userId';
        if ($withOnlyGodSonsFromThisMonth) {
            $sql .= " and DATE_FORMAT(lgs.inscribedAt, '%Y-%m') = '".$now->format('Y-m')."'";
        }
        
        return $dbh->prepare($sql);
    }
    
    /**
     *
     * @param 
     * @return PreparedStatement 
     */
    public function getPreparedStatementForUseHasGifts()
    {
        $dbh = $this->_em->getConnection();
        $sql = 'SELECT gift, sentence, DATE_FORMAT(winAt, \'%M\') as month, DATE_FORMAT(winAt, \'%Y\') as year, shop_id as shopId, (select avatar from ks_shop where id = shop_id) as shopAvatar, (select name from ks_shop where id = shop_id) as shopName FROM ks_user_has_gifts uhg '
            .'WHERE uhg.user_id = :userId '
            .'AND (uhg.shop_id = :shopId OR :shopId = -1) '
            .'AND (SUBSTRING(uhg.winAt, 1, 10) = :winAt OR :winAt = -1)';
        
        return $dbh->prepare($sql);
    }
    
    public function findGodsonsAndLittlesGodsons( $userId ) {
        $fullGodsons = array();
        
        $userGodsonsStmt = $this->getPreparedStatementForUserGodsons();      
        $userGodsonsStmt->execute(array('userId'    => $userId));    
        $godsonsResult = $userGodsonsStmt->fetchAll(\PDO::FETCH_ASSOC);  

        $godsons = is_array($godsonsResult) ? $godsonsResult : array();
        
        foreach( $godsons as $godson ) {
            $userGodsonsStmt->execute(array('userId'    => $godson["id"]));  
            $littlesGodsonsResult = $userGodsonsStmt->fetchAll(\PDO::FETCH_ASSOC);  

            $littlesGodsons = is_array($littlesGodsonsResult) ? $littlesGodsonsResult : array();
            
            $fullLttlesGodsons = array();
            foreach( $littlesGodsons as $littleGodson ) {
                $fullLttlesGodsons[] = $this->findOneUser(array("userId" =>$littleGodson["id"]));
            }
            
            $fullGodsons[] = array(
                "infos"      => $this->findOneUser(array("userId" =>$godson["id"])),
                "godsons"   => $fullLttlesGodsons
            );
        }
        
        return $fullGodsons;
    }
    
    public function set2UsersLikeFriends( $user1, $user2 ) {
        $userHasFriends = new \Ks\UserBundle\Entity\UserHasFriends( $user1, $user2);
        $userHasFriends->setPendingFriendRequest(false);
        $user1->addUserHasFriends($userHasFriends);
        $user2->addUserHasFriends($userHasFriends);
        $this->_em->persist($user1);
        $this->_em->persist($user2);
        $this->_em->persist($userHasFriends);
        $this->_em->flush();
    }
    
    public function getDataForSeasonUpdate($userId, $firstDayOfMonth, $lastDayOfMonth) {
        $dbh            = $this->_em->getConnection();
        $activityRep    = $this->_em->getRepository('KsActivityBundle:Activity');
        
        $vars       = array();
        $vars['userId'] = $userId;
        $vars['firstDayOfMonth'] = $firstDayOfMonth;
        $vars['lastDayOfMonth'] = $lastDayOfMonth;
        
        $sqlParts   = array(
            'select' => 'SELECT '
                .' count(a.id) as activities, SUM(p.points) as points ',
            'from'  => 'FROM ks_activity a, ks_activity_earns_points p ',
            'where' => 'WHERE p.user_id = a.user_id '
                       .' AND p.activitySession_id = a.id '
                       .' AND SUBSTRING(a.issuedAt, 1, 10) >=  :firstDayOfMonth '
                       .' AND SUBSTRING(a.issuedAt, 1, 10) <= :lastDayOfMonth '
                       .' AND a.isDisabled = FALSE '
                       .' AND a.isValidate != FALSE '
                       .' AND a.user_id = :userId '
        );
        
        $params['activitiesTypes'] = array(
            'session',
            'session_team_sport',
            'session_endurance_on_earth',
            'session_endurance_under_water'
        );
        
        $sqlParts['where'] .= ' AND a.type in (\''.implode("','", $params['activitiesTypes']).'\')';
        //var_dump(implode(' ', $sqlParts));
        
        //var_dump($vars);
        $stmt = $dbh->executeQuery(implode(' ', $sqlParts), $vars);
        
        $dataForSeasonUpdate = $stmt->fetchAll();
        
        return $dataForSeasonUpdate;
    }
    
    /**
     * $userId est en mode expert ou débutant
     *
     * @param type $userId
     * @return boolean 
     */
    public function isExpertMode($userId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select 1'
            .' from ks_user_detail_has_preference udhp, ks_user u, ks_user_detail ud'
            .' where u.id= :userId and u.userdetail_id = ud.id and ud.id = udhp.userdetail_id and udhp.preference_id = 2 ',
            array(
                'userId'    => $userId
            )
        );
        
        return $stmt->fetchColumn() > 0 ? true : false;
    }
    
    /**
     * Pour supprimer une preference d'un user
     */
    public function deleteUserDetailHasPreference($userId, $preferenceId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'delete from ks_user_detail_has_preference where userDetail_id = (select userDetail_id from ks_user where id = ?) and preference_id = ?',
            array($userId, $preferenceId)
        );
        $this->_em->flush();
    }
    
    /**
     * Pour supprimer les préférences d'un user par type
     * 1- Menu
     * 2- Filtres page actu
     */
    public function deleteUserDetailHasPreferenceByType($userId, $preferenceTypeId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'delete from ks_user_detail_has_preference where userDetail_id = (select userDetail_id from ks_user where id = ?) and preference_id in (select id from ks_preference where preferenceType_id = ?)',
            array($userId, $preferenceTypeId)
        );
        $this->_em->flush();
    }
    
    public function getUserDetailHasPreferenceByType( $params = array(), $translator = null ) {
        $dbh            = $this->_em->getConnection();
        $activityRep    = $this->_em->getRepository('KsActivityBundle:Activity');
        
        $vars       = array();  
        $sqlParts   = array(
            'select' => 'SELECT'
                .' p.id as id, p.code as code ',
            'from'  => 'FROM ks_user u '
                .' LEFT JOIN ks_user_detail ud on (u.userDetail_id = ud.id) '
                .' LEFT JOIN ks_user_detail_has_preference udhp on (udhp.userDetail_id = ud.id) '
                .' LEFT JOIN ks_preference p on (p.id = udhp.preference_id) '
                .' LEFT JOIN ks_preference_type pt on (p.preferenceType_id = pt.id) ',
            'where' => 'WHERE 1 ',
            'group' => '',
            'order' => '',
            'limit' => ''
        );
        
        if( isset( $params['userId'] ) && $params['userId'] != '' ) {
            $sqlParts["where"] .= ' AND u.id = :userId';
            $vars['userId'] = $params['userId'];
        }
        
        if( isset( $params['preferenceTypeId'] ) && $params['preferenceTypeId'] != '' ) {
            $sqlParts["where"] .= ' AND pt.id = :preferenceTypeId';
            $vars['preferenceTypeId'] = $params['preferenceTypeId'];
        }
        
        //var_dump(implode(' ', $sqlParts));exit;
        //var_dump($vars);
        
        $stmt = $dbh->executeQuery(implode(' ', $sqlParts), $vars);
        
        $preferences = $stmt->fetchAll(\PDO::FETCH_ASSOC); 
        
        return $preferences;
    }
    
    /**
     * Renvoit le nombre de séances possibles sur le forfait du user pour un club donné
     *
     * @param type $userId
     * @param type $clubId
     * @return integer 
     */
    public function getRemainingSessions($clubId, $userId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select remainingSessions'
            .' from ks_user_has_sport_package_from_club'
            .' where user_id = :userId and club_id = :clubId',
            array(
                'userId'    => $userId,
                'clubId'  => $clubId
            )
        );
        
        return $stmt->fetchColumn();
    }
    
    public function findCoachingPlanQB(\Ks\ClubBundle\Entity\Club $club =null, \Ks\UserBundle\Entity\User $user=null, $context) {      
        $queryBuilder = $this->_em->createQueryBuilder();
        
        if ($club != null) 
            $queryBuilder->select('c')
                ->from('KsCoachingBundle:CoachingPlan', 'c')
                ->where("c.club = ?1")
                ->orderBy('c.name', 'ASC')
                ->setParameter(1, $club->getId());
        else if ($user != null) {
            $queryBuilder->select('c')
                ->from('KsCoachingBundle:CoachingPlan', 'c')
                ->where("c.user = ?1");
            if (!is_null($context) && $context == 'withNoImportedPlans') $queryBuilder->andWhere('c.father is null');
            $queryBuilder->orderBy('c.name', 'ASC')
                         ->setParameter(1, $user->getId());
        }
        return $queryBuilder;
        
    }
    
    public function findCoachingCategoryQB(\Ks\ClubBundle\Entity\Club $club=null, \Ks\UserBundle\Entity\User $user=null, \Ks\CoachingBundle\Entity\CoachingPlan $plan=null) {      
        $queryBuilder = $this->_em->createQueryBuilder();
        
        if ($club != null) 
            $queryBuilder->select('c')
                ->from('KsCoachingBundle:CoachingCategory', 'c')
                ->where("c.club = ?1")
                ->andWhere('c.isEnabled = 1')
                ->orderBy('c.name', 'ASC')
                ->setParameter(1, $club->getId());
        else if ($user != null) {
            //06/02/15 : Pour le moment ce cas correspond à un coach qui affiche sa page tableau de bord pour créer des plans à partager aux sportifs premiums
            //$userRep = $this->_em->getRepository('KsUserBundle:User');
            $isManagerFromAClub = -1; //$userRep->isManagerFromAClub($user->getId());
            
            if ($isManagerFromAClub >0) {
                $queryBuilder->select('c')
                    ->from('KsCoachingBundle:CoachingCategory', 'c')
                    ->where("c.club = ?1")
                    ->andWhere('c.isEnabled = 1')
                    ->orderBy('c.name', 'ASC')
                    ->setParameter(1, $isManagerFromAClub);
            }
            else {
                $queryBuilder->select('c')
                    ->from('KsCoachingBundle:CoachingCategory', 'c')
                    ->where("c.user = ?1")
                    //->where("c.user is not null ")
                    ->andWhere('c.club is null ')
                    ->andWhere('c.isEnabled = 1')
                    ->orderBy('c.name', 'ASC')
                    ->setParameter(1, $user->getId());;
            }
        }
        
        return $queryBuilder;
    }
    
    public function findcoachingSessionQB(\Ks\ClubBundle\Entity\Club $club=null, \Ks\UserBundle\Entity\User $user=null) {      
        $queryBuilder = $this->_em->createQueryBuilder();
        
        if ($club != null) 
            $queryBuilder->select('c')
                ->from('KsCoachingBundle:CoachingSession', 'c')
                ->where("c.club = ?1")
                ->orderBy('c.name', 'ASC')
                ->setParameter(1, $club->getId());
        else if ($user != null) {
            //06/02/15 : Pour le moment ce cas correspond à un coach qui affiche sa page tableau de bord pour créer des plans à partager aux sportifs premiums
            //$userRep = $this->_em->getRepository('KsUserBundle:User');
            $isManagerFromAClub = -1; //$userRep->isManagerFromAClub($user->getId());
            
            if ($isManagerFromAClub >0) {
                $queryBuilder->select('c')
                ->from('KsCoachingBundle:CoachingSession', 'c')
                ->where("c.club = ?1")
                ->orderBy('c.name', 'ASC')
                ->setParameter(1, $isManagerFromAClub);
            }
            else {
                $queryBuilder->select('c')
                    ->from('KsCoachingBundle:CoachingSession', 'c')
                    ->where("c.user = ?1")
                    ->andWhere('c.club is null ')
                    ->orderBy('c.name', 'ASC')
                    ->setParameter(1, $user->getId());
            }
        }
        
        return $queryBuilder;
        
    }
    
    public function findCoachingPlanEventsByUserQB(\Ks\UserBundle\Entity\User $user, \Ks\ActivityBundle\Entity\Sport $sport=null, \Ks\EventBundle\Entity\Event $event=null) {      
        $queryBuilder = $this->_em->createQueryBuilder();
        
        $startDate = new \DateTime();
        $endDate = new \DateTime();
        
        //FIXME : possible d'utiliser $event qui est de type 5 pour aller chercher sa date pour le choix de la liste à proposer
        
        $queryBuilder->add('select', 'e')
                ->from('KsEventBundle:Event',  'e')
                ->leftJoin('e.usersParticipations', 'ehu')
                ->where('ehu.id = ?1 and e.activitySession IS NULL and e.typeEvent = 5 and e.sport is not null and e.startDate <= ?3 and e.endDate >= ?4 ')
                ->orWhere('e.user = ?2 and e.activitySession IS NULL and e.typeEvent = 5 and e.sport is not null and e.startDate <= ?3 and e.endDate >= ?4 ')
                ->orWhere('e.id = ?5 and e.typeEvent = 5')
                ->orderBy('e.startDate', 'ASC')
                ->setParameter(1, $user->getId())
                ->setParameter(2, $user)
                ->setParameter(3, $startDate->add(new \DateInterval('P0D'))->format('Y-m-d'))
                ->setParameter(4, $endDate->sub(new \DateInterval('P21D'))->format('Y-m-d'))
                ->setParameter(5, is_null($event) ? '-1' : $event->getId())
                ->orderBy('e.startDate', 'DESC');
        //var_dump($queryBuilder->getQuery());exit;
        return $queryBuilder;
    }
    
    public function isManagerFromAClub($userId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select club_id from ks_user_manage_clubs where user_id = :user_id',
            array(
                "user_id" => $userId
            )
        );
        
        $clubId    = $stmt->fetchColumn();
        
        return $clubId > 0 ? $clubId : 0;
    }
    
    public function findCoachingPlanIDFromClub($userId, $clubId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            ' SELECT cp.id '
           .' FROM ks_coaching_plan cp, ks_club_has_users chu '
           .' WHERE chu.user_id = :user_id AND chu.club_id = :club_id AND chu.membershipAskInProgress = 0 AND isEnabled = 1 AND cp.club_id = :club_id AND cp.coachingPlanType_id = 4 AND cp.user_id = :user_id',
            array(
                "user_id" => $userId,
                "club_id" => $clubId,
            )
        );
        
        $planId    = $stmt->fetchColumn();
        
        return $planId > 0 ? $planId : 0;
    }
}
