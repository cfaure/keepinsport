<?php

namespace Ks\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EquipmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EquipmentRepository extends EntityRepository
{
    public function findEquipments( array $params = array(), $translator = null ) {
        $dbh        = $this->_em->getConnection();
        $vars       = array();
        
        if (isset($params["userId"])) $vars['userId'] = $params["userId"];
        else $vars['userId'] = -1;
        
        $sqlParts   = array(
            'select' => 'SELECT distinct equipment.id, equipment.name, '
                .' equipment.activity_id, equipment_type.code as type_code, u.username, ud.firstname, ud.lastname, '
                .' equipment.avatar, IF(avatar is null, 0, 1) as hasAvatar, '
                .' (select count(1) from ks_equipment_has_wishes where equipment_id = equipment.id) as numWishes, '
                .' (select 1 from ks_equipment_has_wishes where equipment_id = equipment.id and wisher_id = :userId) as userHasWished, '
                .' (select count(distinct sportsmen.id) from ks_equipment sportsmen where sportsmen.activity_id = equipment.activity_id) as sportsmen, '
                .' (select count(1) from ks_equipment_used_in_activity activities where activities.equipment_id = equipment.id) as activities, '
                .' (select sum(d.distance) from ks_equipment_used_in_activity activities, ks_activity d where activities.equipment_id = equipment.id and activities.activitysession_id = d.id) as distance, '
                .' (select SEC_TO_TIME(sum(TIME_TO_SEC(t.duration))) from ks_equipment_used_in_activity activities, ks_activity t where activities.equipment_id = equipment.id and activities.activitysession_id = t.id) as time, '
                .' GROUP_CONCAT(DISTINCT sport.label SEPARATOR "|") as sports, ',
            'from'  => 'FROM ks_equipment equipment '
            .' INNER JOIN ks_equipment_type equipment_type on (equipment_type.id = equipment.type_id)'
            .' LEFT JOIN ks_activity a on (a.id = equipment.activity_id) '
            .' LEFT JOIN ks_user u on (u.id = a.user_id)'
            .' LEFT JOIN ks_user_detail ud on (ud.id = u.userDetail_id)'
            .' LEFT JOIN ks_equipment_used_in_sports s on (equipment.id = s.equipment_id)'
            .' LEFT JOIN ks_sport sport on (s.sport_id = sport.id)'
            ,
            'where' => "WHERE 1 ",
            'group' => 'GROUP BY equipment.id',
            'order' => '',
            'limit' => ''
        );
        
        if( isset($params['allEquipments']) ) {
            if ($params['allEquipments']) {
                $sqlParts["select"] .= 'a.label as name, a.brand as brand, null as weight, equipment.id, a.user_id, null as primaryColor, null as secondaryColor, null as isByDefault ';
                $sqlParts["where"] .= ' AND equipment.activity_id is not null AND equipment.user_id != :userId';
                $sqlParts["order"] .= 'ORDER BY type_code desc, activities desc ';
            }
            else {
                $sqlParts["select"] .= 'equipment.name, equipment.brand, equipment.weight, equipment.id, equipment.user_id, equipment.primaryColor, equipment.secondaryColor, equipment.isByDefault ';
                $sqlParts["where"] .= ' AND equipment.user_id = :userId';
                $sqlParts["order"] .= 'ORDER BY type_code desc, hasAvatar desc, activities desc ';
            }
        }
        else {
            $sqlParts["select"] .= 'equipment.name, equipment.brand, equipment.weight, equipment.id, equipment.user_id, equipment.primaryColor, equipment.secondaryColor, equipment.isByDefault ';
        }
        
        if( isset( $params['isByDefault'] ) && !empty( $params['isByDefault'] ) && isset( $params['sportId'] ) && !empty( $params['sportId'] ) ) {
            if ($params['isByDefault'] ) $sqlParts["where"] .= ' AND isByDefault = 1 AND (s.sport_id = '. $params['sportId'] . ' OR s.sport_id = -1) ';
            else $sqlParts["where"] .= ' AND s.sport_id = '. $params['sportId'];
        }
        
        if( isset( $params['activityId'] ) && !empty( $params['activityId'] ) ) {
            $sqlParts["where"] .= ' AND equipment.activity_id = ' . $params['activityId'];
        }
        
        if( isset( $params['activitysessionId'] ) && !empty( $params['activitysessionId'] ) ) {
            $sqlParts["where"] .= ' AND equipment.id in (select equipment_id from ks_equipment_used_in_activity where activitysession_id = ' . $params['activitysessionId'] . ') ';
        }
        
        if( isset( $params['equipmentId'] ) && !empty( $params['equipmentId'] ) ) {
            $sqlParts["where"] .= ' AND equipment.id = ' . $params['equipmentId'];
        }
        
        if( isset( $params['equipmentsIds'] ) && !empty( $params['equipmentsIds'] ) ) {
            $sqlParts["where"] .= ' AND equipment.id in ('.implode(',', $params['equipmentsIds']) . ')';
        }
        
        $stmt = $dbh->executeQuery(implode(' ', $sqlParts), $vars);
        
        //var_dump($stmt);
        //exit;
        
        $equipmentUsersStmt = $this->getPreparedStatementForEquipmentUse();
        
        $equipments = array();
        while( $equipment = $stmt->fetch(\PDO::FETCH_ASSOC) ) {
            $addEquipment = true;
            
            $sports = explode("|", $equipment["sports"]);
            if ( $translator != null ) {
                foreach($sports as $key => $value) {
                    $sports[$key] = $translator->trans( "sports." . $value );
                }  
                $type = $translator->trans( "equipmentsTypes." . $equipment["type_code"] );
            }
            
            if( isset( $params['searchTerms'] ) && !empty($params['searchTerms']) && is_array($params['searchTerms']) && count( $params['searchTerms'] ) > 0 ) {
                
                //var_dump($params['searchTerms']);
                $termMatchesFound =false;
                foreach( $params['searchTerms'] as $termNum => $term ) {
                    $termMatchesFound = false;
                    
                    //Recherche dans la marque
                    if( ! $termMatchesFound ) {
                        $pos = strpos(strtolower($equipment["brand"]), strtolower($term));
                        if ( $pos !== false ) {
                            $termMatchesFound = true;
                        }
                    }

                    //Recherche dans le nom
                    if( ! $termMatchesFound ) {
                        $pos = strpos(strtolower($equipment["name"]), strtolower($term));
                        if ( $pos !== false ) {
                            $termMatchesFound = true;
                        }
                    }

                    //Recherche dans le type
                    if( ! $termMatchesFound ) {
                        $pos = strpos(strtolower($type), strtolower($term));
                        if ( $pos !== false ) {
                            $termMatchesFound = true;
                        }
                    }

                    if( ! $termMatchesFound ) {
                        foreach( $sports as $sport ) {                       
                            //Recherche dans le sport
                            if( ! $termMatchesFound ) {
                                $pos = strpos(strtolower($sport), $term);
                                if ( $pos !== false ) {
                                    $termMatchesFound = true;
                                }
                            }
                        }
                    }
                }
                
                if( !$termMatchesFound ) $addEquipment = false;
            }
            
            //$shop["sports"] = $sports;
            
            
            if (isset($params['extended']) && $params['extended'] ) {
                $equipmentUsersStmt->execute(array('activityId' => $equipment['activity_id']));
                $equipments[] = array_merge(
                    array('equipment' => $equipment),
                    array('users' => $equipmentUsersStmt->fetchAll(\PDO::FETCH_ASSOC))
                );
            } else {
                if( $addEquipment ) $equipments[] = $equipment;
            }
        }
        
        if( isset($params['allEquipments']) && $params['allEquipments']) {
            //FIXME : Si allEquipments est vrai on doit supprimer les doublons à la main
            $tempEquipments = array(); // le nouveau tableau dédoublonné
            $doublons = array(); // contiendra les ids à éviter
            foreach($equipments as $equipment)
            {
              if(!in_array($equipment["activity_id"], $doublons)) {
                 $tempEquipments[] = $equipment;
                 $doublons[] = $equipment["activity_id"];   
              }
            }

            $equipments = $tempEquipments;
        }
        
        if( isset( $params['searchOffset'] ) && is_int($params['searchOffset']) && isset( $params['searchLimit'] ) && is_int($params['searchLimit']) ) {
            $equipmentsFiltered = array_slice( $equipments, $params['searchOffset'], $params['searchLimit']);
            return array(
                "equipments"                 => $equipmentsFiltered,
                "equipmentsNumberNotLoaded"  => count( $equipments ) - count( $equipmentsFiltered ) - $params['searchOffset']
           );
        }                                                                    
        else return $equipments;
    }
    
    public function getUserEquipementsBySportQB($userId, $sportId)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
            ->from('KsUserBundle:Equipment', 'e')
            ->innerJoin('e.sports', 's')
            ->where('e.user  = ?1') 
            ->andWhere('(s.id = ?2 OR s.id = -1)')
            ->setParameter(1, $userId)
            ->setParameter(2, $sportId);
        
        return $qb;
    }
    
    public function getUserEquipementsQB($userId)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
            ->from('KsUserBundle:Equipment', 'e')
            ->where('e.user  = ?1') 
            ->setParameter(1, $userId);
        
        return $qb;
    }
    
    /**
     *
     * @return array 
     */
    public function getMyEquipmentsIdsByDefault($userId, $sportId)
    {       
        $dbh = $this->_em->getConnection();
        
        $this->equipmentsIds[$userId] = array();
        
        $sql = "SELECT distinct id 
                  FROM ks_equipment, ks_equipment_used_in_sports 
                 WHERE user_id = :userId 
                   AND isByDefault = 1
                   AND equipment_id = id
                   AND (sport_id = :sportId OR sport_id = -1)";
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('userId' => $userId, 'sportId' => $sportId));
        $result1 = $stmt->fetchAll(\PDO::FETCH_COLUMN);
        
        $this->equipmentsIds[$userId] = array_unique(array_unique($result1));

        return $this->equipmentsIds[$userId];
    }
    
    /**
     *
     * @return array 
     */
    public function getMyEquipmentsIdsByActivity($userId, $activityId)
    {       
        $dbh = $this->_em->getConnection();
        
        $this->equipmentsIds[$userId] = array();
        
        $sql = "SELECT equipment_id 
                  FROM ks_equipment_used_in_activity
                 WHERE activitysession_id = :activityId ";
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('activityId' => $activityId));
        $result1 = $stmt->fetchAll(\PDO::FETCH_COLUMN);
        
        $this->equipmentsIds[$userId] = array_unique(array_unique($result1));

        return $this->equipmentsIds[$userId];
    }
    
    /**
     *
     * @return array 
     */
    public function getMyEquipmentsIds($userId)
    {       
        $dbh = $this->_em->getConnection();
        
        $this->equipmentsIds[$userId] = array();
        $sql = "select id from ks_equipment where user_id = :userId";
        
        $stmt = $dbh->prepare($sql);
        $stmt->execute(array('userId' => $userId));
        $result1 = $stmt->fetchAll(\PDO::FETCH_COLUMN);
        
        $this->equipmentsIds[$userId] = array_unique(array_unique($result1));

        return $this->equipmentsIds[$userId];
    }
    
    /**
     * Pour supprimer les sports d'un équipement
     */
    public function deleteEquipmentHasSports($equipmentId)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'delete from ks_equipment_used_in_sports where equipment_id = ?',
            array($equipmentId)
        );
        $this->_em->flush();
    }
    
    /**
     * Pour supprimer un équipement
     */
    public function deleteEquipment(\Ks\UserBundle\Entity\Equipment $equipment)
    {
        $this->_em->remove($equipment);
        $this->_em->flush();
    }
    
    protected final function getPreparedStatementForEquipmentUse()
    {
        $dbh        = $this->_em->getConnection();
        $sql = 'select u.id as user_id, u.username as user_username, '
            .' ud.image_name as user_imageName,'
            .' ll.starNumber as ll_starNumber,'
            .' ll_category.label as ll_categoryLabel'
            .' FROM ks_equipment e'
            .' INNER join ks_user u on (u.id = e.user_id)'
            .' LEFT JOIN ks_user_detail ud on (u.userDetail_id = ud.id)'
            .' LEFT JOIN ks_league_level ll on (ll.id = u.leagueLevel_id)'
            .' INNER JOIN ks_league_category ll_category on (ll.category_id = ll_category.id)'
            .' WHERE e.activity_id = :activityId';
        
        return $dbh->prepare($sql);
    }
    
    public function findEquipmentsToCopy() {
        $dbh        = $this->_em->getConnection();
        
        $sqlParts   = array(
            'select' => 'SELECT'
                .' e.id as equipment_id, e.activity_id',
            'from'  => ' FROM ks_activity a, ks_equipment e',
            'where' => ' WHERE a.id = e.activity_id '
                .' AND e.user_id != 7 '
        );
        
        $vars = array();
        
        //var_dump(implode(' ', $sqlParts));
        $stmt = $dbh->executeQuery(implode(' ', $sqlParts), $vars);

        $results = $stmt->fetchAll(\PDO::FETCH_ASSOC);
        
        //var_dump($results);
        //exit;
        
        return $results;
    }
    
    public function getNumWishesByUser(\Ks\UserBundle\Entity\User $user)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select count(*) from ks_equipment_has_wishes where wisher_id = ? group by wisher_id',
            array($user->getId())
        );
        
        return $stmt->fetchColumn();
    }
    
    /**
     *
     * @return boolean Si l'utilisateur a déjà voté sur l'équipement
     */
    public function haveAlreadyWished(\Ks\UserBundle\Entity\Equipment $equipment, \Ks\UserBundle\Entity\User $user)
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select('count(a.id)')
                ->from('KsUserBundle:Equipment', 'a')
                ->innerJoin('a.wishers', 'v')
                ->where('v.equipment = ?1')
                ->andWhere('v.wisher = ?2')
                ->setParameter(1, $equipment->getId())
                ->setParameter(2, $user->getId());
        
        $query = $queryBuilder->getQuery();
        return (boolean)$query->getSingleScalarResult();
    }
    
    /**
     * 
     * @param \Ks\UserBundle\Entity\Equipment $
     * @param \Ks\UserBundle\Entity\User $user
     */
    public function wishOnEquipment(\Ks\UserBundle\Entity\Equipment $equipment, \Ks\UserBundle\Entity\User $user)
    {
        $equipmentHasWishes = new EquipmentHasWishes($equipment, $user);

        $equipmentHasWishes->setWisher($user);
        $equipmentHasWishes->setEquipment($equipment);
        
        $this->_em->persist($equipmentHasWishes);
        $this->_em->flush();
    }
    
    /**
     *
     * @param \Ks\UserBundle\Entity\EquipmentHasWishes $HasWishes 
     */
    public function removeWishOnEquipment(\Ks\UserBundle\Entity\EquipmentHasWishes $equipmentHasWishes)
    {      
        $this->_em->remove($equipmentHasWishes);
        $this->_em->flush();
    }
    
    public function getNumWishesOnEquipment(\Ks\UserBundle\Entity\Equipment $equipment)
    {
        $dbh    = $this->_em->getConnection();
        $stmt   = $dbh->executeQuery(
            'select count(*) from ks_equipment_has_wishes where equipment_id = ? group by equipment_id',
            array($equipment->getId())
        );
        
        return $stmt->fetchColumn();
    }
}