<?php

namespace Ks\MessageBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends EntityRepository
{
    /**
     *
     * @return array collection de messages reçus
     */
    public function findNbReceivesMessages( $userId )
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
 
        $queryBuilder->select('m.id')
                ->from('KsMessageBundle:Message', 'm')
                ->leftJoin('m.previousMessage', 'pm')
                ->leftJoin('m.toUsers', 'u')
                ->where('u.id = ?1')
                ->andWhere('pm.id IS NULL')
                //->andWhere('m.previousMessage = ?2')
                ->orderBy('m.sentAt', 'DESC')
                
                ->setParameter(1, $userId);
                //->setParameter(2, null);

        $query = $queryBuilder->getQuery();
        
        return count( $query->getResult() );
    }  
    
    /**
     *
     * @return int nb de messages reçu
     */
    /*public function findMessagesWhitoutAnswer( $userId, $maxResults, $firstResult )
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
 
        $queryBuilder->select('m')
                ->from('KsMessageBundle:Message', 'm')
                ->leftJoin('m.previousMessage', 'pm')
                ->leftJoin('m.toUsers', 'u')
                ->leftJoin('m.answers', 'a')
                ->where('u.id = ?1')
                ->andWhere('pm.id IS NULL')
                ->andWhere('a.id IS NULL')
                ->orderBy('m.sentAt', 'DESC')
                ->setParameter(1, $userId)
                ->setMaxResults($maxResults)
                ->setFirstResult($firstResult);

        $query = $queryBuilder->getQuery();
        //var_dump($query->getSQL());
        return $query->getResult();
    } */
    
    public function findReceivesMessages( $userId, $maxResults, $firstResult )
    {      
        $queryBuilder = $this->_em->createQueryBuilder();
 
        /*$orX = $queryBuilder->expr()->orx(
            $queryBuilder->expr()->eq('u.id', '?1'),
            $queryBuilder->expr()->eq('au.id', '?1'),
            $queryBuilder->expr()->eq('m.fromUser', '?1')    
        );*/
        
        $queryBuilder->select('m')
                ->from('KsMessageBundle:Message', 'm')
                ->leftJoin('m.previousMessage', 'pm')
                ->leftJoin('m.toUsers', 'u')
                //->leftJoin('m.answers', 'a')
                //->leftJoin('m.toUsers', 'au')
                ->where('u.id = ?1')
                ->andWhere('pm.id IS NULL')
                //->andWhere('a.id IS NULL')
                ->orderBy('m.sentAt', 'DESC')
                //->addOrderBy('a.sentAt', 'ASC')
                //->groupBy('m.id')
                ->setParameter(1, $userId)
                ->setMaxResults($maxResults)
                ->setFirstResult($firstResult);
        
        

        $query = $queryBuilder->getQuery();
        //var_dump($query->getSQL());
        return $query->getResult();
    } 
    
    public function findHydratateMessages( ) {
        $dbh        = $this->_em->getConnection();
        $vars       = array();  
        $sqlParts   = array(
            'select' => 'SELECT'
                .' m.id, m.content, a.sentAt',

            'from'  => 'FROM ks_message m'
                .' LEFT JOIN ks_user_receives_message urm on (m.id = urm.message_id)'
                .' LEFT JOIN ks_message previous_m on (previous_m.id = m.previous_message_id)'
                ,
            'where' => 'previous_m.id is not null AND COUNT(m.answers) < 1 ',
            'group' => 'GROUP BY m.id',
            'order' => '',
            'limit' => ''
        );
        
        $stmt = $dbh->executeQuery(implode(' ', $sqlParts), $vars);
        
        $users = array();
        while( $user = $stmt->fetch(\PDO::FETCH_ASSOC) ) {
            $users[] = $user;
        }
        
        return $users;
        
    }
}