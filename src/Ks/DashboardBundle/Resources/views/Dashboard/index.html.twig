{% extends "KsDashboardBundle::layout.html.twig" %}

{% block title %}
	Keepinsport - Dashboard
{% endblock %}
        
{% block stylesheets %}
    {{ parent() }}
    {#<link rel="stylesheet" type="text/css" href="{{ asset('bundles/ksdashboard/css/style.css') }}" /> #}
{% endblock %}
    
{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript" src="{{ asset('bundles/ksdashboard/js/index.js') }}"></script>
    <script type="text/javascript" src="{{ asset('bundles/ksdashboard/js/functions.js') }}"></script>

    <script type="text/javascript">
        function loadActivitiesByParameters( parameters ) {
            $("#activitiesContainer").html("");
            $("#activitiesLoader").show();
            
            $("#activitiesLabel").html("");
            self.location.hash="#activitiesBloc";
            $.post(
                Routing.generate('ksActivity_activitiesByParameters'),
                parameters,
                function(response) {
                    $("#activitiesLoader").hide();
                    $("#activitiesContainer").html(response.html);
                    var activitiesLabel = "";
                    if( response.sport.label != null ) {
                        activitiesLabel += " " + response.sport.label;
                    }
                    
                    if( response.periodeLabel != null ) {
                        activitiesLabel += " - " + response.periodeLabel;
                    }

                    $("#activitiesLabel").html(activitiesLabel);
                }
            );
        }
        
        function getDataGraphPointsByCommonSportVersusUser( parameters ) {
            $("#loader2").show();
            $("#container2").html("");
            $("#activitiesContainer").html("");
            $.post(
                Routing.generate('ksDashboard_getDataGraphPointsByCommonSportVersusUser'), 
                parameters,
                function(response) {
                    $("#loader2").hide();
                    var highchartsOptions = {};
                    highchartsOptions.chart = {
                        renderTo: 'container2',
                        type: 'column'
                    };

                    var aUsernames = [];
                    var aUserIds = [];
                    
                    /*
                    $.each( response.users, function(userId, userUsername) {
                        aUsernames.push(userUsername);
                        aUserIds.push(userId);
                    });
                     */
                    for (i = 0; i < response.users.length; i++) {
                        aUserIds.push(response.users[i][0]);
                        aUsernames.push(response.users[i][1]);
                    }
                    
                    //Correction bug si aucune activité saisi par l'utilisateur il faut afficher un message
                    if (response.chart.points.length <1 )
                    {
                            $("#container2").html("");
                            $("#container2").html("Tu n'as pas réalisé d'activité sur cette période !");
                    }
                    else {
                        highchartsOptions.title = {
                            //text: 'Comparaison entre ' + aUsernames.join(" et ") => trop long si plusieurs users long à afficher, pas nécessaire au final
                            text : ''
                        };
                        highchartsOptions.series = [];
                        highchartsOptions.xAxis = xAxisOptions;
                        highchartsOptions.yAxis = yAxisOptions;
                        highchartsOptions.tooltip = tooltipStackingGraphOptions;
                        highchartsOptions.plotOptions = plotOptionsGraphOptions;
                        highchartsOptions.plotOptions.column.stacking = "normal";
                        highchartsOptions.plotOptions.series.point.events.click = function(e) {
                            //console.log(this);
                            var userId = aUserIds[this.x];
                            sportIdSelected = this.series.options.id;
                            var parameters = {
                                "userId"                : userId,
                                "sportId"               : sportIdSelected,
                                "startOn"               : response.startOn,
                                "endOn"                 : response.endOn
                            };
                            getDataGraphDependingOnSport( parameters );
                            loadActivitiesByParameters( parameters );
                        }
                        highchartsOptions.credits = creditsOptions;

                        $.each( response.sports, function(sportId, sportLabel) {

                            highchartsOptions.series.push({
                                id:   sportId,
                                name: sportLabel,
                                data: response.chart.points[sportId],
                            });
                        });

                        highchartsOptions.xAxis.categories = aUsernames;
                        chart2 = new Highcharts.Chart(highchartsOptions);
                    }
                }
            );
        }
        
        function getDataGraphCumulPointsOnPeriod(startOn, endOn) {
            $("#cumulPeriodeLoader").show();
            $("#cumulPeriodeContainer").html("");
            $.post(
                Routing.generate('ksDashboard_getDataGraphCumulPointsOnPeriod'), 
                {
                    "userId" : "{{ user.id }}",
                    "startOn" : startOn,
                    "endOn"   : endOn
                },
                function(response) {
                    $("#cumulPeriodeLoader").hide();
                    console.log(response);
                    var highchartsOptions = {};
                    highchartsOptions.chart = {
                        renderTo: 'cumulPeriodeContainer',
                        type: 'column'
                    };

                    highchartsOptions.title = {
                        text: ''
                    };
                    highchartsOptions.series = [];
                    highchartsOptions.xAxis = xAxisOptions;
                    highchartsOptions.yAxis = yAxisOptions;
                    highchartsOptions.tooltip = tooltipStackingGraphOptions;
                    highchartsOptions.plotOptions = plotOptionsGraphOptions;
                    highchartsOptions.plotOptions.column.stacking = "normal";
                    highchartsOptions.plotOptions.series.point.events.click = function(e) {
                        var userId = "{{ user.id }}";
                        sportIdSelected = this.series.options.id
                        var parameters = {
                            "userId"    : userId,
                            "startOn"   : startOn,
                            "endOn"     : endOn
                        };
                        getDataGraphDependingOnSport( parameters );
                        loadActivitiesByParameters( parameters );
                    }
                    highchartsOptions.credits = creditsOptions;

                    $.each( response.sports, function(sportId, sportLabel) {

                        highchartsOptions.series.push({
                            id:   sportId,
                            name: sportLabel,
                            data: response.chart.points[sportId],
                        });

                    });

                    highchartsOptions.xAxis.categories = response.periods;
                    new Highcharts.Chart(highchartsOptions);
                }
            );
        }
        
        function getDataGraphDependingOnSport( parameters ) {
            /*$("#competitionsAndTrainingsNumberRateLoader").show();
            $("#competitionsAndTrainingsMinutesRateLoader").show();
            $("#teamSportSessionResultsLoader").show();
            $("#distancesAndGradiantsLoader").show();
            $("#competitionsAndTrainingsNumberRateContainer").html("");
            $("#competitionsAndTrainingsMinutesRateContainer").html("");
            $("#teamSportSessionResultsContainer").html("");
            $("#distancesAndGradiantsContainer").html("");
            
            $("#teamSportSessionResultsBloc").hide();
            $("#distancesAndGradiantsBloc").show();*/
            
            $("#detailsAnalysisLoader").show();
            $("#detailsAnalysisContainer").html("");
            
            $("#detailsAnalysisLabel").html("");
                        
            $.post(
                Routing.generate('ksDashboard_getDataGraphDependingOnSport'),
                parameters,
                function(response) {
                    /*$("#competitionsAndTrainingsNumberRateLoader").hide();
                    $("#competitionsAndTrainingsMinutesRateLoader").hide();
                    $("#teamSportSessionResultsLoader").hide();
                    $("#distancesAndGradiantsLoader").hide();*/
                    $("#detailsAnalysisLoader").hide();

                    console.log(response);
                    
                    $("#teamSportSessionResultsBloc").hide();
                    $("#distancesAndGradiantsBloc").hide();
                    if( response.sport.type != null ) {
                        if(response.sport.type == "TS" ) $("#teamSportSessionResultsBloc").show();
                        if(response.sport.type == "EOE" || response.sport.type == "EUW") $("#distancesAndGradiantsBloc").show();
                    }
                    
                    var detailsAnalysisLabel = "";
                    if( response.sport.label != null ) {
                        detailsAnalysisLabel += " " + response.sport.label;
                    }
                    
                    if( response.periodeLabel != null ) {
                        detailsAnalysisLabel += " - " + response.periodeLabel;
                    }
                    
                    $("#detailsAnalysisLabel").html(detailsAnalysisLabel);
                    
                    var highchartsOptions = {};
                    /*highchartsOptions.title = {
                        text: 'Entraînement / Compétition<br/> (occurrences)'
                    };
                    highchartsOptions.plotOptions = plotOptionsPieOptions;
                    
                    highchartsOptions.plotOptions.series.point.events.click = function(e) {
                        //console.log(this);
                        var wasOfficial = this.x;
                        var parameters2 = parameters;
                        parameters2.wasOfficial = wasOfficial;
                        
                        loadActivitiesByParameters( parameters2 );
                    }

                    highchartsOptions.credits = creditsOptions;
                    
                    //Camembert Comparatif du nombre compétition/Entraînement
                    highchartsOptions.chart = {
                        renderTo: 'competitionsAndTrainingsNumberRateContainer', 
                    };

                    
                    highchartsOptions.series = [];
                    highchartsOptions.tooltip =  {
                        //pointFormat: '{point.y} activités<br/>{series.name}: <b>{point.percentage}%</b>', percentageDecimals: 1                        
                        pointFormat: '<b>{point.percentage}%</b>', percentageDecimals: 1                        
                    };
                    
                    highchartsOptions.series.push({
                        type : 'pie',
                        //id:   sportId,
                        name: 'Taux Compétitions/Entraînements',
                        data: [
                                ['Entrainements', response.chart.competitionsAndTrainingsNumberRate["training"]],
                                ['Compétitions', response.chart.competitionsAndTrainingsNumberRate["competition"]]
                            ]
                    });

                    new Highcharts.Chart(highchartsOptions);
                    highchartsOptions.title = {
                        text: 'Entraînement / Compétition <br/>(minutes)'
                    };
                    
                    //Camembert Comparatif du nombre de minutes compétition/Entraînement
                    highchartsOptions.chart = {
                        renderTo: 'competitionsAndTrainingsMinutesRateContainer', 
                    };
                    
                    highchartsOptions.plotOptions.pie.dataLabels.formatter = function() {
                        return secondsToTime( this.y );
                    };


                    highchartsOptions.series = [];
                    highchartsOptions.tooltip =  {
                        pointFormat: '<b>{point.percentage}%</b>', percentageDecimals: 1

                    };
                    highchartsOptions.series.push({
                        type : 'pie',
                        //id:   sportId,
                        name: 'Taux Compétitions/Entraînements',
                        data: [
                                ['Entrainements', response.chart.competitionsAndTrainingsMinutesRate["training"]],
                                ['Compétitions', response.chart.competitionsAndTrainingsMinutesRate["competition"]]
                            ]
                    });
                    
                    new Highcharts.Chart(highchartsOptions);
                    
                    //Camembert des victoire/nuls/défaites
                    highchartsOptions.chart = {
                        renderTo: 'teamSportSessionResultsContainer', 
                    };
                    highchartsOptions.title = {
                        text: 'Résultats <br/>(v/n/d)'
                    };
                    highchartsOptions.plotOptions.pie.dataLabels.formatter = function() {
                        return this.y;
                    };
                    highchartsOptions.series = [];
                    highchartsOptions.tooltip =  {
                        pointFormat: '<b>{point.percentage}%</b>', percentageDecimals: 1                        
                    };
                    highchartsOptions.plotOptions.series.point.events.click = function(e) {
                        var resultCode = null;
                        switch( this.x ) {
                            case 0:
                               resultCode = 'v';
                               break;
                            case 1:
                               resultCode = 'n';
                               break;
                            case 2:
                               resultCode = 'd';
                               break;
                        }
                        
                        var parameters2 = parameters;
                        parameters2.resultCode = resultCode;
                                
                        loadActivitiesByParameters( parameters2 );
                    }
                    highchartsOptions.series.push({
                        type : 'pie',
                        //id:   sportId,
                        name: 'Taux',
                        data: [
                                ['Victoires', response.chart.teamSportSessionResults["v"]],
                                ['Nuls', response.chart.teamSportSessionResults["n"]],
                                ['Défaites', response.chart.teamSportSessionResults["d"]],
                            ]
                    });
                    
                    new Highcharts.Chart(highchartsOptions);
                    
                    highchartsOptions.title = {
                        text: 'Distance et dénivelés'
                    };
                    
                    //Graph des sports d'endurence
                    highchartsOptions.chart = {
                        renderTo: 'distancesAndGradiantsContainer', 
                        type: 'column'
                    };
                    
                    highchartsOptions.series = [];
                    highchartsOptions.xAxis = xAxisOptions;
                    highchartsOptions.xAxis.categories = [response.periode];
                    highchartsOptions.yAxis = [{
                        min: 0,
                        title: {
                            text: 'Distance parcourues(km)'
                        }
                    },{ min: 0,
                        title: {
                            text: 'Elevation(m)'
                        },
                        opposite: true
                    }];
                    highchartsOptions.tooltip = tooltipGraphOptions;
                    highchartsOptions.plotOptions = plotOptionsGraphOptions;
                    highchartsOptions.plotOptions.column.stacking = null;
                    highchartsOptions.plotOptions.series.point.events.click = function(e) {
                        //console.log(this);
                        //var userId = aUserIds[this.x];
                        var parameters2 = parameters;

                        loadActivitiesByParameters( parameters2 );
                    }
                    highchartsOptions.credits = creditsOptions;

                    highchartsOptions.series.push({
                        name: "Distance",
                        data: [
                            response.chart.enduranceSessionDetails["distance"],
                        ]
                        
                    });
                    
                    highchartsOptions.series.push({
                        name: "d+",
                        yAxis: 1,
                        data: [
                            response.chart.enduranceSessionDetails["d+"],
                        ] 
                    });
                    
                    highchartsOptions.series.push({
                        name: "d-",
                        yAxis: 1,
                        data: [
                            response.chart.enduranceSessionDetails["d-"],
                        ] 
                    });

                    console.log(highchartsOptions);
                    new Highcharts.Chart(highchartsOptions);*/
        
                    var highchartsOptions = {};
                    highchartsOptions.chart = {
                        renderTo: 'detailsAnalysisContainer',
                    };

                    highchartsOptions.title = {
                        text: ''
                    };
                    highchartsOptions.series = [];
                    highchartsOptions.xAxis = xAxisOptions;
                    
                    if( response.sport.type != null ) {
                        if(response.sport.type == "TS" ) {
                            highchartsOptions.yAxis = [{
                                title: {
                                    text: 'Occurences'
                                },
                                tickInterval: 1
                            },{ min: 0,
                                title: {
                                    text: ''
                                },
                                opposite: true,
                                labels: {
                                    formatter: function() {
                                        return secondsToTime( this.value );
                                    }
                                },
                                //tickInterval: 3600,
                                lineWidth: 0,
                                minorGridLineWidth: 0,
                                lineColor: 'transparent',      
                                labels: {
                                    enabled: false
                                },
                                minorTickLength: 0,
                                tickLength: 0
                            }];
                        
                            //Victoires
                            highchartsOptions.series.push({
                                name: "Victoires",
                                type: 'column',
                                data: response.chart.teamSportSessionResults["v"],
                            });
                            //Nuls
                            highchartsOptions.series.push({
                                name: "Nuls",
                                type: 'column',
                                data: response.chart.teamSportSessionResults["n"],
                            });
                            //Défaites
                            highchartsOptions.series.push({
                                name: "Défaites",
                                type: 'column',
                                data: response.chart.teamSportSessionResults["d"],
                            });
                            
                            //Camembert pour cumul des victoires/nuls/Défaites
                            highchartsOptions.series.push({
                                type:   'pie',
                                name: "cumul",
                                data: [
                                    { name: 'Victoires',    y: response.chart.cumulResuts["v"], color: colors[0]},
                                    { name: 'Nuls',         y: response.chart.cumulResuts["n"], color: colors[1]},
                                    { name: 'Défaites',     y: response.chart.cumulResuts["d"], color: colors[2]},
                                ],
                                center: [250, 80],
                                size: 100,
                                showInLegend: false,
                                dataLabels: {
                                    enabled: false
                                }
                            });
                            
                            highchartsOptions.series.push({
                                type:   'pie',
                                name: "cumul",
                                data: [
                                    { name: 'Entrainements',   y: response.chart.cumulCompetitionsTrainings["training"]},
                                    { name: 'Compétitions',    y: response.chart.cumulCompetitionsTrainings["competition"]}, 
                                ],
                                center: [100, 80],
                                size: 100,
                                showInLegend: false,
                                dataLabels: {
                                    enabled: false
                                }
                            });
                            
                            highchartsOptions.labels = {
                                items: [{
                                    html: 'Entraînements/Compétitions',
                                    style: {
                                        left: '15px',
                                        top: '8px',
                                        color: 'black'
                                    }
                                },{
                                    html: 'Résultats',
                                    style: {
                                        left: '225px',
                                        top: '8px',
                                        color: 'black'
                                    }
                                }]
                            };
                    
                        }
                        if(response.sport.type == "EOE" || response.sport.type == "EUW") {
                            highchartsOptions.yAxis = [{
                                min: 0,
                                title: {
                                    text: 'Kilomètres'
                                },
                                labels: {
                                    formatter: function() {
                                        //Pour ne pas que ça transforme "1000" en "1k"
                                        return this.value;
                                    }
                                }
                            },{ min: 0,
                                title: {
                                    text: '' //Durée
                                },
                                opposite: true,
                                labels: {
                                    formatter: function() {
                                        return secondsToTime( this.value );
                                    }
                                },
                                //tickInterval: 3600,
                                lineWidth: 0,
                                minorGridLineWidth: 0,
                                lineColor: 'transparent',      
                                labels: {
                                    enabled: false
                                },
                                minorTickLength: 0,
                                tickLength: 0
                            },{ min: 0,
                                title: {
                                    text: 'Dénivelés(m)'
                                },
                                opposite: true,
                                labels: {
                                    formatter: function() {
                                        this.value;
                                    }
                                },
                            }];
                            
                            //Kilomètres
                            highchartsOptions.series.push({
                                name: "Distance",
                                type: 'column',
                                data: response.chart.enduranceSessionDetails["distance"],
                            });
                            
                            //Dénivelés
                            highchartsOptions.series.push({
                                name: "D+",
                                yAxis: 2,
                                type: 'column',
                                data: response.chart.enduranceSessionDetails["d+"],
                            });
                            highchartsOptions.series.push({
                                name: "D-",
                                yAxis: 2,
                                type: 'column',
                                data: response.chart.enduranceSessionDetails["d-"],
                            });
                            
                            highchartsOptions.labels = {
                                items: [{
                                    html: 'Entraînements/Compétitions',
                                    style: {
                                        left: '15px',
                                        top: '8px',
                                        color: 'black'
                                    }
                                }/*,{
                                    html: 'Cumul 12 mois',
                                    style: {
                                        left: '270px',
                                        top: '8px',
                                        color: 'black'
                                    }
                                },{   
                                    html: 'Durée : ' + secondsToTime( response.chart.cumulDurations ),
                                    style: {
                                        left: '240px',
                                        top: '40px',
                                        color: 'black',
                                    }
                                },{
                                    html: 'Distance : ' + response.chart.cumulKilometers + ' km',
                                    style: {
                                        left: '240px',
                                        top: '60px',
                                        color: 'black'
                                    }
                                },{
                                    html: 'D+ : ' + response.chart.cumulDenPos +' mètres',
                                    style: {
                                        left: '240px',
                                        top: '80px',
                                        color: 'black'
                                    }
                                },{
                                    html: 'D- : ' + response.chart.cumulDenNeg +' mètres',
                                    style: {
                                        left: '240px',
                                        top: '100px',
                                        color: 'black'
                                    }
                                }*/]
                            };
                            
                            highchartsOptions.series.push({
                                type:   'pie',
                                name: "cumul",
                                data: [
                                    { name: 'Entrainements',   y: response.chart.cumulCompetitionsTrainings["training"]},
                                    { name: 'Compétitions',    y: response.chart.cumulCompetitionsTrainings["competition"]},
                                ],
                                center: [100, 80],
                                size: 100,
                                showInLegend: false,
                                dataLabels: {
                                    enabled: false
                                }
                            });
                        }
                    }
                            
                    highchartsOptions.tooltip = {
                        formatter: function() {
                            var s;
                            if (this.point.name) { // the pie chart
                                s = this.point.name +': '+ this.y;
                            } else {
                                s = '<b>'+ this.x +'</b><br/>'+
                                this.series.name +': ';
                            
                                if( this.series.name == "Durée" ) s+= secondsToTime( this.y );
                                else s+= this.y;
                            }
                            return s;
                        }
                    };
                    
                    highchartsOptions.plotOptions = plotOptionsGraphOptions;
                    highchartsOptions.plotOptions.column.stacking = null;
                    highchartsOptions.plotOptions.series.point.events.click = function(e) {
                        if( this.name == "Entrainements" || this.name == "Compétitions" ) {
 
                            var parameters2 = {
                                "sportId"       : parameters.sportId,
                                "userId"        : parameters.userId,
                                "startOn"       : response.startOn,
                                "endOn"         : response.endOn,
                                "wasOfficial"   : this.x,
                            };
                        } else if ( this.name == "Victoires" || this.name == "Nuls" || this.name == "Défaites" ) {
                            var parameters2 = {
                                "sportId"       : parameters.sportId,
                                "userId"        : parameters.userId,
                                "startOn"       : response.startOn,
                                "endOn"         : response.endOn,
                                "resultCode"   : this.x == 0 ? "v" : (this.x == 1 ? "n" : "d"),
                            };
                        } else {
                            var nbMonths = this.series.xData.length;
                            indexPreviousMonthSelected = ( nbMonths - 1 ) - this.x;
                            var parameters2 = {
                                "sportId"           : parameters.sportId,
                                "userId"            : parameters.userId,
                                "indexPreviousMonth": indexPreviousMonthSelected,
                            };
                        }
                        loadActivitiesByParameters( parameters2 );
                    }
                    highchartsOptions.credits = creditsOptions;

                    
                    //Courbe de durée
                    highchartsOptions.series.push({
                        name: "Durée",
                        yAxis: 1,
                        type: 'spline',
                        data: response.chart.durations,
                    });
                    

                    highchartsOptions.xAxis.categories = response.periods;
                    //console.log(highchartsOptions.series);
                    //highchartsOptions.series = response.chart.points;
                    new Highcharts.Chart(
                        highchartsOptions,
                        function(chart) {
                            if(response.sport.type == "EOE" || response.sport.type == "EUW") {
                                var s = 'Durée : ' + secondsToTime( response.chart.cumulDurations ) + '<br/>'
                                        +'Distance : ' + response.chart.cumulKilometers + ' km<br/>'
                                        +'D+ : ' + response.chart.cumulDenPos +' mètres<br/>'
                                        +'D- : ' + response.chart.cumulDenNeg +' mètres';
                                var text = chart.renderer.text(
                                    s, 
                                    200 + chart.plotLeft, 
                                    50 + chart.plotTop
                                ).attr({
                                    zIndex: 5
                                }).add();

                                var box = text.getBBox();
                                var rect = chart.renderer.rect(box.x - 5, box.y - 5, box.width + 10, box.height + 10, 5)
                                .attr({
                                    fill: 'white',
                                    stroke: 'black',
                                    'stroke-width': 1,
                                    zIndex: 4
                                })
                                .add();
                                
                                //Titre
                                var text = chart.renderer.text(
                                    "Cumul 12 mois", 
                                    (rect.x + rect.width /2) - 45, 
                                    rect.y - 10
                                ).attr({
                                    zIndex: 5
                                }).add();
            
                                /*chart.renderer.rect(290, 40, 170, 100, 5)
                                    .attr({
                                        'stroke-width': 1,
                                        stroke: 'black',
                                        fill: 'white',
                                        zIndex: 1
                                    })
                                    .add();*/
                            }
                        }
                    );
                }
            );
        }
            
        $(document).ready(function() {
            $divEvolutionBySeason       = $("div.evolutionBySeason");
            traceEvolutionBySaisonGraph("evolutionBySeason", "{{ user.id }}", true);
            
            $( "ksSportType_sport").select2("val", "1");
            
            $( "#ksSportType_sport" ).change(function() {
                var customSelectSports = $( "#ksSportType_sport").select2("val");
                $customSelect   = $container.find(".customSelectSports");
                customSelectSports = $customSelect.select2("val");
                
                if(customSelectSports != "" ) {
                    var parameters = {
                        "userId"                : {{ user.id }},
                        "sportId"               : customSelectSports,
                        "lastMonths"            : 12
                    };
                    
                    getDataGraphDependingOnSport( parameters );
                }
            });
        });

    </script>
{% endblock %}
    
{% block content %}
    <h1 class="{% if app.user.id == user.id %}sportif {% else %}friends{% endif %}">{{ "dashboard.title"|trans }} {{ user.username }}</h1>
    </br>
    <div class="blocHeaderSeparator"></div>
    <div class="row-fluid">
        <div class="thumbnail rightColumnBloc span12">
            <!--button type="button" class="btn btn-small pull-right evolutionBySeason {% if app.user.id == user.id %}btn-sportif {% else %}btn-friends{% endif %}" >
                <i class="icon-minus icon-white "></i>
            </button-->
            <h3 class="{% if app.user.id == user.id %}sportif {% else %}friends{% endif %}">{{ "dashboard.evolution"|trans }}</h3>
            <div class="blocHeaderSeparator"></div>
            <div class="evolutionBySeason">
                <div class="alert alert-info">{{'dashboard.message_evolution_up'|trans}} </div>
                <center>
                    <img id="evolutionBySeasonLoader" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader"/>
                </center>
                <div id="evolutionBySeasonContainer"></div>
                <div class="alert alert-info">{{'dashboard.message_evolution_down'|trans}} </div>
            </div>
            
        </div>
        {#<div class="thumbnail rightColumnBloc span4">
            <h3>Période</h3>
            <div class="blocHeaderSeparator"></div>
            <div class="cumulPeriode">
                <center>
                    <img id="cumulPeriodeLoader" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader"/>
                </center>
                <div id="cumulPeriodeContainer"></div>
            </div>
        </div>#}
    </div>
    
    <div class="thumbnail rightColumnBloc">
        <h3 class="{% if app.user.id == user.id %}sportif {% else %}friends{% endif %}">Analyse détaillée par sport : 
            <span id="detailsAnalysisLabel"></span>
        </h3>
        <div class="blocHeaderSeparator"></div>
        {{ form_widget(activitySportChoiceForm.sport) }}
        </br>
        </br>
        <div class="row-fluid">
            {#<div class="thumbnail rightColumnBloc span4">
                <div class="competitionsAndTrainingsNumberRate">
                    <center>
                        <img id="competitionsAndTrainingsNumberRateLoader" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader"/>
                    </center>
                    <div id="competitionsAndTrainingsNumberRateContainer"></div>
                </div>
            </div>#}
            <center>
                <img id="detailsAnalysisLoader" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader" style="display:none"/>
            </center>
            <div id="detailsAnalysisContainer"></div>
            
            {#<div class="thumbnail rightColumnBloc span6">

                <div class="competitionsAndTrainingsMinutesRate">
                    <center>
                        <img id="competitionsAndTrainingsMinutesRateLoader" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader"/>
                    </center>
                    <div id="competitionsAndTrainingsMinutesRateContainer"></div>
                </div>
            </div>
            <div id="teamSportSessionResultsBloc" class="thumbnail rightColumnBloc span6">
                <div class="teamSportSessionResults">
                    <center>
                        <img id="teamSportSessionResultsLoader" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader"/>
                    </center>
                    <div id="teamSportSessionResultsContainer"></div>     
                </div>
            </div>
            <div id="distancesAndGradiantsBloc" class="thumbnail rightColumnBloc span6">
                <div class="distancesAndGradiants">
                    <center>
                        <img id="distancesAndGradiantsLoader" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader"/>
                    </center>
                    <div id="distancesAndGradiantsContainer"></div>
                </div>
            </div>#}
        </div>
    </div>
       
    <div id="activitiesBloc" class="thumbnail rightColumnBloc">
        <h3 class="{% if app.user.id == user.id %}sportif {% else %}friends{% endif %}">Activités sélectionnées : <span id="activitiesLabel"></span></h3>
        <div class="blocHeaderSeparator"></div>
        <center>
            <img id="activitiesLoader" style="display:none" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader"/>
        </center>
        <div id="activitiesContainer"></div>
    </div>
    
    {#<form action="#"  method="post" {{ form_enctype(friendsForm) }} novalidate="novalidate">
        {{ form_rest(friendsForm) }}
    </form>#}
{% endblock content %}
