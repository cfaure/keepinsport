{% extends "KsDashboardBundle::layout.html.twig" %}

{% block title %}
	Keepinsport - Dashboard
{% endblock %}
        
{% block stylesheets %}
    {{ parent() }}
    {#<link rel="stylesheet" type="text/css" href="{{ asset('bundles/ksdashboard/css/style.css') }}" /> #}
{% endblock %}
    
{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript" src="{{ asset('bundles/ksdashboard/js/index.js') }}"></script>
    <script type="text/javascript" src="{{ asset('bundles/ksdashboard/js/functions.js') }}"></script>

    <script type="text/javascript">
        function loadActivitiesByParameters( parameters ) {
            $("#activitiesContainer").html("");
            $("#activitiesLoader").show();
            
            $("#activitiesLabel").html("");
            self.location.hash="#activitiesBloc";
            $.post(
                Routing.generate('ksActivity_activitiesByParameters'),
                parameters,
                function(response) {
                    $("#activitiesLoader").hide();
                    //$("#activitiesContainer").html(response.html);
                    var activitiesLabel = "";
                    if( response.sport.label != null ) {
                        activitiesLabel += " " + response.sport.label;
                    }
                    
                    if( response.periode != null ) {
                        activitiesLabel += " - " + response.periode;
                    }

                    $("#activitiesLabel").html(activitiesLabel);
                }
            );
        }
        
        function getDataGraphPointsByCommonSportVersusUser( parameters ) {
            $("#loader2").show();
            //$("#message_detail").show();
            $("#message_sport").show();
            $("#container2").html("");
            $("#activitiesContainer").html("");
            $.post(
                Routing.generate('ksDashboard_getDataGraphPointsByCommonSportVersusUser'), 
                parameters,
                function(response) {
                    $("#loader2").hide();
                    var highchartsOptions = {};
                    highchartsOptions.chart = {
                        renderTo: 'container2',
                        type: 'column'
                    };

                    var aUsernames = [];
                    var aUserIds = [];
                    
                    //alert('response.startOn=' + response.startOn);
                    //alert('response.endOn=' +response.endOn);
                    
                    /*
                    $.each( response.users, function(userId, userUsername) {
                        aUsernames.push(userUsername);
                        aUserIds.push(userId);
                    });
                     */
                    for (i = 0; i < response.users.length; i++) {
                        aUserIds.push(response.users[i][0]);
                        aUsernames.push(response.users[i][1]);
                    }
                    
                    //Correction bug si aucune activité saisi par l'utilisateur il faut afficher un message
                    if (response.chart.points.length <1 )
                    {
                            $("#container2").html("");
                            $("#container2").html("Tu n'as pas réalisé d'activité sur cette période !");
                    }
                    else {
                        highchartsOptions.title = {
                            //text: 'Comparaison entre ' + aUsernames.join(" et ") => trop long si plusieurs users long à afficher, pas nécessaire au final
                            text : ''
                        };
                        highchartsOptions.series = [];
                        highchartsOptions.xAxis = xAxisOptions;
                        highchartsOptions.yAxis = yAxisOptions;
                        highchartsOptions.tooltip = tooltipStackingGraphOptions;
                        highchartsOptions.plotOptions = plotOptionsGraphOptions;
                        highchartsOptions.plotOptions.column.stacking = "normal";
                        highchartsOptions.plotOptions.series.point.events.click = function(e) {
                            //console.log(this);
                            var userId = aUserIds[this.x];
                            sportIdSelected = this.series.options.id;
                            var parameters = {
                                "userId"                : userId,
                                "sportId"               : sportIdSelected,
                                "startOn"               : response.startOn,
                                "endOn"                 : response.endOn
                            };
                            //getDataGraphDependingOnSport( parameters );
                            loadActivitiesByParameters( parameters );
                        }
                        highchartsOptions.credits = creditsOptions;

                        $.each( response.sports, function(sportId, sportLabel) {

                            highchartsOptions.series.push({
                                id:   sportId,
                                name: sportLabel,
                                data: response.chart.points[sportId],
                            });
                        });

                        highchartsOptions.xAxis.categories = aUsernames;
                        chart2 = new Highcharts.Chart(highchartsOptions);
                    }
                }
            );
        }
        
        function getDataGraphDependingOnSport( parameters ) {
            $("#detailsAnalysisLoader").show();
            $("#detailsAnalysisContainer").html("");
            $("#detailsAnalysisLabel").html("");
                        
            $.post(
                Routing.generate('ksDashboard_getDataGraphDependingOnSport'),
                parameters,
                function(response) {
                    $("#detailsAnalysisLoader").hide();

                    console.log(response);
                    
                    $("#teamSportSessionResultsBloc").hide();
                    $("#distancesAndGradiantsBloc").hide();
                    if( response.sport.type != null ) {
                        if(response.sport.type == "TS" ) $("#teamSportSessionResultsBloc").show();
                        if(response.sport.type == "EOE" || response.sport.type == "EUW") $("#distancesAndGradiantsBloc").show();
                    }
                    
                    var detailsAnalysisLabel = "";
                    if( response.sport.label != null ) {
                        detailsAnalysisLabel += " " + response.sport.label;
                    }
                    
                    if( response.periode != null ) {
                        detailsAnalysisLabel += " - " + response.periode;
                    }
                    
                    $("#detailsAnalysisLabel").html(detailsAnalysisLabel);
                    
                    var highchartsOptions = {};
                    
                    var highchartsOptions = {};
                    highchartsOptions.chart = {
                        renderTo: 'detailsAnalysisContainer',
                    };

                    highchartsOptions.title = {
                        text: ''
                    };
                    highchartsOptions.series = [];
                    highchartsOptions.xAxis = xAxisOptions;
                    
                    if( response.sport.type != null ) {
                        if(response.sport.type == "TS" ) {
                            highchartsOptions.yAxis = [{
                                title: {
                                    text: 'Occurences'
                                },
                                tickInterval: 1
                            },{ min: 0,
                                title: {
                                    text: ''
                                },
                                opposite: true,
                                labels: {
                                    formatter: function() {
                                        return secondsToTime( this.value );
                                    }
                                },
                                //tickInterval: 3600,
                                lineWidth: 0,
                                minorGridLineWidth: 0,
                                lineColor: 'transparent',      
                                labels: {
                                    enabled: false
                                },
                                minorTickLength: 0,
                                tickLength: 0
                            }];
                        
                            //Victoires
                            highchartsOptions.series.push({
                                name: "Victoires",
                                type: 'column',
                                data: response.chart.teamSportSessionResults["v"],
                            });
                            //Nuls
                            highchartsOptions.series.push({
                                name: "Nuls",
                                type: 'column',
                                data: response.chart.teamSportSessionResults["n"],
                            });
                            //Défaites
                            highchartsOptions.series.push({
                                name: "Défaites",
                                type: 'column',
                                data: response.chart.teamSportSessionResults["d"],
                            });
                            
                            //Camembert pour cumul des victoires/nuls/Défaites
                            highchartsOptions.series.push({
                                type:   'pie',
                                name: "cumul",
                                data: [
                                    { name: 'Victoires',    y: response.chart.cumulResuts["v"], color: colors[0]},
                                    { name: 'Nuls',         y: response.chart.cumulResuts["n"], color: colors[1]},
                                    { name: 'Défaites',     y: response.chart.cumulResuts["d"], color: colors[2]},
                                ],
                                center: [250, 80],
                                size: 100,
                                showInLegend: false,
                                dataLabels: {
                                    enabled: false
                                }
                            });
                            
                            highchartsOptions.series.push({
                                type:   'pie',
                                name: "cumul",
                                data: [
                                    { name: 'Entrainements',   y: response.chart.cumulCompetitionsTrainings["training"]},
                                    { name: 'Compétitions',    y: response.chart.cumulCompetitionsTrainings["competition"]}, 
                                ],
                                center: [100, 80],
                                size: 100,
                                showInLegend: false,
                                dataLabels: {
                                    enabled: false
                                }
                            });
                            
                            highchartsOptions.labels = {
                                items: [{
                                    html: 'Entraînements/Compétitions',
                                    style: {
                                        left: '15px',
                                        top: '8px',
                                        color: 'black'
                                    }
                                },{
                                    html: 'Résultats',
                                    style: {
                                        left: '225px',
                                        top: '8px',
                                        color: 'black'
                                    }
                                }]
                            };
                    
                        }
                        if(response.sport.type == "EOE" || response.sport.type == "EUW") {
                            highchartsOptions.yAxis = [{
                                min: 0,
                                title: {
                                    text: 'Kilomètres'
                                },
                                labels: {
                                    formatter: function() {
                                        //Pour ne pas que ça transforme "1000" en "1k"
                                        return this.value;
                                    }
                                }
                            },{ min: 0,
                                title: {
                                    text: '' //Durée
                                },
                                opposite: true,
                                labels: {
                                    formatter: function() {
                                        return secondsToTime( this.value );
                                    }
                                },
                                //tickInterval: 3600,
                                lineWidth: 0,
                                minorGridLineWidth: 0,
                                lineColor: 'transparent',      
                                labels: {
                                    enabled: false
                                },
                                minorTickLength: 0,
                                tickLength: 0
                            },{ min: 0,
                                title: {
                                    text: 'Dénivelés(m)'
                                },
                                opposite: true,
                                labels: {
                                    formatter: function() {
                                        this.value;
                                    }
                                },
                            }];
                            
                            //Kilomètres
                            highchartsOptions.series.push({
                                name: "Distance",
                                type: 'column',
                                data: response.chart.enduranceSessionDetails["distance"],
                            });
                            
                            //Dénivelés
                            highchartsOptions.series.push({
                                name: "D+",
                                yAxis: 2,
                                type: 'column',
                                data: response.chart.enduranceSessionDetails["d+"],
                            });
                            highchartsOptions.series.push({
                                name: "D-",
                                yAxis: 2,
                                type: 'column',
                                data: response.chart.enduranceSessionDetails["d-"],
                            });
                            
                            highchartsOptions.labels = {
                                items: [{
                                    html: 'Entraînements/Compétitions',
                                    style: {
                                        left: '15px',
                                        top: '8px',
                                        color: 'black'
                                    }
                                }]
                            };
                            
                            highchartsOptions.series.push({
                                type:   'pie',
                                name: "cumul",
                                data: [
                                    { name: 'Entrainements',   y: response.chart.cumulCompetitionsTrainings["training"]},
                                    { name: 'Compétitions',    y: response.chart.cumulCompetitionsTrainings["competition"]},
                                ],
                                center: [100, 80],
                                size: 100,
                                showInLegend: false,
                                dataLabels: {
                                    enabled: false
                                }
                            });
                        }
                    }
                            
                    highchartsOptions.tooltip = {
                        formatter: function() {
                            var s;
                            if (this.point.name) { // the pie chart
                                s = this.point.name +': '+ this.y;
                            } else {
                                s = '<b>'+ this.x +'</b><br/>'+
                                this.series.name +': ';
                            
                                if( this.series.name == "Durée" ) s+= secondsToTime( this.y );
                                else s+= this.y;
                            }
                            return s;
                        }
                    };
                    
                    highchartsOptions.plotOptions = plotOptionsGraphOptions;
                    highchartsOptions.plotOptions.column.stacking = null;
                    highchartsOptions.plotOptions.series.point.events.click = function(e) {
                        if( this.name == "Entrainements" || this.name == "Compétitions" ) {
 
                            var parameters2 = {
                                "sportId"       : parameters.sportId,
                                "userId"        : parameters.userId,
                                "startOn"       : response.startOn,
                                "endOn"         : response.endOn,
                                "wasOfficial"   : this.x,
                            };
                        } else if ( this.name == "Victoires" || this.name == "Nuls" || this.name == "Défaites" ) {
                            var parameters2 = {
                                "sportId"       : parameters.sportId,
                                "userId"        : parameters.userId,
                                "startOn"       : response.startOn,
                                "endOn"         : response.endOn,
                                "resultCode"   : this.x == 0 ? "v" : (this.x == 1 ? "n" : "d"),
                            };
                        } else {
                            var nbMonths = this.series.xData.length;
                            indexPreviousMonthSelected = ( nbMonths - 1 ) - this.x;
                            var parameters2 = {
                                "sportId"           : parameters.sportId,
                                "userId"            : parameters.userId,
                                "indexPreviousMonth": indexPreviousMonthSelected,
                            };
                        }
                        loadActivitiesByParameters( parameters2 );
                    }
                    highchartsOptions.credits = creditsOptions;

                    
                    //Courbe de durée
                    highchartsOptions.series.push({
                        name: "Durée",
                        yAxis: 1,
                        type: 'spline',
                        data: response.chart.durations,
                    });
                    

                    highchartsOptions.xAxis.categories = response.periods;
                    //console.log(highchartsOptions.series);
                    //highchartsOptions.series = response.chart.points;
                    new Highcharts.Chart(
                        highchartsOptions,
                        function(chart) {
                            if(response.sport.type == "EOE" || response.sport.type == "EUW") {
                                var s = 'Durée : ' + secondsToTime( response.chart.cumulDurations ) + '<br/>'
                                        +'Distance : ' + response.chart.cumulKilometers + ' km<br/>'
                                        +'D+ : ' + response.chart.cumulDenPos +' mètres<br/>'
                                        +'D- : ' + response.chart.cumulDenNeg +' mètres';
                                var text = chart.renderer.text(
                                    s, 
                                    200 + chart.plotLeft, 
                                    50 + chart.plotTop
                                ).attr({
                                    zIndex: 5
                                }).add();

                                var box = text.getBBox();
                                var rect = chart.renderer.rect(box.x - 5, box.y - 5, box.width + 10, box.height + 10, 5)
                                .attr({
                                    fill: 'white',
                                    stroke: 'black',
                                    'stroke-width': 1,
                                    zIndex: 4
                                })
                                .add();
                                
                                //Titre
                                var text = chart.renderer.text(
                                    "Cumul 12 mois", 
                                    (rect.x + rect.width /2) - 45, 
                                    rect.y - 10
                                ).attr({
                                    zIndex: 5
                                }).add();
                            }
                        }
                    );
                }
            );
        }
            
        $(document).ready(function() {
            var sportIdSelected = null;
            var indexPreviousMonthSelected = 0;
            
            $( "#friend1Select" ).select2({
                width : 250,
                formatResult: function(state) {
                    return state.text;
                }
            });
            $( "#friend1Select" ).select2("val", "");
            
            $( "#periodSelect" ).select2({
                width : 250,
                formatResult: function(state) {
                    return state.text;
                }
            });
            $( "#periodSelect" ).select2("val", "");
            $( "#customSelectSports").select2("val", "");
            $( "ksSportTypeMulti_sport").select2("val", "");
                        
            $( "#friend1Select, #periodSelect, #ksSportTypeMulti_sport" ).change(function() {
                var friend1Id = $( "#friend1Select" ).val();
                var periodeSelect = $( "#periodSelect" ).val();
                var customSelectSports = $( "#ksSportTypeMulti_sport").select2("val");
                $customSelect   = $container.find(".customSelectSports");
                customSelectSports = $customSelect.select2("val");
                
                //alert("$customSelect="+$customSelect.select2("val"));
                
                                
                var top5Friends = false;
                var top5Ks = false;
                var userIds = [];
                userIds.push("{{ user.id }}");
                if( friend1Id != -1 ) {
                    if( friend1Id == 'top5Friends' ) top5Friends = true;
                    else if( friend1Id == 'top5Ks' ) top5Ks = true;
                    else userIds.push(friend1Id);
                }
                
                if( ( userIds.length > 1 || top5Friends || top5Ks ) && periodeSelect != -1 && customSelectSports != "" ) {
                    var parameters = {
                        "userIds"           : userIds,
                        "top5Friends"       : top5Friends,
                        "top5Ks"            : top5Ks,
                        "periodeSelect"     : periodeSelect,
                        "sportSelect"       : customSelectSports
                    }

                    getDataGraphPointsByCommonSportVersusUser( parameters );
                }
            });
        });

    </script>
{% endblock %}
    
{% block content %}
    <h1 class="{% if app.user.id == user.id %}sportif {% else %}friends{% endif %}">{{ "dashboard.match_friends"|trans }} </h1>
    </br>
    <div class="blocHeaderSeparator"></div>
    <div class="thumbnail rightColumnBloc">
        <h3 class="{% if app.user.id == user.id %}sportif {% else %}friends{% endif %}">{{ 'dashboard.perimeter'|trans }} </h3>
        <div class="blocHeaderSeparator"></div>
        <div class="compareWithFriend">
            <div style="display:none" id="message_detail" class="alert alert-info">{{'dashboard.message_detail'|trans}} </div>
            <table>
                <tr>
                    <td>
                        <select id="friend1Select" tabindex="-1">
                            <option value="-1" selected="selected">{{'dashboard.select_sportsmen'|trans}}</option>
                            <option value="top5Friends">{{'dashboard.top5from'|trans}} {% if app.user.id == user.id %}{{'dashboard.my'|trans}}{% else %}{{'dashboard.his'|trans}}{% endif %} {{'dashboard.community'|trans}}</option>
                            <option value="top5Ks">{{'dashboard.top5all'|trans}}</option>
                            {% for user in friends %}
                                <option value="{{ user.id }}">{{ user.username }}</option>
                            {% endfor %}
                        </select>
                    </td>
                    <td> 
                        <select id="periodSelect">
                            <option value="-1" selected="selected">{{'dashboard.select_season'|trans}}</option>
                            <option value="cumul">{{'dashboard.last_year'|trans}}</option>
                            {% for indexPreviousMonth, month in periods %}
                                <option value="{{ indexPreviousMonth }}">{{ month }}</option>
                            {% endfor %}
                        </select>
                    </td>
                    <td>
                        {{ form_widget(activitySportChoiceForm.sport) }}
                    </td>
                </tr>
            </table>
            
            <center>
                <img id="loader2" style="display:none" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader"/>
            </center>
            <div id="container2"></div>
            <div style="display:none" id="message_sport" class="alert alert-info">{{'dashboard.message_sport'|trans}} </div>
        </div>
    </div>
    
    <!--div class="thumbnail rightColumnBloc">
        <h3 class="{% if app.user.id == user.id %}sportif {% else %}friends{% endif %}">Analyse détaillée : <span id="detailsAnalysisLabel"></span></h3>
        <div class="blocHeaderSeparator"></div>
        <div class="row-fluid">
            <center>
                <img id="detailsAnalysisLoader" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader" style="display:none"/>
            </center>
            <div id="detailsAnalysisContainer"></div>
        </div>
    </div-->
       
    <!--div id="activitiesBloc" class="thumbnail rightColumnBloc">
        <h3 class="{% if app.user.id == user.id %}sportif {% else %}friends{% endif %}">Activités sélectionnées : <span id="activitiesLabel"></span></h3>
        <div class="blocHeaderSeparator"></div>
        <center>
            <img id="activitiesLoader" style="display:none" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader"/>
        </center>
        <div id="activitiesContainer"></div>
    </div-->
    
{% endblock content %}
