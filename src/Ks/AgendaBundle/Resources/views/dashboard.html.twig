{% extends "KsActivityBundle::layout_V2.html.twig" %}

{% block title %}
    Tableau de bord
{% endblock %}
        
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" type="text/css" href="{{ asset('V2/css/fullcalendar_old.css') }}" type="text/css" />
{% endblock %}
    
{% block javascripts %}
    {{ parent() }}
    {#<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>#}
    {#<script type="text/javascript" src="{{ asset('bundles/ksagenda/js/fullcalendar_ced.js') }}"></script>#}
    <script type="text/javascript" src="{{ asset('V2/js/fullcalendar_old.js') }}"></script>
    <script type="text/javascript" src="{{ asset('V2/js/jquery.sticky.js') }}"></script>
    <script type="text/javascript" src="{{ asset('bundles/ksevent/js/scripts.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/bootstrap-multiselect.js') }}"></script>
    <script type="text/javascript" src="{{ asset('bundles/ksactivity/js/wikisport.js') }}"></script>
    
    <script type="text/javascript">
        function startIntro() {
            var intro = introJs();
            intro.setOptions({
                steps: [
                    {% if user is defined and user is not null and user.isAllowedPackPremium %}
                        { 
                          intro: "{{ 'visit.dashboard-start-premium'|trans|raw }} :"
                        },
                    {% elseif user is defined and user is not null and user.isAllowedPackElite %}
                        { 
                          intro: "{{ 'visit.dashboard-start-elite'|trans|raw }} :"
                        },
                    {% endif %}
                    {
                      element: '#KPIView',
                      intro: "{{ 'visit.dashboard-KPIView'|trans|raw }}",
                      position: 'bottom'
                    },
                    {% if user is defined and user is not null and user.isAllowedPackPremium %}
                        {
                          element: '#progressGauge',
                          intro: "{{ 'visit.dashboard-progressGauge'|trans|raw }}",
                          position: 'bottom'
                        },
                    {% elseif user is defined and user is not null and user.isAllowedPackElite %}
                        { 
                          element: '#stepEliteMainKPI',
                          intro: "{{ 'visit.dashboard-stepEliteMainKPI'|trans|raw }}"
                        },
                    {% endif %}
                    {
                      element: '#attendanceGauge',
                      intro: "{{ 'visit.dashboard-attendanceGauge'|trans|raw }}",
                      position: 'bottom'
                    },
                    {
                      element: '#efficiencyGauge',
                      intro: "{{ 'visit.dashboard-efficiencyGauge'|trans|raw }}",
                      position: 'bottom'
                    },
                    {
                      element: '#achievementGauge',
                      intro: "{{ 'visit.dashboard-achievementGauge'|trans|raw }}",
                      position: 'bottom'
                    },
                    {
                      element: '#agenda',
                      intro: "{{ 'visit.dashboard-agenda'|trans|raw }}",
                      position: 'top'
                    },
                    {
                      element: '#repartBySport',
                      intro: "{{ 'visit.dashboard-repartBySport'|trans|raw }}",
                      position: 'top'
                    },
                    {
                      element: '#repartByCategory',
                      intro: "{{ 'visit.dashboard-repartByCategory'|trans|raw }}",
                      position: 'top'
                    },
                    {
                      element: '#repartByDifficulty',
                      intro: "{{ 'visit.dashboard-repartByDifficulty'|trans|raw }}",
                      position: 'top'
                    },
                    {
                      element: '#repartByDuration',
                      intro: "{{ 'visit.dashboard-repartByDuration'|trans|raw }}",
                      position: 'top'
                    },
                    {
                      element: '#repartByHR',
                      intro: "{{ 'visit.dashboard-repartByHR'|trans|raw }}",
                      position: 'top'
                    },
                    {
                      element: '#stats',
                      intro: "{{ 'visit.dashboard-stats'|trans|raw }}",
                      position: 'top'
                    },
                    {
                      element: '#stepFlatView',
                      intro: "{{ 'visit.dashboard-flatView'|trans|raw }}",
                      position: 'top'
                    },
                ]
            });
            
            /*intro.setOption('doneLabel', 'Retour').start().oncomplete(function() {
                //window.location.href = 'second.html?multipage=true';
                history.go(-1);
            });*/
            
            intro.start();
        }
        
        function enableAgenda() {
            $("#agenda").css('pointer-events', 'auto');
            $('table.wikiSessions').css('pointer-events', 'auto');
            $('table.favoriteSessions').css('pointer-events', 'auto');
            $("#agenda").css('opacity', '1');
            $('table.wikiSessions').css('opacity', '1');
            $('table.favoriteSessions').css('opacity', '1');
        }
        
        function disableAgenda() {
            $("#agenda").css('pointer-events', 'none');
            $('table.wikiSessions').css('pointer-events', 'none');
            $('table.favoriteSessions').css('pointer-events', 'none');
            $("#agenda").css('opacity', '0.5');
            $('table.wikiSessions').css('opacity', '0.5');
            $('table.favoriteSessions').css('opacity', '0.5');
        }
        
        function showCoachingPlanModal() {
            var coachingPlanModal = $("#coachingPlanModal");
            var modalBody = coachingPlanModal.find('.modal-body');
            var cancelButton = coachingPlanModal.find('a.cancel');

            var closeModal = function() {
                coachingPlanModal.modal('hide');
            }

            coachingPlanModal.on('shown', function() {
                setTimeout(closeModal,3000);
            });

            coachingPlanModal.modal('show');
            coachingPlanModal.on('click.dismiss.modal', '[data-dismiss="modal"]', function(e) {
                e.stopPropagation();
            });
        }

        function showWarningCoachingModal() {
            var warningCoachingModal = $("#warningCoachingModal");
            var modalBody = warningCoachingModal.find('.modal-body');
            var cancelButton = warningCoachingModal.find('a.cancel');

            var closeModal = function() {
                warningCoachingModal.modal('hide');
            }

            warningCoachingModal.on('shown', function() {
                setTimeout(closeModal,3000);
            });

            warningCoachingModal.modal('show');
            warningCoachingModal.on('click.dismiss.modal', '[data-dismiss="modal"]', function(e) {
                e.stopPropagation();
            });
        }
        
        $(document).ready(function() {
            {% if not is_granted("IS_AUTHENTICATED_REMEMBERED") %}
                $("#headerV2").css("background-color","#000");
            {% endif %}
                
            $("#external-events").sticky({topSpacing:0});
            
            {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and not app.user.isAllowedPackElite %}
                $('input').iCheck({
                    checkboxClass: 'icheckbox_flat-blue',
                    radioClass: 'iradio_flat-blue'
                });
            {% endif %}
            $('#subscriptionsRadio, #allRadio').iCheck({
                radioClass: 'iradio_flat-blue'
            });
        
            $("#e2").select2({
                placeholder: "Rechercher",
                allowClear: true
            }); 
            $(document).on("click", ".compose .title", function(){
                $dragAllowed = true;
                {% if user is defined and user is not null %}
                    $plan = $("#ksCoachingPlanType_name").val();
                    if($plan != null && $plan.length == 1) $dragAllowed = true;
                    else {
                        $dragAllowed = false;
                        $message = "{{ 'coaching.choose-at-least-1-plan'|trans }}";
                    }
                {% endif %}
                
                {% if club is defined and club is not null and isManager %}
                    $member = $("#ksClub_ClubHasUsersType_user").val();
                    $plan = $("#ksCoachingPlanType_name").val();
                    if ($member != null && $member.length == 1) {
                         if($plan != null && $plan.length == 1) $dragAllowed = true;
                         else {
                             $dragAllowed = false;
                             $message = "{{ 'coaching.create-plan-for-member'|trans }}";
                         }
                    }
                    else {
                        $dragAllowed = false;
                        $message = "{{ 'coaching.choose-at-least-1-member'|trans }}";
                    }
                {% endif %}
                if ($dragAllowed) {
                    $(".compose").addClass('active');
                    $(".content").addClass('desactive');
                    calendar.fullCalendar( 'changeView', 'month');
                    calendar.fullCalendar('render');
                }
                else showInformation($message);
            });
            $(document).on("click", ".compose.active .title", function(){
                $(".compose").removeClass('active');
                $(".content").removeClass('desactive');
                calendar.fullCalendar( 'changeView', 'month');
                calendar.fullCalendar('render');
            });

            $("#body").addClass("dashboard"); //pour activer le css correspondant
            
            var eventsTypes         = new Array();
            var eventsSports        = new Array();
            var eventsUsers         = new Array();
            var eventsCoachingPlans = new Array();
            var eventsAvailability  = "";
            var eventsFrom          = new Array();
            
            {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null %}
                eventsFrom[0] = "me";
                eventsFrom[1] = "my_clubs"; //FMO pour éviter de voir les évents des autres clubs que les siens !
            {% endif %}
            
            var ajax = null;
            
            $('table.wikiSessions').dataTable({
                "bPaginate": true,
                "bLengthChange": false,
                "pageLength": 5,
                "bFilter": true,
                "bSort": false,
                "bInfo": false,
                "bAutoWidth": true,
                "oLanguage": {% render 'KsUserBundle:Translation:loadDatatables_translations' %},
                "fnDrawCallback" : function() {makeDraggable();}, //FMO : obligatoire car sinon il n'y a que les external-event de la 1ère page qui sont draggables !
            });
            
            $('table.favoriteSessions').dataTable({
                "bPaginate": true,
                "bLengthChange": false,
                "pageLength": 5,
                "bFilter": true,
                "bSort": false,
                "bInfo": false,
                "bAutoWidth": true,
                "oLanguage": {% render 'KsUserBundle:Translation:loadDatatables_translations' %},
                "fnDrawCallback" : function() {makeDraggable();}, //FMO : obligatoire car sinon il n'y a que les external-event de la 1ère page qui sont draggables !
            });
            
            $('table.favoriteSessions').on('page', function() {
                //console.log("page");
            });
            
            function makeDraggable() {
                $('#external-events div.external-event').each(function() {
                    var eventObject = {
                            start :null,
                            end: null, 
                            club_id : null,
                            user_id : null,
                            sport_id : $(this).data('sport_id'),
                            sport_code : $(this).data('sport_code'),
                            sport_label : $(this).data('sport_label'),
                            coachingCategory_id : $(this).data('category_id'),
                            category : $(this).data('category'),
                            coachingSession_id : $(this).data('id'),
                            sessionTitle : $(this).data('title'),
                            content : $(this).data('content'),
                            eventDistanceMin : $(this).data('distance_min'),
                            eventDistanceMax : $(this).data('distance_max'),
                            eventDurationMin : $(this).data('duration_min'),
                            eventDurationMax : $(this).data('duration_max'),
                            eventElevationGainMin : $(this).data('elevation_gain_min'),
                            eventElevationGainMax : $(this).data('elevation_gain_max'),
                            eventElevationLostMin : $(this).data('elevation_lost_min'),
                            eventElevationLostMax : $(this).data('elevation_lost_max'),
                            eventSpeedAverageMin : $(this).data('speed_average_min'),
                            eventSpeedAverageMax : $(this).data('speed_average_max'),
                            eventPowMin : $(this).data('pow_min'),
                            eventPowMax : $(this).data('pow_max'),
                            eventHrType : $(this).data('hr_type'),
                            eventHrCoeffMin : $(this).data('hr_coeff_min'),
                            eventHrCoeffMax : $(this).data('hr_coeff_max'),
                            eventVMACoeff : $(this).data('vma_coeff'),
                            eventIntervalDistance : $(this).data('interval_distance'),
                            eventIntervalDuration : $(this).data('interval_duration'),
                            difficulty_id : $(this).data('difficulty_id'),
                            title: $.trim($(this).text())
                    };

                    // store the Event Object in the DOM element so we can get to it later
                    $(this).data('eventObject', eventObject);

                    // make the event draggable using jQuery UI
                    $(this).draggable({
                            zIndex: 9999,
                            revert: true,      // will cause the event to go back to its
                            revertDuration: 0  //  original position after the drag
                    });
                });
            }

            var calendar = $('#agenda').fullCalendar({        
                header: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'year,month,agendaWeek'
                },
                {% render 'KsUserBundle:Translation:loadFullCalendar_translations' %}
                firstDay : 1, //Le premier jour est un lundi
                selectable: true,
                {#% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and (app.user.isAllowedPackPremium or app.user.isAllowedPackElite) and mainPlan is defined and mainPlan is not null %#}
                {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and mainPlan is defined and mainPlan is not null %}
                    //FMO : si encours, on affiche par défaut la semaine, si dans le futur, on affiche le mois
                    {% if mainPlan[0].onGoing and mainPlan[0].type == 'coach' and (isManagerFromAClub == 0 or user.id == 7) %} defaultView: 'agendaWeek',
                    {% else %} defaultView: 'month',
                    {% endif %}
                {% endif %}
                viewDisplay: function(view) { reDrawGraph(view)},
                selectHelper: true,
                weekNumbers: false,
                editable: true,
                droppable: true, // this allows things to be dropped onto the calendar !!!
                drop: function(date) { // this function is called when something is dropped

                        // retrieve the dropped element's stored Event Object
                        var originalEventObject = $(this).data('eventObject');

                        // we need to copy it, so that multiple events don't have a reference to the same object
                        var copiedEventObject = $.extend({}, originalEventObject);

                        copiedEventObject.isCreation = true;
                        copiedEventObject.isDropped = true;
                        copiedEventObject.start = date;
                        copiedEventObject.allDay = true
                        copiedEventObject.sport_id = originalEventObject.sport_id;
                        copiedEventObject.sport_code = originalEventObject.sport_code;
                        copiedEventObject.sport_label = originalEventObject.sport_label;
                        copiedEventObject.type = 'event_coaching';
                        copiedEventObject.coachingPlan_id = $("#ksCoachingPlanType_name").val();
                        copiedEventObject.category = originalEventObject.category;
                        copiedEventObject.title = originalEventObject.title;
                        //console.log(originalEventObject);
                        copiedEventObject.coachingCategory_id = originalEventObject.coachingCategory_id;
                        copiedEventObject.coachingSession_id = originalEventObject.coachingSession_id;
                        copiedEventObject.sessionTitle = originalEventObject.sessionTitle;
                        copiedEventObject.content = originalEventObject.content;
                        copiedEventObject.eventDistanceMin = originalEventObject.eventDistanceMin;
                        copiedEventObject.eventDistanceMax = originalEventObject.eventDistanceMax;
                        copiedEventObject.eventDurationMin = originalEventObject.eventDurationMin;
                        copiedEventObject.eventDurationMax = originalEventObject.eventDurationMax;
                        copiedEventObject.eventElevationGain = originalEventObject.eventElevationGainMin;
                        copiedEventObject.eventElevationGainMax = originalEventObject.eventElevationGainMax;
                        copiedEventObject.eventElevationLostMin = originalEventObject.eventElevationLostMin;
                        copiedEventObject.eventElevationLostMax = originalEventObject.eventElevationLostMax;
                        copiedEventObject.eventSpeedAverageMin = originalEventObject.eventSpeedAverageMin;
                        copiedEventObject.eventSpeedAverageMax = originalEventObject.eventSpeedAverageMax;
                        copiedEventObject.eventPowMin = originalEventObject.eventPowMin;
                        copiedEventObject.eventPowMax = originalEventObject.eventPowMax;
                        copiedEventObject.eventHrCoeffMin = originalEventObject.eventHrCoeffMin;
                        copiedEventObject.eventHrCoeffMax = originalEventObject.eventHrCoeffMax;
                        copiedEventObject.eventHrType = originalEventObject.eventHrType;
                        copiedEventObject.eventIntervalDuration = originalEventObject.eventIntervalDuration;
                        copiedEventObject.eventIntervalDistance = originalEventObject.eventIntervalDistance;
                        copiedEventObject.eventVMACoeff = originalEventObject.eventVMACoeff;
                        copiedEventObject.difficulty_id = originalEventObject.difficulty_id;
                        //copiedEventObject.color= "rgb(242, 242, 242)";
                        {% if user is defined and user is not null %} 
                            copiedEventObject.user_id = {{ user.id }};
                            /*copiedEventObject.textColor = "#1787c7";
                            copiedEventObject.borderColor = "#1787c7";*/
                            copiedEventObject.usersParticipate = "{{ user.id }}";
                        {% elseif club is defined and club is not null and isManager %}
                            copiedEventObject.club_id = {{ club.id }};
                            /*copiedEventObject.textColor = "#caa206";
                            copiedEventObject.borderColor = "#caa206";*/
                            copiedEventObject.usersParticipate = $("#ksClub_ClubHasUsersType_user").val();
                        {% endif %}
                        
                        //$("#ksEventType_coachingSession").select2("val", copiedEventObject.coachingSession_id);
                        //$("#coachingSessionDetail").val(copiedEventObject.sessionDetail);
                        //$coachingSessionIdInit = null;
                        //console.log(copiedEventObject);
                        
                        // render the event on the calendar
                        // the last `true` argument determines if the event "sticks" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)
                        $('#agenda').fullCalendar('renderEvent', copiedEventObject, false);
                        
                        var params = {
                            "startDate"                 : copiedEventObject.start,
                            "endDate"                   : copiedEventObject.start,
                            "allDay"                    : copiedEventObject.allDay,
                            "title"                     : copiedEventObject.title,
                            "clubId"                    : copiedEventObject.club_id,
                            "userId"                    : copiedEventObject.user_id,
                            "type"                      : copiedEventObject.type,
                            "coachingPlanId"            : copiedEventObject.coachingPlan_id,
                            "coachingCategoryId"        : copiedEventObject.coachingCategory_id,
                            "coachingSessionId"         : copiedEventObject.coachingSession_id,
                            "sessionTitle"              : copiedEventObject.sessionTitle,
                            "coachingDistanceMin"       : copiedEventObject.coachingDistanceMin,
                            "coachingDistanceMax"       : copiedEventObject.coachingDistanceMax,
                            "coachingDurationMin"       : copiedEventObject.coachingDurationMin,
                            "coachingDurationMax"       : copiedEventObject.coachingDurationMax,
                            "coachingElevationGainMin"  : copiedEventObject.coachingElevationGainMin,
                            "coachingElevationGainMax"  : copiedEventObject.coachingElevationGainMax,
                            "coachingElevationLostMin"  : copiedEventObject.coachingElevationLostMin,
                            "coachingElevationLostMax"  : copiedEventObject.coachingElevationLostMax,
                            "coachingSpeedAverageMin"   : copiedEventObject.coachingSpeedAverageMin,
                            "coachingSpeedAverageMax"   : copiedEventObject.coachingSpeedAverageMax,
                            "coachingPowMin"            : copiedEventObject.coachingPowMin,
                            "coachingPowMax"            : copiedEventObject.coachingPowMax,
                            "coachingHrCoeffMin"        : copiedEventObject.coachingHrCoeffMin,
                            "coachingHrCoeffMax"        : copiedEventObject.coachingHrCoeffMax,
                            "coachingHrType"            : copiedEventObject.coachingHrType,
                            "coachingIntervalDistance"  : copiedEventObject.coachingIntervalDistance,
                            "coachingIntervalDuration"  : copiedEventObject.coachingIntervalDuration,
                            "coachingVMACoeff"          : copiedEventObject.coachingVMACoeff,
                            "content"                   : copiedEventObject.content,
                            "eventCompetition"          : copiedEventObject.eventCompetition,
                            "eventDistanceMin"          : copiedEventObject.eventDistanceMin,
                            "eventDistanceMax"          : copiedEventObject.eventDistanceMax,
                            "eventDurationMin"          : copiedEventObject.eventDurationMin,
                            "eventDurationMax"          : copiedEventObject.eventDurationMax,
                            "eventElevationGainMin"     : copiedEventObject.eventElevationGainMin,
                            "eventElevationGainMax"     : copiedEventObject.eventElevationGainMax,
                            "eventElevationLostMin"     : copiedEventObject.eventElevationLostMin,
                            "eventElevationLostMax"     : copiedEventObject.eventElevationLostMax,
                            "eventSpeedAverageMin"      : copiedEventObject.eventSpeedAverageMin,
                            "eventSpeedAverageMax"      : copiedEventObject.eventSpeedAverageMax,
                            "eventPowMin"               : copiedEventObject.eventPowMin,
                            "eventPowMax"               : copiedEventObject.eventPowMax,
                            "eventHrCoeffMin"           : copiedEventObject.eventHrCoeffMin,
                            "eventHrCoeffMax"           : copiedEventObject.eventHrCoeffMax,
                            "eventHrType"               : copiedEventObject.eventHrType,
                            "eventIntervalDistance"     : copiedEventObject.eventIntervalDistance,
                            "eventIntervalDuration"     : copiedEventObject.eventIntervalDuration,
                            "eventVMACoeff"             : copiedEventObject.eventVMACoeff,
                            "sportId"                   : copiedEventObject.sport_id,
                            "usersParticipate"          : copiedEventObject.usersParticipate,
                            "difficultyId"              : copiedEventObject.difficulty_id,
                            "modalTitle"                : copiedEventObject.club_id ? copiedEventObject.club_id + " - " + copiedEventObject.title : copiedEventObject.title,
                            "choosenUserIdHRMax"        : choosenUserIdHRMax,
                            "choosenUserIdHRRest"       : choosenUserIdHRRest,
                            "choosenUserIdVMASpeed"     : choosenUserIdVMASpeed,
                            "isFromSessionsToolBtn"     : false
                        }

                        params["isCreation"] = true;
                        params["isDropped"] = true;
                        
                        //console.log(params);
                        disableAgenda();
                        showEventFormModal(params);
                        
                },
                events: function(start, end, callback) {
                    if( ajax ) ajax.abort();
                    
                    ajax = $.post(
                        {% if user is defined and user is not null %}
                            Routing.generate('ksAgenda_getEvents', {'id' : "{{ user.id }}"}),
                            {
                                "eventsFrom[]"              : eventsFrom,
                                "eventsTypes[]"             : eventsTypes,
                                "eventsSports[]"            : eventsSports,
                                "eventsCoachingPlans[]"     : eventsCoachingPlans,
                                "start"                     : Math.round(start.getTime() / 1000),
                                "end"                       : Math.round(end.getTime() / 1000)
                            },
                        {% elseif club is defined and club is not null %}
                            Routing.generate('ksAgendaClub_getEvents', {'id' : "{{ club.id }}"}),
                            {
                                //"eventsFrom[]"  : eventsFrom,
                                "eventsTypes[]"             : eventsTypes,
                                "eventsSports[]"            : eventsSports,
                                "eventsUsers[]"             : eventsUsers,
                                "eventsCoachingPlans[]"     : eventsCoachingPlans,
                                "eventsAvailability"        : eventsAvailability,
                                "start"                     : Math.round(start.getTime() / 1000),
                                "end"                       : Math.round(end.getTime() / 1000)
                            },
                        {% endif %}
                        function(events) {
                            ajax = null;
                            callback(events);
                        }
                    );
                },
                
                eventRender: function(event, eventElement) {
                    //eventElement.find('.fc-event-title').prepend("<div class='imageLegend trunc' style=''><img src='{{ asset('img/new.PNG') }}'/></div>");
                    
                    view = calendar.fullCalendar('getView');
                    
                    if (event.difficulty_id) {
                        /*
                        if (event.difficulty_id == 1) eventElement.context.className += ' green';
                        else if (event.difficulty_id == 2) eventElement.context.className += ' orange';
                        else if (event.difficulty_id == 3) eventElement.context.className += ' red';
                        */
                        if (event.difficulty_id == 1) eventElement.addClass('green');
                        else if (event.difficulty_id == 2) eventElement.addClass('orange');
                        else if (event.difficulty_id == 3) eventElement.addClass('red');
                    }
                    
                    $header = "<div id='header_" + event.id + "'>";
                    
                    //Sport
                    if ( event.sport_code && event.sport_code != 'empty') {
                        $header += "<img class='" + (view.name == 'year' ? "img-sport" : "") + " pull-left' src='{{ asset('V2/images/sports/') }}" + event.sport_code + ".png') }}'/>";
                    }
                    else {
                        if (view.name == 'year') $header += "Repos";
                    }
                    
                    if ( event.sport_code == 'empty') {
                        //eventElement.context.className += ' empty'; FMO : 27/01/15 si sport repos on ne tronque plus la taille du bloc car sur certaines séances le libellé est coupé !
                    }
                    
                    if (event.type) {
                        /*switch( event.type ) {
                            case "event_meal":
                                $header += "<span class='pull-right icon-food iconInAgendaEvent'></span>";
                                break;
                            
                            case "event_misc":
                                $header += "<span class='pull-right icon-user iconInAgendaEvent'></span>";
                                break;

                            case "event_competition":
                                $header += "<span class='pull-right icon-trophy iconInAgendaEvent'></span>";
                                break;

                            case "event_training":
                                $header += "<span class='pull-right icon-home iconInAgendaEvent'></span>";
                                eventElement.find('.fc-event-time').remove();
                                break;
                            case "event_coaching":
                                $header += "<span class='pull-right icon-book iconInAgendaEvent'></span>";
                                if (event.eventCompetition) $header += "<span class='pull-right icon-trophy icon-3x'></span>";
                                break;
                             case "event_google":
                                $header += "<span class='pull-left'><img src='{{ asset('img/google.jpg') }}'/></span>";
                                eventElement.find('.fc-event-time').remove();
                                break;
                        }*/
                    }
                    
                    if (event.club_name) {
                        //FMO : avant on affichait le logo du club en petit => remplacé par le logo "new" si nouvelle séance pour l'utilisateur
                        //$header += "<img style='opacity: .5;' class='pull-left' src='{{ asset('img/clubs/') }}" + event.club_id + "/resize_48x48/" + event.avatar + "'/>";
                        /*eventElement.find('.fc-event-inner').prepend(
                            //"(" + event.club_name + ") "
                            "<center><div class='imageLegend trunc'> <span class='text'>" + event.club_name + "</span></div></center></br>"
                        );*/
                    }
                    
                    $title = "<div id='title'>";
                    //if (event.isNew == 1) $header += "<img class='' src='{{ asset('img/new.png') }}'/>";
                    if (event.isWarning == 1) $header += "<span class='glyphicon glyphicon-exclamation-sign'></span>";
                    //$title += "</br>";
                    if (event.type == "event_training" && !event.category) {
                        if (event.description) {
                            //FMO : attention ne pas utiliser $description déjà utilisée sur _eventModalForm.html sinon bug !
                            if (event.description.length > 30) $desc = event.description.substr(0, 30) + "...";
                            else $desc = event.description;
                            if (!event.club_name) {
                                $title += "<i style='font-size:0.8em'>" + $desc + "</i>";
                                if (event.points) $title += " <br><br>";
                            }
                        }
                        if (event.points) $title += "+" + event.points + " points<br>";
                    }
                    if (event.category) {
                        $title += "<b style='font-size:1em'>" + event.category + "</b></br>";
                        if (event.sessionTitle == null) $title += "<i style='font-size:0.8em'>" + event.title + "</i>";
                        else $title += "<i style='font-size:0.8em'>" + event.sessionTitle + "</i>";
                    }
                    else $title += "<i style='font-size:0.8em'>" + event.title + "</i>";
                    $title += "</br>";
                    
                    /*$details = "<div id='details_" + event.id + "' style='display:none'>";
                    if (event.activitySession_id && event.intensity_id && event.duration != '00:00') {
                        switch(event.intensity_id) {
                            case '1' : $details += "<div class='icon-green icon-btn icon-circle icon-2x selected' title='{{'coaching.intensity'|trans}}'></div> "; break;
                            case '2' : $details += "<div class='icon-orange icon-btn icon-circle icon-2x selected' title='{{'coaching.intensity'|trans}}'></div> "; break;
                            case '3' : $details += "<div class='icon-red icon-btn icon-circle icon-2x selected' title='{{'coaching.intensity'|trans}}'></div> "; break;
                        }
                    }
                    if (event.activitySession_id && event.stateOfHealth_id && event.duration != '00:00') {
                        switch(event.stateOfHealth_id) {
                            case '3' : $details += "<div class='icon-green icon-btn icon-smile icon-2x selected' title='{{'coaching.stateOfHealth'|trans}}'></div> "; break;
                            case '2' : $details += "<div class='icon-orange icon-btn icon-meh icon-2x selected' title='{{'coaching.stateOfHealth'|trans}}'></div> "; break;
                            case '1' : $details += "<div class='icon-red icon-btn icon-frown icon-2x selected' title='{{'coaching.stateOfHealth'|trans}}'></div> "; break;
                        }
                    }
                    if (event.coachingPlan_id && event.activitySession_id && event.achievement) {
                        $details +=event.achievement + "/10 ";                        
                    }*/
                    $details = "";
                    if (event.type == "event_coaching" && (event.coachingSession_id || event.eventCompetition) && event.activitySession_id) {
                        $details = "<div id='details'>";
                        if (event.duration == '00:00') $details += "<span class='glyphicon glyphicon-remove'></span> Non réalisé</div>";
                        else $details += "<span class='glyphicon glyphicon-ok'></span> Réalisé</div>";
                    }
                    
                    eventElement.find('.fc-event-inner').prepend($header);
                    if (view.name != 'year') {
                        eventElement.find('.fc-event-title').append($title);
                        eventElement.find('.fc-event-title').append($details);
                    
                        //eventElement.find('.fc-event-inner').append("<span class='plus-event'>+</span>");

                        //Affiche le nombre de participants
                        if (event.maxParticipations && event.usersParticipations) {
                            if (event.maxParticipations) 
                                eventElement.find('.fc-event-title').append("</br><span class='icon-group'> " + event.usersParticipations + " / " + event.maxParticipations + " </span>");
                            else 
                                eventElement.find('.fc-event-title').append("</br><span class='icon-group'> " + event.usersParticipations + " </span>");
                            //eventElement.find('.fc-event-title').append("</center>");
                        }

                        //Lieu (pas nécessaire)
                        /*if ( event.town_label ) {
                            eventElement.find('.fc-event-title').append(
                                "<br><i class='pull-right' style='font-size:0.8em'>à " + event.town_label + "<i> "
                            );
                        }*/ 
                    }
                    else {
                        //On rajoute 25px pour ne pas cacher le numéro du jour...
                        
                    }
                },
                
                eventMouseover: function(event, jsEvent, view) {
                    var contenuSeance="";
                    if (event.activitySession_id) {
                        if (event.duration != '00:00') {
                            if (event.activity_type == "session_endurance_on_earth") {
                                contenuSeance += "\
                                    <div id='tooltip'>\
                                        <p><center>\
                                           <span class='glyphicon glyphicon-time' title='{{ 'activity.duration'|trans }}'></span>&nbsp;" + event.duration + "  \
                                           &nbsp;&nbsp;&nbsp;<span class='glyphicon glyphicon-road' title='{{ 'activity.distance'|trans }}'></span>&nbsp;" + event.distance + "\
                                        </center></p><center>";
                                if (event.elevationGain != '-') contenuSeance +=
                                        "<p>\
                                            <span class='glyphicon glyphicon-circle-arrow-up' title='D+'></span>&nbsp;+" + event.elevationGain;
                                if (event.elevationLost != '-') contenuSeance +=
                                            "&nbsp;&nbsp;&nbsp;<span class='glyphicon glyphicon-circle-arrow-down' title='D-'></span>&nbsp;-" + event.elevationLost;
                                contenuSeance += "</p></center><p> <center> +";
                                if (event.points) contenuSeance += event.points + " POINTS";
                                contenuSeance += "</center></div>";
                            }
                            else if (event.activity_type == "session_team_sport") {
                                contenuSeance += "\
                                    <div id='tooltip'>\
                                        <p>\
                                           <span class='glyphicon glyphicon-time' title='{{ 'activity.duration'|trans }}'></span>&nbsp;" + event.duration + "  \
                                           <img src='{{ asset('bundles/ksactivity/images/whistle_mini.png') }}' title='{{ 'activity.result'|trans }}' /> " + event.result.toUpperCase() + "\
                                        </p>\
                                    </div>";
                            }
                            else {
                                contenuSeance += "\
                                    <div id='tooltip'>\
                                        <p>\
                                           <span class='glyphicon glyphicon-time' title='{{ 'activity.duration'|trans }}'></span>&nbsp;" + event.duration + "  \
                                        </p>\
                                    </div>";
                            }
                        }
                        else {
                            if (event.description) contenuSeance += "<div id='tooltip'><center><b>" + event.description + "</b></center></div>";
                            else contenuSeance += "<div id='tooltip'><center><b>{{ 'coaching.not-done'|trans }}</b></center></div>";
                        }
                    }
                    else if (event.type == 'event_coaching' ) { //&& event.coachingSession_id) { FMO : 260115 pour permettre l'affichage du tooltip sur une compét
                        if ( event.sport_code != 'empty') {
                            
                            var sDuration = "";
                            if (event.eventDurationMin && event.eventDurationMax && event.eventDurationMin != event.eventDurationMax) sDuration = "{{ 'coaching.between'|trans }} " + event.eventDurationMin + " {{ 'coaching.and'|trans }} " + event.eventDurationMax;
                            else if (event.eventDurationMin) sDuration = event.eventDurationMin;
                            else if (event.eventDurationMax) sDuration = event.eventDurationMax;
                            
                            var sDistance = "";
                            if (event.eventDistanceMin && event.eventDistanceMax && event.eventDistanceMin != event.eventDistanceMax) sDistance = "{{ 'coaching.between'|trans }} " + Math.round(event.eventDistanceMin) + " {{ 'coaching.and'|trans }} " + Math.round(event.eventDistanceMax);
                            else if (event.eventDistanceMin) sDistance = Math.round(event.eventDistanceMin);
                            else if (event.eventDistanceMax) sDistance = Math.round(event.eventDistanceMax);
                            
                            var sElevationGain = "";
                            if (event.eventElevationGainMin && event.eventElevationGainMax && event.eventElevationGainMin != event.eventElevationGainMax) sElevationGain = "{{ 'coaching.between'|trans }} +" + event.eventElevationGainMin + " {{ 'coaching.and'|trans }} +" + event.eventElevationGainMax;
                            else if (event.eventElevationGainMin) sElevationGain = "+" + event.eventElevationGainMin;
                            else if (event.eventElevationGainMax) sElevationGain = "+" + event.eventElevationGainMax;
                            
                            var sElevationLost = "";
                            if (event.eventElevationLostMin && event.eventElevationLostMax && event.eventElevationLostMin != event.eventElevationLostMax) sElevationLost = "{{ 'coaching.between'|trans }} -" + event.eventElevationLostMin + " {{ 'coaching.and'|trans }} -" + event.eventElevationLostMax;
                            else if (event.eventElevationLostMin) sElevationLost = "-" + event.eventElevationLostMin;
                            else if (event.eventElevationLostMax) sElevationLost = "-" + event.eventElevationLostMax;
                            
                            var sPow = "";
                            if (event.eventPowMin && event.eventPowMax && event.eventPowMin != event.eventPowMax) sPow = "{{ 'coaching.between'|trans }} " + event.eventPowMin + " {{ 'coaching.and'|trans }} " + event.eventPowMax;
                            else if (event.eventPowMin) sPow = "-" + event.eventPowMin;
                            else if (event.eventPowMax) sPow = "-" + event.eventPowMax;
                            
                            var sHr = "";
                            //FIXME : pour l'instant userId n'est pas alimenté au niveau de l'event pour gérer le cas d'un event avec plusieurs participants donc event.HRMax ne ramène rien...
                            if (event.eventHrCoeffMin && event.eventHrCoeffMax && choosenUserIdHRMax !=0 && choosenUserIdHRRest !=0 ) {
                                if (choosenUserIdHRMax == -1) sHr = "{{ 'coaching.HRMaxRequired'|trans }}";
                                else if (choosenUserIdHRRest == -1) sHr = "{{ 'coaching.HRRestRequired'|trans }}";
                                else {
                                    if (event.eventHrType == 0) {
                                        if (event.eventHrCoeffMin != event.eventHrCoeffMax ) sHr = "{{ 'coaching.between'|trans }} " + Math.round(event.eventHrCoeffMin /100 * choosenUserIdHRMax) + " {{ 'coaching.and'|trans }} " + Math.round(event.eventHrCoeffMax /100 * choosenUserIdHRMax) + " bpm";
                                        else sHr = Math.round(event.eventHrCoeffMin /100 * choosenUserIdHRMax) + " bpm";
                                    }
                                    else if (event.eventHrType == 1) {
                                        if (event.eventHrCoeffMin != event.eventHrCoeffMax ) sHr = "{{ 'coaching.between'|trans }} " + Math.round(event.eventHrCoeffMin /100 * (choosenUserIdHRMax - choosenUserIdHRRest) + choosenUserIdHRRest) + " {{ 'coaching.and'|trans }} " + Math.round(event.eventHrCoeffMax /100 * (choosenUserIdHRMax - choosenUserIdHRRest) + choosenUserIdHRRest) + " bpm";
                                        else sHr = Math.round(event.eventHrCoeffMin /100 * (choosenUserIdHRMax - choosenUserIdHRRest) + choosenUserIdHRRest) + " bpm";
                                    }
                                }
                            }
                            
                            var sInterval = "";
                            if (event.eventVMACoeff) {
                                if (choosenUserIdVMASpeed == -1) sInterval = "{{ 'coaching.VMASpeedRequired'|trans }}";
                                else {
                                    if (event.eventIntervalDuration && event.eventIntervalDistance ) {
                                        sInterval = "{#{ 'coaching.interval'|trans }#}" + event.eventIntervalDistance + " m en " + event.eventIntervalDuration + " à " + Math.round(event.eventVMACoeff * choosenUserIdVMASpeed)/100 + " km/h";
                                    }
                                    else if (event.eventIntervalDuration) {
                                        sInterval = event.eventIntervalDuration + " à " + Math.round(event.eventVMACoeff * choosenUserIdVMASpeed)/100 + " km/h";
                                    }
                                    else sInterval = "à " + Math.round(event.eventVMACoeff * choosenUserIdVMASpeed)/100 + " km/h";
                                }
                            }
                            
                            contenuSeance += "<div id='tooltip'>";
                            if (sDuration != "")
                                contenuSeance +="\
                                    <p>\
                                        <center>\
                                            <span class='glyphicon glyphicon-time'></span>&nbsp;" + sDuration + "\
                                        </center>\
                                    </p>";
                            if (sHr != "") 
                                contenuSeance += "\
                                    <p>\
                                        <center>\
                                            <span class='glyphicon glyphicon-heart'></span>&nbsp;" + sHr + "\
                                        </center>\
                                    </p>";
                            if (sDistance != "") 
                                contenuSeance += "\
                                    <p>\
                                        <center>\
                                            <span class='glyphicon glyphicon-road'></span>&nbsp;" + sDistance + "km\
                                        </center>\
                                    </p>";
                            if (sElevationGain != "") 
                                contenuSeance += "\
                                    <p>\
                                        <center>\
                                            <span class='glyphicon glyphicon-circle-arrow-up'></span>&nbsp;" + sElevationGain + "m\
                                        </center>\
                                    </p>";
                            if (sElevationLost != "") 
                                contenuSeance += "\
                                    <p>\
                                        <center>\
                                            <span class='glyphicon glyphicon-circle-arrow-down'></span>&nbsp;" + sElevationLost + "m\
                                        </center>\
                                    </p>";
                            if (sPow != "") 
                                contenuSeance += "\
                                    <p>\
                                        <center>\
                                            <span class='glyphicon glyphicon-flash'></span>&nbsp;" + sPow + "W\
                                        </center>\
                                    </p>";
                            if (sInterval != "") 
                                contenuSeance += "\
                                    <p>\
                                        <center>\
                                            <span class='glyphicon glyphicon-info-sign'></span>&nbsp;" + sInterval + "\
                                        </center>\
                                    </p>";
                        }
                        {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and (club is defined and club is not null or user is defined and user is not null and app.user.id == user.id) %}
                            if (event.content) {
                                $sessionDetail = event.content;
                                contenuSeance += "<p class='sessionDetail'>" + $sessionDetail.replace(/\n/g,"<br>");
                            }
                            /*
                             if (event.eventSessionDetail && event.content) {
                                $content = event.content;
                                contenuSeance += "</p><p><u>Remarque</u> : " + $content.replace(/\n/g,"<br>");
                            }
                            */
                        {% endif %}
                        contenuSeance += "</p></div>";
                    }
                    //var contenuSeance=event.duration.split("\n").join('<br>');
                    
                    //console.log(contenuSeance);
				
                    //var tooltip = '<div class="tooltipevent" style="width:auto;height:auto;background:#ffcc00;-moz-border-radius:5px;-webkit-border-radius: 5px;padding:5px;font-family: Arial,Verdana,sans-serif;position:absolute;z-index:10001;">' + contenuSeance +'</div>';
                    var tooltip = '<div class="tooltipevent">' + contenuSeance +'</div>';
                    
                    if (contenuSeance != "</p></div>") $("body").append(tooltip);
                    
                    $(this).mouseover(function(e) {
                        $(this).css('z-index', 10000);
                        $('.tooltipevent').fadeIn('500');
                        $('.tooltipevent').fadeTo('10', 1.9);
                    }).mousemove(function(e) {
                        $('.tooltipevent').css('top', e.pageY + 25);
                        $('.tooltipevent').css('left', e.pageX - 90);
                    });
                },
                
		eventMouseout: function(event,jsEvent) {
                    $(this).css('z-index', 8);
                    $('.tooltipevent').remove();
		},
                
                //Création d'événement
                {% if club is defined and club is not null and isManager %}
                    select: function(start, end, allDay) {
                        //console.log(allDay)
                        var params = {
                            "startDate"             : start,
                            "endDate"               : end,
                            "allDay"                : allDay,
                            "isCreation"            : true,
                            "clubId"                : "{{ club.id }}",
                            "isPublic"              : false,
                            "modalTitle"            : "{{ 'coaching.create-event'|trans }}",
                            "choosenUserIdHRMax"    : choosenUserIdHRMax,
                            "choosenUserIdHRRest"   : choosenUserIdHRRest,
                            "choosenUserIdVMASpeed" : choosenUserIdVMASpeed,
                            "isFromSessionsToolBtn" : false
                        };
                        showEventFormModal(params);
                    },
                {% endif %}
                
                {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and app.user.id == user.id and isManagerFromAClub > 0 %}
                    select: function(start, end, allDay) {
                        //En vue tableau de bord user, si le plan est de type coach ou partagé on ne permet pas la modif d'un event
                        $planId = $("#ksCoachingPlanType_name").val();
                        if (coachingPlansData[$planId]['type'] == 'user') {
                            var params = {
                                "startDate"             : start,
                                "endDate"               : end,
                                "allDay"                : allDay,
                                "isCreation"            : true,
                                "userId"                : "{{ app.user.id }}",
                                "isPublic"              : true,
                                "modalTitle"            : "{{ 'coaching.create-event'|trans }}",
                                "choosenUserIdHRMax"    : choosenUserIdHRMax,
                                "choosenUserIdHRRest"   : choosenUserIdHRRest,
                                "choosenUserIdVMASpeed" : choosenUserIdVMASpeed,
                                "isFromSessionsToolBtn" : false
                            }
                            showEventFormModal(params);
                        }
                    },
                {% endif %}
                //Clic sur un événement
                eventClick: function(event) {
                    
                    //Si l'événement dure 1 jour, il n'y a pas de end
                    if ( ! event.end ) event.end = event.start;

                    //console.log(event.maxParticipations);
                    var params = {
                        "isDropped"                 : false,
                        "startDate"                 : event.start,
                        "endDate"                   : event.end,
                        "allDay"                    : event.allDay,
                        "id"                        : event.id,
                        "title"                     : event.title,
                        "content"                   : event.content,
                        "type"                      : event.type,
                        "clubId"                    : event.club_id,
                        "userId"                    : event.user_id,
                        "isPublic"                  : event.isPublic,
                        "isWarning"                 : event.isWarning,
                        "coachingPlanId"            : event.coachingPlan_id,
                        "coachingCategoryId"        : event.coachingCategory_id,
                        "coachingSessionId"         : event.coachingSession_id,
                        "sessionTitle"              : event.sessionTitle,
                        "coachingDistanceMin"       : event.coachingDistanceMin,
                        "coachingDistanceMax"       : event.coachingDistanceMax,
                        "coachingDurationMin"       : event.coachingDurationMin,
                        "coachingDurationMax"       : event.coachingDurationMax,
                        "coachingElevationGainMin"  : event.coachingElevationGainMin,
                        "coachingElevationGainMax"  : event.coachingElevationGainMax,
                        "coachingElevationLostMin"  : event.coachingElevationLostMin,
                        "coachingElevationLostMax"  : event.coachingElevationLostMax,
                        "coachingSpeedAverageMin"   : event.coachingSpeedAverageMin,
                        "coachingSpeedAverageMax"   : event.coachingSpeedAverageMax,
                        "coachingPowMin"            : event.coachingPowMin,
                        "coachingPowMax"            : event.coachingPowMax,
                        "coachingHrCoeffMin"        : event.coachingHrCoeffMin,
                        "coachingHrCoeffMax"        : event.coachingHrCoeffMax,
                        "coachingHrType"            : event.coachingHrType,
                        "coachingIntervalDistance"  : event.coachingIntervalDistance,
                        "coachingIntervalDuration"  : event.coachingIntervalDuration,
                        "coachingVMACoeff"          : event.coachingVMACoeff,
                        "eventCompetition"          : event.eventCompetition,
                        "eventDistanceMin"          : event.eventDistanceMin,
                        "eventDistanceMax"          : event.eventDistanceMax,
                        "eventDurationMin"          : event.eventDurationMin,
                        "eventDurationMax"          : event.eventDurationMax,
                        "eventElevationGainMin"     : event.eventElevationGainMin,
                        "eventElevationGainMax"     : event.eventElevationGainMax,
                        "eventElevationLostMin"     : event.eventElevationLostMin,
                        "eventElevationLostMax"     : event.eventElevationLostMax,
                        "eventSpeedAverageMin"      : event.eventSpeedAverageMin,
                        "eventSpeedAverageMax"      : event.eventSpeedAverageMax,
                        "eventPowMin"               : event.eventPowMin,
                        "eventPowMax"               : event.eventPowMax,
                        "eventHrCoeffMin"           : event.eventHrCoeffMin,
                        "eventHrCoeffMax"           : event.eventHrCoeffMax,
                        "eventHrType"               : event.eventHrType,
                        "eventIntervalDistance"     : event.eventIntervalDistance,
                        "eventIntervalDuration"     : event.eventIntervalDuration,
                        "eventVMACoeff"             : event.eventVMACoeff,
                        "sportId"                   : event.sport_id,
                        "maxParticipations"         : event.maxParticipations,
                        "usersParticipate"          : event.usersParticipate,
                        "activitySessionId"         : event.activitySession_id,
                        "difficultyId"              : event.difficulty_id,
                        "modalTitle"                : event.club_id ? event.club_name + " - " + event.title : event.title,
                        "choosenUserIdHRMax"        : choosenUserIdHRMax,
                        "choosenUserIdHRRest"       : choosenUserIdHRRest,
                        "choosenUserIdVMASpeed"     : choosenUserIdVMASpeed,
                        "isFromSessionsToolBtn"     : false
                    }

                    $isManager = {% if isManager is defined and isManager %} true {% else %} false {% endif %};
                    params["isManager"] = $isManager;

                    params["isUser"] = {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id == app.user.id %} 1 {% else %} 0 {% endif %};

                    {% if club is defined and club is not null %}
                        //Si une activité est liée à l'événement on ne permet pas la modif
                        if (event.activitySession_id == null &&  $isManager || event.type == 'event_training' && !$isManager) params["isEdition"] = true;
                        else params["isShow"] = true;

                        showEventFormModal(params);
                    {% endif %}

                    {% if user is defined and user is not null %}
                        //En vue tableau de bord user, si le plan est de type partagé on n'ouvre pas la la modal
                        $planId = $("#ksCoachingPlanType_name").val();
                        //console.log($planId);
                        if ($planId === undefined || $planId == null || $planId !== undefined && $planId !=null && coachingPlansData[$planId]['type'] != 'shared') {
                            //Si une activity est liée à un event, c'est qu'on est sur un plan d'entrainement donc on n'affiche pas la boite de dialogue qui permet de modifier/supprimer l'event
                            //var now = new Date();
                            if (event.club_id !=null && event.coachingPlan_id == null && event.type != "event_google") params["isEdition"] = true;
                            else params["isShow"] = true;

                            if (event.activitySession_id == null || event.activitySession_id != null && event.coachingSession_id && event.type != "event_training") showEventFormModal(params);
                            else document.location.href = Routing.generate('ksActivity_showActivity', {'activityId' : event.activitySession_id});
                        }
                    {% endif%}
                },
                
                //Déplacement d'un événement
                eventDrop: function(event,dayDelta,minuteDelta,allDay,revertFunc) {
                    if (event.activitySession_id == null) {
                        {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and (club is defined and club is not null and isManager or user is defined and user is not null and app.user.id == user.id ) %}
                            if ( event.type == 'event_meal' && event.club_id == null  && event.type != 'event_google') {
                                disableAgenda();
                                $.post(
                                    Routing.generate('ksAgenda_moveOrResizeEvent', {'id' : event.id}), 
                                    {
                                        "dayDelta"      : dayDelta,
                                        "minuteDelta"   : minuteDelta,
                                        "allDay"        : allDay,
                                        "isMove"        : true,
                                    },
                                    function(response) {
                                        enableAgenda();
                                    }
                                );
                            }
                            else if (event.type == 'event_coaching' && event.type != 'event_google') {
                                var callbackButton1 = function () {
                                    //$("#agenda").html('<img id="loader" src="{{ asset('img/loader_ks_16.gif') }}" alt="loader">');
                                    /* for "disabled" effect */
                                    disableAgenda();
                                    $.post(
                                        Routing.generate('ksAgenda_moveOrResizeEvent', {'id' : event.id}), 
                                        {
                                            "dayDelta"      : dayDelta,
                                            "minuteDelta"   : minuteDelta,
                                            "allDay"        : allDay,
                                            "isMove"        : true,
                                        },
                                        function(response) {
                                            if (response.code == -1) showInformation("{{ 'coaching.move-premium-forbidden'|trans|raw }}");
                                            calendar.fullCalendar('refetchEvents');
                                            $("#multipleChoicesModal").modal('hide');
                                            setTimeout(enableAgenda, 1000);
                                        }
                                    );
                                };
                                var callbackButton2 = function () {
                                    disableAgenda();
                                    $.post(
                                        Routing.generate('ksAgenda_duplicateEvent', {'id' : event.id}), 
                                        {
                                            "dayDelta"      : dayDelta,
                                            "minuteDelta"   : minuteDelta,
                                            "allDay"        : allDay,
                                            "isMove"        : true,
                                        },
                                        function(response) {
                                            if (response.code == -1) showInformation("{{ 'coaching.duplicate-premium-forbidden'|trans|raw }}");
                                            calendar.fullCalendar('refetchEvents');
                                            $("#multipleChoicesModal").modal('hide'); 
                                            setTimeout(enableAgenda, 2000);
                                        }
                                    );
                                };
                                
                                
                                var callbackButton3 = function() {
                                    if (event.coachingPlan_id) {
                                        disableAgenda();
                                        $.post(
                                            Routing.generate('ksAgenda_duplicateEvents', {'id' : event.id}), 
                                            {
                                                "dayDelta"      : dayDelta,
                                                "minuteDelta"   : minuteDelta,
                                                "allDay"        : allDay,
                                                "isMove"        : true,
                                            },
                                            function(response) {
                                                if (response.code == -1) showInformation("{{ 'coaching.duplicate-premium-forbidden'|trans|raw }}");
                                                if (response.code == -2) showInformation('{{ 'coaching.move-not-allowed'|trans }}');
                                                calendar.fullCalendar('refetchEvents');
                                                $("#multipleChoicesModal").modal('hide'); 
                                                setTimeout(enableAgenda, 3000);
                                            }
                                        );
                                    }
                                    else {
                                        showInformation('{{ 'coaching.choose-at-least-1-plan'|trans }}');
                                    }
                                }
                                
                                $('.tooltipevent').remove();
                                askMultipleChoices('{{ 'coaching.duplicate-message'|trans|raw }}', '{{ 'coaching.move'|trans }}', '{{ 'coaching.duplicate-session'|trans }}', '{{ 'coaching.move-mass'|trans }}', calendar, callbackButton1, callbackButton2, callbackButton3);
                            }
                            else {
                                showInformation("{{ 'coaching.message-eventDrop'|trans }}");
                                calendar.fullCalendar('refetchEvents');
                            }
                        {% else %}
                            showInformation("{{ 'coaching.message-eventDrop'|trans }}");
                            calendar.fullCalendar('refetchEvents');
                        {% endif %}
                    }
                    else {
                        showInformation("{{ 'coaching.message-eventDrop'|trans }}");
                        calendar.fullCalendar('refetchEvents');
                    }
                },
                //Resize sur un événement
                eventResize: function(event,dayDelta,minuteDelta,revertFunc) {
                    if (event.activitySession_id == null) {
                        {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and club is defined and club is not null and isManager %}
                            if(event.id && event.type != 'event_google'){
                                $.post(
                                    Routing.generate('ksAgenda_moveOrResizeEvent', {'id' : event.id}), 
                                    {
                                        "dayDelta"      : dayDelta,
                                        "minuteDelta"   : minuteDelta,
                                        "isMove"        : false
                                    },
                                    function(response) {
                                    }
                                );
                            }
                            else {
                                showInformation("{{ 'coaching.message-eventDrop'|trans }}");
                                calendar.fullCalendar('refetchEvents');
                            }
                        {% elseif is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and app.user.id == user.id %}
                            if (event.type == 'event_coaching' && event.club_id == null && event.type != 'event_google' || event.type == 'event_meal' && event.club_id == null && event.type != 'event_google') {
                                $.post(
                                    Routing.generate('ksAgenda_moveOrResizeEvent', {'id' : event.id}), 
                                    {
                                        "dayDelta"      : dayDelta,
                                        "minuteDelta"   : minuteDelta,
                                        "isMove"        : false
                                    },
                                    function(response) {
                                    }
                                );
                            }
                            else {
                                showInformation("{{ 'coaching.message-eventResize'|trans }}");
                                calendar.fullCalendar('refetchEvents');
                            }
                        {% else %}
                            showInformation("{{ 'coaching.message-eventResize'|trans }}");
                            calendar.fullCalendar('refetchEvents');
                        {% endif %}
                    }
                    else {
                        showInformation("{{ 'coaching.message-eventResize'|trans }}");
                        calendar.fullCalendar('refetchEvents');
                    }
                }
            });
            
            //FMO : gestion bug affichage fullcalendar selon les navigateurs...
            if (!!navigator.userAgent.match(/Version\/[\d\.]+.*Safari/)) {
                $('#gutter1').remove();
                $('#gutter2').remove();
            }
            else {
                if (navigator.userAgent.indexOf('Firefox')) {
                    $('#gutter1').hide();
                    $('#gutter2').hide();
                }
                if (navigator.userAgent.indexOf('Chrome') || navigator.userAgent.indexOf('MSIE')) {
                    $('#gutter1').hide();
                    $('#gutter2').hide();
                }
            }
            
            //filtre type
            $("#eventsTypesSelect").multiselect({
                buttonClass: 'btn btn-link',
                buttonText: function(options) {
                    if (options.length == 0) {
                        return '{{ 'coaching.types'|trans }} <b class="caret"></b>';
                    }else {
                        var selected = '';
                        options.each(function() {
                            selected += $(this).text() + ', ';
                        });
                        return selected.substr(0, selected.length -2) + ' <b class="caret"></b>';
                    }
                },
                onChange:function(element, checked){
                    eventsTypes = $("#eventsTypesSelect").val();
                    calendar.fullCalendar('refetchEvents');
                    reDrawGraph();
                }
            });
            
            //filtre sports
            $("#ksSportTypeMultiSimple_sport").multiselect({
                includeSelectAllOption: false,
                buttonClass: 'btn btn btn-link',
                buttonText: function(options) {
                    if (options.length == 0) {
                        return '{{ "news-feed.sports"|trans }} <b class="caret"></b>';
                    }else {
                        var selected = '';
                        options.each(function() {
                            selected += $(this).text() + ', ';
                        });
                        return selected.substr(0, selected.length -2) + ' <b class="caret"></b>';
                    }
                },
                onChange:function(element, checked){
                    eventsSports = $("#ksSportTypeMultiSimple_sport").val();
                    calendar.fullCalendar('refetchEvents');
                    reDrawGraph();
                }
            });
            
            var coachingPlansData = new Array();
            var membersData = new Array();
            {% for coachingPlanData in coachingPlansData %}
                coachingPlansData[{{ coachingPlanData.id }}] = new Array();
                coachingPlansData[{{ coachingPlanData.id }}]['startDate'] = '{{ coachingPlanData.startDate }}';
                coachingPlansData[{{ coachingPlanData.id }}]['endDate'] = '{{ coachingPlanData.endDate }}';
                coachingPlansData[{{ coachingPlanData.id }}]['type'] = '{{ coachingPlanData.type }}';
                
                {% if coachingPlanData.userId is defined and coachingPlanData.userId is not null %}
                    membersData[{{coachingPlanData.userId}}] = new Array();
                    membersData[{{coachingPlanData.userId}}]['planId'] = {{ coachingPlanData.id }};
                    membersData[{{coachingPlanData.userId}}]['startDate'] = '{{ coachingPlanData.startDate }}';
                    membersData[{{coachingPlanData.userId}}]['endDate'] = '{{ coachingPlanData.endDate }}';
                    membersData[{{coachingPlanData.userId}}]['type'] = '{{ coachingPlanData.type }}';
                {% endif %}
            {% endfor %}
            
            //Filtre membre
            {% if club is defined and club is not null %}
                $("#ksClub_ClubHasUsersType_user").multiselect({
                    includeSelectAllOption: false,
                    buttonClass: 'btn btn btn-link members',
                    buttonText: function(options) {
                        if (options.length == 0) {
                            return '{{ 'coaching.members'|trans }} <b class="caret"></b>';
                        }else {
                            var selected = '';
                            options.each(function() {
                                selected += $(this).text() + ', ';
                            });
                            return selected.substr(0, selected.length -2) + ' <b class="caret"></b>';
                        }
                    },
                    onChange:function(element, checked){
                        $("#ksClub_ClubHasUsersType_user  > option").removeAttr('selected');
                        $("#ksClub_ClubHasUsersType_user").multiselect('refresh');
                        $("#ksClub_ClubHasUsersType_user > option[value="+element.val()+"]").attr("selected", "selected");
                        $("#ksClub_ClubHasUsersType_user").multiselect('refresh');
                        $("#ksClub_ClubHasUsersType_user").multiselect('rebuild');
                        KPIalreadyDisplayed = false;
                
                        eventsUsers = $("#ksClub_ClubHasUsersType_user").val();
                        calendar.fullCalendar('refetchEvents');
                        updatePlanFromMembers();
                        $member = $("#ksClub_ClubHasUsersType_user").val();
                        if ($member != null && $member.length == 1) {
                            reDrawGraph();
                        }
                        else {
                            $("#flatViewContainer").html("");
                            $("#KPIDetailsContainer").html("");
                        }
                    }
                });
            {% endif %}
            
            //Filtre Plan
            $('#ksCoachingPlanType_name option:eq(0)').remove();
            $("#ksCoachingPlanType_name").multiselect({
                includeSelectAllOption: false,
                buttonClass: 'btn btn-link coachingPlan',
                buttonText: function(options) {
                    if (options.length == 0) {
                        {% set label = 'coaching.attach'|trans %}
                        return ' {{ label }} <b class="caret"></b>';
                    }else {
                        var selected = '';
                        options.each(function() {
                            selected += $(this).text() + ', ';
                        });
                        return selected.substr(0, selected.length -2) + ' <b class="caret"></b>';
                    }
                },
                onChange:function(element, checked){
                    if (checked) {
                        $("#ksCoachingPlanType_name  > option").removeAttr('selected');
                        $("#ksCoachingPlanType_name").multiselect('refresh');
                        $("#ksCoachingPlanType_name > option[value="+element.val()+"]").attr("selected", "selected");
                        $("#ksCoachingPlanType_name").multiselect('refresh');
                        $("#ksCoachingPlanType_name").multiselect('rebuild');
                        eventsCoachingPlans = element.val();
                    }
                    else {
                        //Pour gérer le cas ou on veut décocher un plan pour ne pas filtrer dessus
                        eventsCoachingPlans = -1;
                    }
                    
                    KPIalreadyDisplayed = false;
        
                    calendar.fullCalendar('refetchEvents');
                    $clubId =null;
                    {% if club is defined and club is not null %} 
                        $clubId = {{ club.id }}; 
                        $member = $("#ksClub_ClubHasUsersType_user").val();
                        if ($member != null && $member.length == 1) {
                            reDrawGraph();
                        }
                        else {
                            $("#flatViewContainer").html("");
                            $("#KPIDetailsContainer").html("");
                        }
                    {% elseif user is defined and user is not null %}
                        reDrawGraph();
                    {% endif %}
                }
            });
            
            function updatePlanFromMembers() {
                //Sélectionne le plan de type "suivi" en fonction du membre sélectionné (cas d'un coach vers un coaché)
                $("#ksCoachingPlanType_name  > option").removeAttr('selected');
                $("#ksCoachingPlanType_name").multiselect('refresh');
                $userId = $("#ksClub_ClubHasUsersType_user").val();
                if ($userId != null && $userId.length == 1 && membersData[$userId] != null) {
                    $("#ksCoachingPlanType_name > option[value="+membersData[$userId]['planId']+"]").attr("selected", "selected");
                    eventsCoachingPlans = $("#ksCoachingPlanType_name").val();
                    //$('#agenda').fullCalendar( 'gotoDate', new Date(membersData[$userId]['endDate']));
                    calendar.fullCalendar( 'gotoDate', new Date());
                    $("#ksCoachingPlanType_name").multiselect('refresh');
                }
                else {
                    eventsCoachingPlans = $("#ksCoachingPlanType_name").val();
                    calendar.fullCalendar('refetchEvents');
                    calendar.fullCalendar( 'gotoDate', new Date());
                }
            }
            
            $("#ksCoachingPlanType_name  > option").removeAttr('selected');
            {#% if newPlanId is defined and newPlanId is not null %} 
                $("#ksCoachingPlanType_name > option[value={{ newPlanId }}]").attr("selected", "selected");
                eventsCoachingPlans = $("#ksCoachingPlanType_name").val();
                calendar.fullCalendar( 'gotoDate', new Date(coachingPlansData[{{ newPlanId }}]['startDate']));
            {% endif %#}
            $("#ksCoachingPlanType_name").multiselect('refresh');
                        
            {% if club is defined and club is not null %}
                //filtre disponibilité
                $("#sortByAll").click(function() {
                    eventsAvailability = 'all';
                    calendar.fullCalendar('refetchEvents');
                });

                $("#sortByAvailable").click(function() {
                    eventsAvailability = 'available';
                    calendar.fullCalendar('refetchEvents');
                });

                $("#sortByFull").click(function() {
                    eventsAvailability = 'full';
                    calendar.fullCalendar('refetchEvents');
                });
                
                //Envoi mail à tous les membres du club
                $("#bSendMailToAll").click(function() {
                    if( !$("#bSendMailToAll").hasClass("disabled") ) {
                        $("#bSendMailToAll").addClass("disabled");
                        document.location.href=Routing.generate('ksMessage_club_new', { 'clubId' : {{ club.id }} });
                     }
                });
                
                $("#ksClub_ClubHasUsersType_user > option").removeAttr('selected');
                $("#ksClub_ClubHasUsersType_user").multiselect('refresh');
            {% endif %}
            
            $("#addFriendBtn").click(function() {
                if( !$("#addFriendBtn").hasClass("disabled") ) {
                    $("#addFriendBtn").addClass("disabled");
                }
            });
            $("#cancelFriendBtn").click(function() {
                if( !$("#cancelFriendBtn").hasClass("disabled") ) {
                    $("#cancelFriendBtn").addClass("disabled");
                }
            });
            $("#acceptFriendBtn").click(function() {
                if( !$("#acceptFriendBtn").hasClass("disabled") ) {
                    $("#acceptFriendBtn").addClass("disabled");
                }
            });
            $("#denyFriendBtn").click(function() {
                if( !$("#denyFriendBtn").hasClass("disabled") ) {
                    $("#denyFriendBtn").addClass("disabled");
                }
            });
            $("#deleteFriendBtn").click(function() {
                if( !$("#deleteFriendBtn").hasClass("disabled") ) {
                    $("#deleteFriendBtn").addClass("disabled");
                }
            });
            
            $("#bGoToStartDatePlan").click(function() {
                var planId = $("#ksCoachingPlanType_name").val();
                if (planId) {
                    var date = new Date(coachingPlansData[planId]['startDate']);
                    calendar.fullCalendar( 'gotoDate', date);
                }
                else {
                    showInformation('{{ 'coaching.choose-at-least-1-plan'|trans }}');
                }
            });
            $("#bGoToEndDatePlan").click(function() {
                var planId = $("#ksCoachingPlanType_name").val();
                if (planId) {
                    var date = new Date(coachingPlansData[planId]['endDate']);
                    calendar.fullCalendar( 'gotoDate', date);
                }
                else {
                    showInformation('{{ 'coaching.choose-at-least-1-plan'|trans }}');
                }
            });

            {% if user is defined and user is not null %} 
                $("#bShowAllPlans").click(function() {
                    if( !$("#bShowAllPlans").hasClass("disabled") ) {
                        $("#bShowAllPlans").addClass("disabled");
                        document.location.href = Routing.generate('ksWikisport_index');
                    }
                });
                //Partage d'un plan
                $("#bSharePlan").click(function() {
                    if( !$("#bSharePlan").hasClass("disabled") ) {
                        $planId = $("#ksCoachingPlanType_name").val();
                        if (coachingPlansData[$planId]['type'] == "shared") {
                            showInformation('{{ 'coaching.already-shared'|trans }}');
                        }
                        else {
                            $("#bSharePlan").addClass("disabled");
                            $("#coachingPlanModalLoader").show();
                            if ($("#ksCoachingPlanType_name").val() == null) {
                                showInformation('{{ 'coaching.choose-at-least-1-plan'|trans }}');
                                $("#bSharePlan").removeClass("disabled");
                                $("#coachingPlanModalLoader").hide();
                            }
                            else {
                                if ($("#ksCoachingPlanType_name").val().length != 1) { 
                                    showInformation('{{ 'coaching.only-1-plan'|trans }}');
                                    $("#bSharePlan").removeClass("disabled");
                                    $("#coachingPlanModalLoader").hide();
                                }
                                else {
                                    
                                    //Test de la durée du plan (minimum 3 semaines pour être partagé en premium
                                    $.post(
                                        Routing.generate('ksCoaching_isLengthPlanValid', { "planId" : $planId }), 
                                        {
                                        },
                                        function(response) {
                                            if( response.response == 1 ) {
                                                if (coachingPlansData[$planId]['type'] != 'coach') {
                                                    $label = $("#ksCoachingPlanType_name option:selected").text();
                                                    $category = 3; //Plan d'entrainement
                                                    $.post(
                                                        Routing.generate('ksArticle_create', { "categoryId" : 3}), 
                                                        $("#fArticleForm").serialize() + "&ks_activitybundle_articletype[label]="+ $label + "&ks_activitybundle_articletype[categoryTag]="+ $category + "&userId="+ {{ user.id }} + "&planId=" + $planId,
                                                        function(response) {
                                                            if ( response.response == 1 ) {
                                                                $activityId = response.article.id;
                                                                $.post(
                                                                    Routing.generate('ksCoaching_sharePlan', { "planId" : $planId }), 
                                                                    {
                                                                    },
                                                                    function(response) {
                                                                        if( response.response == 1 ) {
                                                                            showInformation('{{ 'coaching.plan-successfully-shared'|trans }}');
                                                                            document.location.href=Routing.generate('ksWikisport_show', { "id" :  $activityId  });
                                                                        }
                                                                    }
                                                                 );
                                                            } else {
                                                                if (response.errors['label'][0] == 'Cet article existe déjà') showInformation('{{ 'coaching.label-already-used'|trans }}');
                                                                else showInformation('{{ 'coaching.error'|trans }}');
                                                                $("#bSharePlan").removeClass("disabled");
                                                                $("#coachingPlanModalLoader").hide();
                                                            }
                                                        }
                                                    );
                                                }
                                                else {
                                                    //Cas d'une tentative de partage d'un plan de type coach
                                                    showInformation('{{ 'coaching.share-only-user-plan'|trans }}');
                                                    $("#bSharePlan").removeClass("disabled");
                                                    $("#coachingPlanModalLoader").hide();
                                                }

                                            }
                                            else {
                                                showInformation('{{ 'coaching.share-plan-with-valid-length'|trans( { '%weeks%' : weeksLengthPlan } ) }}');
                                                $("#bSharePlan").removeClass("disabled");
                                                $("#coachingPlanModalLoader").hide();
                                            }
                                        }
                                     );
                                }
                            }
                        }
                    }
                });
            
                $("#bGoogleAgendaSync").click(function() {
                    showInformation("Bientôt disponible !");
                    /*document.location.href = Routing.generate('ks_set_services');
                    $("#bGoogleAgendaSync").addClass("disabled");*/
                });
            {% endif %}
                
            $("#bDeletePlan").click(function() {
                if( !$("#bDeletePlan").hasClass("disabled") ) {
                    $("#bDeletePlan").addClass("disabled");
                    $("#coachingPlanModalLoader").show();
                    if ($("#ksCoachingPlanType_name").val() == null) {
                        showInformation('{{ 'coaching.choose-at-least-1-plan'|trans }}');
                        $("#bDeletePlan").removeClass("disabled");
                        $("#coachingPlanModalLoader").hide();
                    }
                    else {
                        if ($("#ksCoachingPlanType_name").val().length != 1) { 
                            showInformation('{{ 'coaching.only-1-plan'|trans }}');
                            $("#bDeletePlan").removeClass("disabled");
                            $("#coachingPlanModalLoader").hide();
                        }
                        else {
                            $planId = $("#ksCoachingPlanType_name").val();
                            $isManager = {% if isManager is defined and isManager %} true {% else %} false {% endif %};
                            if (coachingPlansData[$planId]['type'] != 'coach' || $isManager) {
                                var callbackYes = function () {
                                    $.post(
                                        Routing.generate('ksCoaching_deletePlan', { "planId" : $planId }), 
                                        {
                                        },
                                        function(response) {
                                            if( response.response == 1 ) {
                                                showInformation('{{ 'coaching.plan-successfully-deleted'|trans }}');
                                                {% if club is defined and club is not null %} 
                                                    document.location.reload();
                                                {% else %}
                                                    {% if is_granted("IS_AUTHENTICATED_REMEMBERED") %} document.location.href = Routing.generate('ksAgenda_index', {'id' : {{ app.user.id }} }); {% endif %}
                                                {% endif %}

                                            } else if( response.response == -1 ) {
                                                showInformation('{{ 'coaching.shared-plan-used'|trans }}');
                                            } else if( response.response == -2 ) {
                                                showInformation('{{ 'coaching.sessions-linked'|trans }}');
                                            }

                                            $("#bDeletePlan").removeClass("disabled");
                                            $("#coachingPlanModalLoader").hide();
                                        }
                                    );
                                }
                                var callbackNo = function () {
                                    $("#bDeletePlan").removeClass("disabled");
                                    $("#coachingPlanModalLoader").hide();
                                };
                                askConfirmation('{{ 'coaching.delete-plan-message'|trans|raw }}', 'sportif', callbackYes, callbackNo);
                            }
                            else {
                                if (coachingPlansData[$planId]['type'] == 'shared') showInformation("{{ 'coaching.delete-premium-plan-forbidden'|trans|raw }}");
                                else showInformation('{{ 'coaching.delete-only-user-plan'|trans }}'); //Cas d'une tentative de suppression d'un plan de type coach
                                $("#bDeletePlan").removeClass("disabled");
                                $("#coachingPlanModalLoader").hide();
                            }
                        }
                    }
                }
            });

            //Permet de gérer la création d'un nouveau plan directement depuis l'agenda
            $("#bCreatePlan").click(function() {
                $("#newPlanFromAgenda").show();
                $("#bSaveCreatePlan").show();
                $("#updateSelectedPlan").hide();
                $("#bSaveUpdatePlan").hide();
                $modaltitle.html("Création d'un nouveau plan");
                {% if club is defined and club is not null %} 
                    var memberId = $("#ksClub_ClubHasUsersType_user").val();
                    if (memberId != null && memberId.length == 1) {
                        $("#newPlanFromAgenda").show();
                        showCoachingPlanModal();
                    }
                    else {
                        showInformation('{{ 'coaching.choose-only-one-member'|trans }}');
                        $("#newPlanFromAgenda").hide();
                    }
                {% else %}
                    $("#newPlanFromAgenda").show();
                    showCoachingPlanModal();
                {% endif %}
            });
            
            $("#bCreateArticle").click(function() {
                $("#ks_activitybundle_articletype_categoryTag").val('');
                createNewArticle('-1'); //Création d'un article sans type sélectionné, l'utilisateur le choisi après dans la modal
            });
            
            $("#bSessionsTool").click(function() {
                $("#hrFCRef").val("");
                $("#dataScheduled").attr('disabled', true);
                
                var params = {
                    "isCreation"    : true,
                    {% if club is defined and club is not null and isManager %} "clubId"        : "{{ club.id }}", {% endif %}
                    {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and app.user.id == user.id and (app.user.isAllowedPackPremium or app.user.isAllowedPackElite) %} "userId"        : "{{ app.user.id }}", {% endif %}
                    "isPublic"      : false,
                    "modalTitle"    : "{{ 'coaching.sessions-tool'|trans }}",
                    "isFromSessionsToolBtn" : true
                };
                showEventFormModal(params);
                
                $("#typeVisibilityBloc").hide();
                $("#divNewPlan").show();
                $("#toolBtn").show();
                $("#ksEventType_name").hide();
                if ($("#ksCoachingPlanType_name").val() != null) {
                    $("#ksEventType_coachingPlan").select2("val", $("#ksCoachingPlanType_name").val()[0]);
                }
                $modalFooter.hide();
                $("#detailBlocUsers").hide();
                $("#distance").attr('disabled', false);
                $("#duration").attr('disabled', false);
                $("#elevationGain").attr('disabled', false);
                $("#elevationLost").attr('disabled', false);
                $("#speedAverage").attr('disabled', false);
                $("#hrAverage").attr('disabled', false);
                $("#detailBlocDate").hide();
                $("#detailBlocDifficulty").hide();
                $("#detailBlocPlace").hide();
                $("#btnsTool").show();
                $("#newPlanBtn").show();
                $("#newPlanText").show();
                $("#deletePlanBtn").show();
                $("#newCategoryText").show();
                $("#newCategoryBtn").show();
                $("#editCategoryBtn").show();
                $("#enableCategoryBtn").show();
                $("#disableCategoryBtn").show();
                $("#deleteCategoryBtn").show();
            });
            
            //Permet de modifier le libellé du plan sélectionné
            $("#bUpdatePlan").click(function() {
                var planId = $("#ksCoachingPlanType_name").val();
                if (planId) {
                    $("#newPlanFromAgenda").hide();
                    $("#bSaveCreatePlan").hide();
                    $("#updateSelectedPlan").show();
                    $("#bSaveUpdatePlan").show();
                    $("#updateSelectedPlan").val($("#ksCoachingPlanType_name option:selected").text());
                    $modaltitle.html("Mise à jour du libellé du plan");
                    showCoachingPlanModal();
                }
                else {
                    showInformation('{{ 'coaching.choose-at-least-1-plan'|trans }}');
                }
            });
            
            $("#bSaveCreatePlan").click(function() {
                //Cas de la création d'un nouveau plan
                var newPlan = $("#newPlanFromAgenda").val();
                var memberId = $("#ksClub_ClubHasUsersType_user").val();
                if (memberId!= null && memberId.length == 1) $dataMemberId = "&memberId=" + memberId;
                else $dataMemberId = "";
                if (newPlan !="") {
                    $("#coachingPlanModalLoader").show();
                    $("#bSaveCreatePlan").addClass("disabled");
                    $.ajax({
                        url: Routing.generate('ksCoaching_createNewPlan', {'clubId' : {% if club is defined and club is not null %} {{ club.id }} {% else %} 0 {% endif %}}),
                        type: "POST",
                        data: "newPlan="+ newPlan + $dataMemberId,
                        success : function(response) {
                            if ( response.publishResponse == 1 ) {
                                $("#coachingPlanModal").modal('hide');
                                showInformation('{{ 'coaching.plan-successfully-created'|trans }}');
                                {% if club is defined and club is not null %} 
                                    document.location.reload();
                                {% else %}
                                    {% if is_granted("IS_AUTHENTICATED_REMEMBERED") %} 
                                        //document.location.href = Routing.generate('ksAgenda_index', {'id' : {{ app.user.id }}, 'newPlanId' : response.newPlanId });
                                        document.location.href = Routing.generate('ksAgenda_index', {'id' : {{ app.user.id }} }); 
                                    {% endif %}
                                {% endif %}
                            }
                            else {

                            }
                            $("#bCreatePlan").removeClass("disabled");
                            $("#bSaveCreatePlan").removeClass("disabled");
                            $("#newPlanFromAgenda").hide();
                            $("#bSaveCreatePlan").hide();
                            $("#coachingPlanModalLoader").hide();
                        }
                    });
                }
            });
            $("#bSaveUpdatePlan").click(function() {
                //Cas de la modification du libellé du plan sélectionné
                var label = $("#updateSelectedPlan").val();
                var planId = $("#ksCoachingPlanType_name").val();
                if (planId == null || planId == "" || label == "") {
                    $("#coachingPlanModal").modal('hide');
                    showInformation('{{ 'coaching.choose-at-least-1-plan'|trans }}');
                    $("#bUpdatePlan").removeClass("disabled");
                    $("#updateSelectedPlan").val("");
                    $("#updateSelectedPlan").hide();
                    $("#bSaveUpdatePlan").hide();
                }
                else {
                    $("#coachingPlanModalLoader").show();
                    $("#bSaveUpdatePlan").addClass("disabled");
                    $.ajax({
                        url: Routing.generate('ksCoaching_updateSelectedPlan', {'planId' : planId}),
                        type: "POST",
                        data: "newLabel="+ label,
                        success : function(response) {
                            if ( response.publishResponse == 1 ) {
                                $("#coachingPlanModal").modal('hide');
                                showInformation('{{ 'coaching.plan-successfully-updated'|trans }}');
                                {#% if user is defined and user is not null %} document.location.href = Routing.generate('ksAgenda_index', {'id' : {{ app.user.id }}, 'newPlanId' : planId });{% endif %#}
                                {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null %} document.location.href = Routing.generate('ksAgenda_index', {'id' : {{ app.user.id }} });{% endif %}
                                {% if club is defined and club is not null %} 
                                    $("#planTitle").html(label);
                                 {% endif %}
                            }
                            else {
                            }
                            $("#bUpdatePlan").removeClass("disabled");
                            $("#bSaveUpdatePlan").removeClass("disabled");
                            $("#updateSelectedPlan").hide();
                            $("#bSaveUpdatePlan").hide();
                            $("#coachingPlanModalLoader").hide();
                        }
                    });
                }
            });
            
            $("#ksSportTypeMultiSimple_sport > option").removeAttr('selected');
            $("#ksSportTypeMultiSimple_sport").multiselect('refresh');
            
            calendar.fullCalendar('refetchEvents');
            
            var $filter_all              = $("input[type=radio][name=sessionsFilter][value=all]");
            var $filter_subscriptions    = $("input[type=radio][name=sessionsFilter][value=subscriptions]");
            
            $filter_all.on('ifChecked', function(event){
                $("div.all").show();
                $("div.subscriptions").hide();
            });
            $filter_subscriptions.on('ifChecked', function(event){
                $("div.all").hide();
                $("div.subscriptions").show();
            });
            
            function showFirstDateFromMember(username) {
                /*$('#scheduleRequiredTable').find("tbody").find("tr").each(function(){
                    //console.log($(this).find(".username").text().replace(/\s/g,""));
                    if (username == -1) $(this).show();
                    else {
                        if ($(this).find(".username").text().replace(/\s/g,"") != username) $(this).hide();
                        else $(this).show();
                    }
                });*/
            }
            {#% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id != app.user.id or app.user.isAllowedPackPremium is defined and app.user.isAllowedPackPremium or app.user.isAllowedPackElite is defined and app.user.isAllowedPackElite %#}
                {% if mainPlan is defined and mainPlan is not null %}
                    $("#ksCoachingPlanType_name > option[value={{ mainPlan[0].id }}]").attr("selected", "selected");
                    eventsCoachingPlans = $("#ksCoachingPlanType_name").val();
                    $("#ksCoachingPlanType_name").multiselect('refresh');
                {% endif %}
                if ($("#ksCoachingPlanType_name").val() != null && $("#ksCoachingPlanType_name").val() != '') reDrawGraph();
            {#% endif %#}
                
            var KPIalreadyDisplayed = false;
            var ajaxGetFlatView, ajaxGetKPIView = null;
            
            var choosenUserId = -1;
            var choosenUserIdHRMax = -1;
            var choosenUserIdHRRest = -1;
            var choosenUserIdVMASpeed = -1;
            
            {% if user is defined and user is not null %}
                choosenUserId = {{ user.id }};
                choosenUserIdHRMax = {{ HRMax }};
                choosenUserIdHRRest = {{ HRRest }};
                choosenUserIdVMASpeed = {{ VMASpeed }};
            {% endif %}
            
            function reDrawGraph(view) {
                disableAgenda();
                if (calendar) calendar.fullCalendar('refetchEvents');

                if (view == null) view = calendar.fullCalendar('getView');
                $("#planTitle").html("");
                //console.log("ICI:"+$("#ksCoachingPlanType_name").val());
                if ($("#ksCoachingPlanType_name").val() != null && $("#ksCoachingPlanType_name").val() != '' || {% if user is defined and user is not null and user.isAllowedPackPremium %} 1 {% else %} 0 {% endif %} ) {
                    //console.log("ici !");
                    $("#bloc2").show();
                    $("#bloc1").addClass('coachingplan');
                    $("#bloc4").show();
                    $("#bloc5").show();
                    //Mise à jour du titre
                    $("#planTitle").html($("#ksCoachingPlanType_name option:selected").text());

                    $agendaDate = new Date($("#agenda").fullCalendar('getDate'));
                    $getDay = $agendaDate.getDay() == 0 ? 7 : $agendaDate.getDay();

                    $startDate = new Date();
                    $endDate = new Date();

                    switch(view.name) {
                        case 'year':
                            $startDate = new Date($agendaDate.getFullYear(), 0, 1);
                            $endDate = new Date($agendaDate.getFullYear(), 11, 31);
                            break;
                        case 'month':
                            $startDate = new Date($agendaDate.getFullYear(), $agendaDate.getMonth(), 1);
                            $endDate = new Date($agendaDate.getFullYear(), $agendaDate.getMonth()+1, -1);
                            break;
                        case 'agendaWeek':
                            $startDate.setTime($agendaDate.getTime() - ($getDay -1 ) * 86400000);
                            $endDate.setTime($startDate.getTime() + 6 * 86400000);
                            break
                    }
                    startOn = padStr($startDate.getFullYear()) + '-'+ padStr(1+$startDate.getMonth()) + '-'+ padStr($startDate.getDate());
                    endOn = padStr($endDate.getFullYear()) + '-'+ padStr(1+$endDate.getMonth()) + '-'+  padStr($endDate.getDate());

                    var planId = $("#ksCoachingPlanType_name").val();
                    if (!planId || planId == '') planId = -1;
                    var context = "KPIView";
                    
                    if (planId == -1) {
                        //Pour gérer le cas ou un sportif premium affiche sa page sans choisir de plan d'entrainement
                        context = "KPIViewWithNoPlan";
                        $("#bloc2").hide();
                        $("#bloc1").removeClass('coachingplan'); //Pour ne pas afficher le bandeau gris
                    }

                    //Seul cas ou on affiche le bloc de drag&drop : si plan de type coach est vu par la page coach ou si plan de type user avec user connecté == coach (cas de la création de plan prémium par un coach)
                    $(".compose").hide();
                    {% if club is defined and club is not null and isManager %}
                        $(".compose").show();
                    {% endif %}

                    if (planId != -1) {
                        //console.log("planId="+planId);
                        if (coachingPlansData[planId]['type'] == 'user') {
                            $(".compose").show();
                        }
                    }

                    if( ajaxGetKPIView != null ) {
                        ajaxGetKPIView.abort();
                        ajaxGetKPIView = null;
                    }

                    if (!KPIalreadyDisplayed ) {
                        $("#KPIViewContainer").html("");
                        $("#KPIViewLoader").show();
                        ajaxGetKPIView = $.get(
                            Routing.generate('ksCoaching_getCoachingGraph', { "context": context, "planId" :  planId, "userId" : {% if user is defined and user is not null %} {{ user.id }} {% else %} '-1'{% endif %}, "startOn" : startOn, "endOn" : endOn}),
                            function(response) {
                                if (response.code ==1) {
                                    $("#KPIViewContainer").html(response.KPIView);
                                    KPIalreadyDisplayed = true; 
                                    $("#KPIViewLoader").hide();
                                }
                            }
                        );
                    }

                    {% if not is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id == 7 or (is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and (app.user.id == user.id or user.id == 7 ) or club is defined and club is not null) %}
                        $("#flatViewContainer").html("");
                        $("#KPIDetailsContainer").html("");
                        $("#flatViewLoader").show();
                        //console.log(startOn);
                        //console.log(endOn);

                        if( ajaxGetFlatView != null ) {
                            ajaxGetFlatView.abort();
                            ajaxGetFlatView = null;
                        }
                        
                        ajaxGetFlatView = $.get(
                            Routing.generate('ksCoaching_getCoachingGraph', { "context": "flatView", "planId" :  planId, "userId" : {% if user is defined and user is not null %} {{ user.id }} {% else %} '-1'{% endif %}, "startOn" : startOn, "endOn" : endOn}),
                            function(response) {
                                if (response.code ==1) {
                                    $("#flatViewContainer").html(response.flatView);
                                    $("#KPIDetailsContainer").html(response.KPIDetails);
                                    $("#flatViewLoader").hide();

                                    $("#ksClub_ClubHasUsersType_user").val();

                                    {% if user is defined and user is not null %}
                                        $id = {{ user.id }};
                                    {% endif %}
                                    {% if club is defined and club is not null %}
                                        $member = $("#ksClub_ClubHasUsersType_user").val();
                                        if ($member.length == 1) $id = $member;
                                    {% endif %}

                                    if ($id) {
                                        $("#statisticsViewContainer").html("");
                                        $("#statisticsViewLoader").show();
                                        $.get(
                                            Routing.generate('ksCoaching_getStatisticsGraph', { "id": $id, "startOn" : startOn, "endOn" : endOn, "planId" : planId}),
                                            function(response) {
                                                if (response.code ==1) {
                                                    $("#statisticsViewContainer").html(response.graph);
                                                    $("#statisticsViewLoader").hide();
                                                }
                                                enableAgenda();
                                                if (view.name == 'year') {
                                                    $.each( $('.fc-event'), function(index, item){
                                                        $( this ).css('top', '+=25');
                                                    });
                                                }
                                            }
                                        );
                                    }
                                }
                            }
                        );
                    {% else %}
                        $("#agenda").hide();
                        //$("#bloc3").html("L'agenda de ce sportif ainsi que ses données ne sont pas affichées ici");
                        $("#bloc4").hide();
                        {% if isManagerFromAClub >0 %} 
                            $("#bloc5").show();
                        {% else %}
                            $("#bloc5").hide();
                        {% endif %}
                    {% endif %}
                }
                else {
                    KPIalreadyDisplayed = false;
                    $("#bloc1").removeClass('coachingplan');
                    $("#bloc2").hide();
                    $("#bloc4").hide();
                    $("#bloc5").hide();
                    $("#KPIViewContainer").html('');
                    $("#flatViewContainer").html('');
                    $("#KPIDetailsContainer").html('');
                    $("#statisticsViewContainer").html('');
                    enableAgenda();
                    if (view.name == 'year') {
                        $.each( $('.fc-event'), function(index, item){
                            $( this ).css('top', '+=25');
                        });
                    }
                    {% if not is_granted("IS_AUTHENTICATED_REMEMBERED") and isManagerFromAClub > 0 and user is defined and user is not null and user.id != 7 or is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and app.user.id != user.id and isManagerFromAClub >0 and user.id !=7 %}
                        //console.log("ICI !");
                        $("#agenda").hide();
                        $("#bloc1").addClass('coachingplan'); //pour mettre en gris le fond
                        $("#bloc2").show();
                        $("#bloc2").css("padding-bottom", "0px");
                        $("#bloc3").show();
                        $("#bloc5").show();
                        //$("#bloc5").css("padding-left", "0px");
                        $("#bloc5").css("background", 'url("../images/blue-up.jpg") no-repeat scroll center bottom #1887c7');
                        $("#bloc5").css("padding-top", "40px");
                        $("#bloc5").css("padding-bottom", "0px");
                        $("#bloc3").prepend("<br>");
                        $("#bloc3").append("<br><br>");
                    {% endif %}
                }
            }
            
            function padStr(i) {
                return (i < 10) ? "0" + i : "" + i;
            }
            
            /*$('input').iCheck({
                checkboxClass: 'icheckbox_flat-blue',
                radioClass: 'iradio_flat-blue'
            });*/
    
            {% if not is_granted("IS_AUTHENTICATED_REMEMBERED") and isManagerFromAClub >0 or is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id != app.user.id %}
                $('.coachingPlan').hide();
            {% endif %}
        
            {% if club is defined and club is not null and isManager %} 
                showWarningCoachingModal();
                $('.coachingPlan').hide();
                $('.members').hide();


                {% for key, line in scheduleRequired %}
                    {% if line.username is not null %}
                        $("#updateMemberFromWarningModal_{{line.user_id}}").click(function() {
                            choosenUserId = {{line.user_id }};
                            choosenUserIdHRMax = {{line.HRMax }};
                            choosenUserIdHRRest = {{line.HRRest }};
                            choosenUserIdVMASpeed = {{line.VMASpeed }};
                            $("#warningCoachingModal").modal('hide');
                            $("#ksClub_ClubHasUsersType_user  > option").removeAttr('selected');
                            $("#ksClub_ClubHasUsersType_user").multiselect('refresh');
                            $("#ksClub_ClubHasUsersType_user > option[value={{line.user_id}}]").attr("selected", "selected");
                            $("#ksClub_ClubHasUsersType_user").multiselect('refresh');
                            $("#ksClub_ClubHasUsersType_user").multiselect('rebuild');

                            KPIalreadyDisplayed = false;

                            eventsUsers = $("#ksClub_ClubHasUsersType_user").val();
                            calendar.fullCalendar('refetchEvents');
                            updatePlanFromMembers();
                            $member = $("#ksClub_ClubHasUsersType_user").val();
                            if ($member != null && $member.length == 1) {
                                reDrawGraph();
                            }
                            else {
                                $("#flatViewContainer").html("");
                                $("#KPIDetailsContainer").html("");
                            }
                        });

                        $("#disableMemberFromWarningModal_{{line.user_id}}").click(function() {
                            if (!$("#disableMemberFromWarningModal_{{line.user_id}}").hasClass("disabled")) {
                                $("#warningModalLoader_{{line.user_id}}").show();
                                $("#disableMemberFromWarningModal_{{line.user_id}}").addClass("disabled");
                                $.ajax({
                                    url: Routing.generate('ksCoaching_disableMember', {'clubId' : {{ club.id }}, 'userId' : {{line.user_id}} }),
                                    type: "POST",
                                    success : function(response) {
                                        if ( response.publishResponse == 1 ) {
                                            $("#warningCoachingModal").modal('hide');
                                            showInformation('Membre désactivé avec succès !');
                                            document.location.reload();
                                        }
                                        $("#warningModalLoader_{{line.user_id}}").hide();
                                    }
                                });
                            }
                        });
                        
                        $("#enableMemberFromWarningModal_{{line.user_id}}").click(function() {
                            if (!$("#enableMemberFromWarningModal_{{line.user_id}}").hasClass("disabled")) {
                                $("#warningModalLoader_{{line.user_id}}").show();
                                $("#enableMemberFromWarningModal_{{line.user_id}}").addClass("disabled");
                                $.ajax({
                                    url: Routing.generate('ksCoaching_enableMember', {'clubId' : {{ club.id }}, 'userId' : {{line.user_id}} }),
                                    type: "POST",
                                    success : function(response) {
                                        if ( response.publishResponse == 1 ) {
                                            $("#warningCoachingModal").modal('hide');
                                            showInformation('Membre ré-activé avec succès !');
                                            document.location.reload();
                                        }
                                        $("#warningModalLoader_{{line.user_id}}").hide();
                                    }
                                });
                            }
                        });
                    {% endif %}
                {% endfor %}
            {% endif %}
            
            $("#launchVisitButton").click(function() {
                if (!$("#launchVisitButton").hasClass("disabled")) {
                    startIntro(); 
                }
            });
            
            $("#printButton").click(function() {
                if (!$("#printButton").hasClass("disabled")) {
                    $agendaDate = new Date($("#agenda").fullCalendar('getDate'));
                    $getDay = $agendaDate.getDay() == 0 ? 7 : $agendaDate.getDay();

                    $startDate = new Date();
                    $endDate = new Date();
                    
                    switch(view.name) {
                        case 'year':
                            showInformation("{{ 'coaching.print-available-week-only'|trans }}");
                            break;
                        case 'month':
                            showInformation("{{ 'coaching.print-available-week-only'|trans }}");
                            break;
                        case 'agendaWeek':
                            $startDate.setTime($agendaDate.getTime() - ($getDay -1 ) * 86400000);
                            $endDate.setTime($startDate.getTime() + 6 * 86400000);

                            startOn = padStr($startDate.getFullYear()) + '-'+ padStr(1+$startDate.getMonth()) + '-'+ padStr($startDate.getDate());
                            endOn = padStr($endDate.getFullYear()) + '-'+ padStr(1+$endDate.getMonth()) + '-'+  padStr($endDate.getDate());

                            var planId = $("#ksCoachingPlanType_name").val();
                            if (!planId || planId == '') planId = -1;

                            window.open(Routing.generate('ksCoaching_printWeek', {'planId' : planId, 'startOn' : startOn, 'endOn' : endOn}), '_blank');
                            break;
                    }
                }
            });
            
            $("#activePremiumBtn").click(function() {
                if( !$("#activePremiumBtn").hasClass("disabled") ) {
                    $("#activePremiumBtn").addClass("disabled");
                    //On passe le user en premium automatiquement et on ré-affiche la page
                    $.post(
                        Routing.generate('ksUser_setPremium'), 
                        {
                        },
                        function(response) {
                            if( response.response == 1 ) showInformation('{{ 'profile.premium-successful'|trans|raw }}');
                            document.location.reload();
                        }
                    );
                };
            });
            
            {% if not is_granted("IS_AUTHENTICATED_REMEMBERED") and isManagerFromAClub >0 or is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and (app.user.id != user.id or not user.isAllowedPackElite and not user.isAllowedPackPremium) %}
                traceEvolutionBySaisonGraph("evolutionBySeason", "{{ user.id }}", false);
            {% endif %}
                
            //Pour afficher correctement la modal
            planSelected = 'elite3';
            watchSelected = 'no';
            actualChoice = 'Pascal Blanc';
            watchOfferChoice = 'default';
            packOfferChoice = '110€ /mois';
            $("#optionsRadiosCoach1Label").html("110€ /mois");
            $("#optionsRadiosCoach2Label").html("100€ /mois");
            $("#optionsRadiosCoach3Label").html("90€ /mois");
            $("#coachLabel").html(' : Pascal Blanc');
            $("#blocWatchElite").hide();
        });
    </script>
{% endblock %}
    
{% block body %}
    {% if club is defined and club is not null %}
        {% include 'KsEventBundle:Event:_eventModalForm.html.twig' with {'form' : eventForm, "clubId" : club.id} %}
    {% elseif is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null %}
        {% include 'KsEventBundle:Event:_eventModalForm.html.twig' with {'form' : eventForm, "userId" : app.user.id} %}
    {% endif %}
    
    {% render 'KsActivityBundle:Wikisport:new_modal' with { 'articleTagId' : '-1' } %}
    
    {% include '::coachPricesModal.html.twig' %}
    
    <div class="modal fade" id="coachingPlanModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class='modal-header'>
                    <a class='close' data-dismiss='modal'>&times;</a>
                    <h3 id="context" class="sportif">
                        {% if club is defined and club is not null %} Plan d'entraînement {% else %} Plan PREMIUM {% endif %}
                    </h3>
                </div>
                <div class='modal-body'>
                    <input id="newPlanFromAgenda" class="form-control" type="text" maxlength="255" value="" placeholder="{{ 'coaching.choose-title'|trans }}" style="display:none;"/>
                    <input id="updateSelectedPlan" class="form-control" type="text" maxlength="255" value="" placeholder="" style="display:none;"/>
                </div>
                <div class='modal-footer'>
                    <img id="coachingPlanModalLoader" src="{{ asset('img/loader_ks_16.gif') }}" alt="loader" style="display:none">
                    <a href='#' class='cancel btn' data-dismiss='modal'>Annuler</a>
                    <button id="bSaveCreatePlan" type="button" class='edit btn btn-success'><span class="glyphicon glyphicon-save"></span></button>
                    <button id="bSaveUpdatePlan" type="button" class='edit btn btn-success'><span class="glyphicon glyphicon-save"></span></button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="modal fade" id="warningCoachingModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class='modal-header'>
                    <a class='close' data-dismiss='modal'>&times;</a>
                    <h3 id="context" class="sportif">{{ 'coaching.warning-coaching'|trans }}</h3>
                </div>
                <div class='modal-body'>
                    <center>
                        <table id="scheduleRequiredTable" cellpadding="0" cellspacing="0" border="0" width="" class="table table-striped scheduleRequiredTable">
                            <thead>
                                <tr>
                                    <th><center>{{ 'coaching.members'|trans }}</center></th>
                                    <th><center>{{ 'coaching.first-no-session'|trans }}</center></th>
                                    <th><center>{{ 'titles.actions'|trans }}</center></th>
                                </tr>
                            </thead>
                            <tbody>
                                {% if scheduleRequired is defined and scheduleRequired is not null %}
                                    {% for key, line in scheduleRequired %}
                                        {% if line.username is not null %}
                                            <tr>
                                                <td class="username">
                                                    <center><span rel="tooltip" title="{{ "coaching.show-planning"|trans }}" class="btn btn-default" id="updateMemberFromWarningModal_{{line.user_id}}">{{ line.username }}</span></center>
                                                </td>
                                                <td>
                                                    {% if line.isEnabled == 0 %}
                                                        {% set class = 'primary' %}
                                                    {% else %}
                                                        {% if line.delay <= delayWarning %}
                                                            {% set class = 'danger' %}
                                                        {% else %}
                                                            {% set class = 'success' %}
                                                        {% endif %}
                                                    {% endif %}
                                                    <center><span class="label label-{{ class }}">{{ line.missingDate }}</span></center>
                                                </td>
                                                <td>
                                                <center>
                                                    <span class="btn btn-xs btn-success glyphicon glyphicon-repeat" id="enableMemberFromWarningModal_{{ line.user_id }}" rel="tooltip" title="{{ "coaching.enable-member"|trans }}"></span>
                                                    <span class="btn btn-xs btn-danger glyphicon glyphicon-remove" id="disableMemberFromWarningModal_{{ line.user_id }}" rel="tooltip" title="{{ "coaching.disable-member"|trans }}"></span>
                                                    <img id="warningModalLoader_{{ line.user_id }}" src="{{ asset('img/loader_ks_16.gif') }}" alt="loader" style="display:none">
                                                </center>
                                                </td>
                                            </tr>
                                        {% endif %}
                                    {% endfor %}
                                {% endif %}
                            </tbody>
                        </table>
                    </center>
                </div>
                <div class='modal-footer'>
                    <a href='#' class='cancel btn' data-dismiss='modal'>Fermer</a>
                </div>
            </div>
        </div>
    </div>
    
    <!--WRAPPER-->
    <div class="wrapper">
        <!--bloc1-->
        <div class="bloc1 desktop" id="bloc1">
            <div class="container">
                <h1 class="title {% if club is defined and club is not null and isManager %}elite{% else %} {% if user.isAllowedPackElite %}elite{% elseif user.isAllowedPackPremium %}premium{% else %}defis{% endif %}{% endif %}">
                    {% if user is defined and user is not null %} 
                        {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and app.user.id == user.id %}
                            Mon tableau de bord
                        {% else %}
                            Profil
                        {% endif %}
                    {% endif %}
                    {% if club is defined and club is not null and isManager %} 
                        Outil Avancé planification 
                    {% endif %}        
                    <i>
                    {% if club is defined and club is not null and isManager or isManagerFromAClub >0 and is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id != 7 %}
                        {% if clubIsCoach is defined and clubIsCoach %} COACH {% else %} CLUB {% endif %}
                    {% else %} 
                        {% if user.isAllowedPackElite %} ELITE {% elseif user.isAllowedPackPremium %} PREMIUM {% else %} defis {% endif %}{% endif %}
                    </i>
                    {% if not is_granted("IS_AUTHENTICATED_REMEMBERED") or user is defined and user is not null and user.id != app.user.id %} : {{ user.__toString() }}{% endif %}
                </h1>
                <div class="bloc1-nav">
                    {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and (club is defined and club is not null and isManager or user is defined and user is not null and user.id == app.user.id) %}
                        <div class="btn-group pull-right">
                            <select id="eventsTypesSelect" name="eventsTypesSelect[]" multiple="multiple">
                                <option value="trainings">{{ 'events.trainings'|trans }}</option>
                                <option value="meals">{{ 'events.meals'|trans }}</option>
                                <option value="others">{{ 'events.others'|trans }}</option>
                                {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and club is defined and club is not null and isManager or user is defined and user is not null %} <option value="coaching">{{ 'events.coaching'|trans }}</option> {% endif %}
                                {#<option value="competitions">{{ 'events.competitions'|trans }}</option>#}
                                <option value="google">{{ 'events.google'|trans }}</option>
                                {#% if isManager %} <option value="goals">{{ 'events.goals'|trans }}</option> {% endif %#}
                            </select>
                        </div>
                    {% endif %}
                        
                    {% if club is defined and club is not null and isManager %}
                        <div class="btn-group pull-right">
                            <button data-toggle="dropdown" class="multiselect dropdown-toggle btn btn btn-link" type="button" style="width: auto;">
                                {{ 'events.availability'|trans }} <b class="caret"></b>
                            </button>
                            <ul class="dropdown-menu" style="max-height: 400px; overflow-y: auto; overflow-x: hidden;">
                                <li>
                                    <a style="padding:0;" href="javascript:void(0);">
                                        <label style="margin:0;padding:3px 20px 3px 20px;width:100%;height:100%;cursor:pointer;">
                                            <input id="sortByAll" type="radio" name="sortBy" value="all" checked="checked" style="margin-bottom:5px;"> {{ 'events.all'|trans }}
                                        </label>
                                    </a>
                                </li>
                                <li>
                                    <a style="padding:0;" href="javascript:void(0);">
                                        <label style="margin:0;padding:3px 20px 3px 20px;width:100%;height:100%;cursor:pointer;">
                                            <input id="sortByAvailable" type="radio" name="sortBy" value="available" style="margin-bottom:5px;"> {{ 'events.available'|trans }}
                                        </label>
                                    </a>
                                </li>
                                <li>
                                    <a style="padding:0;" href="javascript:void(0);">
                                        <label style="margin:0;padding:3px 20px 3px 20px;width:100%;height:100%;cursor:pointer;">
                                            <input id="sortByFull" type="radio" name="sortBy" value="full" style="margin-bottom:5px;"> {{ 'events.full'|trans }}
                                        </label>
                                    </a>
                                </li>
                            </ul>
                        </div>
                    {% endif %}
                    
                    {% if user is defined and user is not null and (user.isAllowedPackPremium or user.isAllowedPackElite) %}
                        <ul class="nav nav-pills navbar-left icons">
                            <li id="launchVisitButton" class="disabled"><a class="disabled glyphicon glyphicon-question-sign" rel="tooltip" title="{{ 'visit.launch-visit'|trans }}"></a></li>
                            <li id="printButton"><a class="glyphicon glyphicon-print" rel="tooltip" title="{{ 'coaching.print'|trans }}"></a></li>
                        </ul>
                    {% endif %}
                        
                    {% if not is_granted("IS_AUTHENTICATED_REMEMBERED") %}
                        {{ form_widget(eventCoachingPlanChoiceForm.name) }} {# Pour permettre la visu de la vue PREMIUM pour les sportifs non connectés depuis la page login #}
                    {% endif %}
                    
                    {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id == app.user.id and not user.isAllowedPackPremium and not user.isAllowedPackElite %}
                        <ul class="nav nav-pills navbar-left icons">
                            <li><a href="{{ path('ksSport_activitySessionForm', { 'activityId': 'forceNew' }) }}" rel="tooltip" title="{{ "coaching.create-activity-manually"|trans }}" class="glyphicon glyphicon-plus"> {{ 'actions.publish'|trans }}</a></li>
                            <li><a href="{{ path('ksActivity_syncFromList') }}" rel="tooltip" title="{{ "coaching.create-activity-by-sync"|trans }}" class="glyphicon glyphicon-refresh"> {{ 'actions.sync'|trans }}</a></li>
                            <li><a href="{{ path('ksWikisport_index') }}" rel="tooltip" title="{{ "coaching.import-plan-agenda"|trans }}" class="glyphicon glyphicon-upload btn-success"> {{ 'coaching.import-plan'|trans }}</a></li>
                            <li><a id="activePremiumBtn" rel="tooltip" title="{{ "coaching.active-premium"|trans }}" class="glyphicon glyphicon-ok-sign btn-success"> {{ 'coaching.premium'|trans }}</a></li>
                        </ul>
                    {% endif %}
                    {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id != app.user.id and (isManagerFromAClub == 0 or user.id == 7) %}
                        <ul class="nav nav-pills navbar-left icons">
                            {% if not friendWithMe and not isAwaitingRFResponse  and not mustGiveRFResponse %}
                                <li>
                                    <a id="addFriendBtn" class="btn btn-xs btn-success" rel="tooltip" title="Rentrer en relation avec {{ user.username }}" href="{{ path('ks_user_Ask_a_friend', { 'user2Id': user.id }) }}">
                                        <i class="glyphicon glyphicon-plus"></i> Ajouter en ami
                                    </a>
                                <li>
                            {% elseif isAwaitingRFResponse %}
                                <li>
                                    <a id="cancelFriendBtn" class="btn btn-xs btn-danger" href="{{ path('ks_user_Cancel_the_friend_request', { 'user2Id': user.id }) }}">
                                        <i class="glyphicon glyphicon-remove"></i> Annuler la demande de mise en relation
                                    </a>
                                </li>
                            {% elseif mustGiveRFResponse %}
                                <li>
                                    <a id="acceptFriendBtn" class="btn btn-xs btn-success" href="{{ path('ks_user_Accept_a_friend_request', { 'user2Id': user.id }) }}">
                                        <i class="glyphicon glyphicon-ok"></i> Accepter la mise en relation
                                    </a>
                                </li>
                                <li>
                                    <a id="denyFriendBtn" class="btn btn-xs btn-danger" href="{{ path('ks_user_Refuse_a_friend_request', { 'user2Id': user.id }) }}">
                                        <i class="glyphicon glyphicon-remove"></i> Refuser la mise en relation
                                    </a>
                                </li>
                            {% else %}
                                <li>
                                    <a id="deleteFriendBtn" class="btn btn-xs btn-danger" href="{{ path('ks_user_Revoke_a_friend', { 'user2Id': user.id }) }}">
                                        <i class="glyphicon glyphicon-minus-sign"></i> Supprimer l'ami
                                    </a>
                                </li>
                            {% endif %}
                            {% if user is defined and user is not null and (user.isAllowedPackPremium or user.isAllowedPackElite) %}
                                {{ form_widget(eventCoachingPlanChoiceForm.name) }} {# Pour permettre la visu de la vue PREMIUM pour les sportifs DEFIS #}
                            {% endif %}
                        </ul>
                    {% else %}
                        {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and (club is defined and club is not null and isManager is defined and isManager and club.delayWarning > 0 or user is defined and user is not null and (app.user.isAllowedPackPremium or app.user.isAllowedPackElite or isManagerFromAClub >0 )) %}
                            <ul class="nav nav-pills navbar-right nexts">
                                {% if club is defined and club is not null and isManager %}
                                    {{ form_widget(eventUsersChoiceForm.user) }}
                                    {{ form_widget(eventCoachingPlanChoiceForm.name) }}
                                {% endif %}
                                {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and (app.user.isAllowedPackPremium or app.user.isAllowedPackElite) %}
                                    {{ form_widget(eventCoachingPlanChoiceForm.name) }}
                                {% endif %}
                            </ul>

                            <ul class="nav nav-pills navbar-left icons">
                                {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id == app.user.id %}
                                    <li><a rel="tooltip" title="{{ 'actions.write-message'|trans }}" href="{{ path('ksMessage_new') }}"><span class="glyphicon glyphicon-envelope"></span></a></li>
                                {% endif %}
                                {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id == app.user.id and (app.user.isAllowedPackPremium or isManagerFromAClub > 0) %}
                                    <li><a rel="tooltip" title="{{ "coaching.show-all-plans"|trans }}" href="{{ path('ksWikisport_index') }}" class="glyphicon glyphicon-search"></a></li>
                                    {% if isManagerFromAClub > 0 %} 
                                        <li><a rel="tooltip" title="{{ "coaching.share-plan"|trans }}" id="bSharePlan" class="glyphicon glyphicon-share"></a></li>
                                    {% endif %}
                                {% endif %}
                                {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id == app.user.id and (app.user.isAllowedPackPremium or app.user.isAllowedPackElite or isManagerFromAClub > 0 ) %}
                                    <li id="bGoogleAgendaSync" class="disabled"><a rel="tooltip" title="{{ "coaching.sync-google-agenda"|trans }}" class="glyphicon glyphicon-refresh"></a></li>
                                    {% if isManagerFromAClub > 0 or app.user.isAllowedPackPremium %}
                                        <li id="bSessionsTool"><a rel="tooltip" title="{{ "coaching.sessions-tool"|trans }}" class="glyphicon glyphicon-cog"></a></li>
                                    {% endif %}
                                    <li id="bCreateArticle"><a rel="tooltip" title="{{ "coaching.create-new-article"|trans }}" class="glyphicon glyphicon-folder-open"></a></li>
                                {% endif %}
                                {% if club is defined and club is not null and isManager %}
                                    <li id="bWarningCoaching"><a rel="tooltip" title="{{ "coaching.warning-coaching"|trans }}" class="glyphicon glyphicon-warning-sign btn-danger" onclick="showWarningCoachingModal();" ></a></li>
                                    <li id="bSessionsTool"><a rel="tooltip" title="{{ "coaching.sessions-tool"|trans }}" class="glyphicon glyphicon-cog"></a></li>
                                    <li id="bCreateArticle"><a rel="tooltip" title="{{ "coaching.create-new-article"|trans }}" class="glyphicon glyphicon-folder-open"></a></li>
                                    <li id="bSendMailToAll"><a rel="tooltip" title="{{ "coaching.send-mail-all"|trans }}" class="glyphicon glyphicon-envelope"></a></li>
                                {% endif %}
                                {% if club is defined and club is not null and isManager or is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id == app.user.id and (isManagerFromAClub >0 or app.user.isAllowedPackPremium) %}
                                    {% if isManager is defined and isManager or isManagerFromAClub >0 %}
                                        {% if club is defined and club is not null and isManager %} 
                                            <li id="bCreatePlan"><a rel="tooltip" title="{{ "coaching.create-new-plan"|trans }}" class="glyphicon glyphicon-plus"></a></li> 
                                        {% else %}
                                            <li id="bCreatePlan"><a rel="tooltip" title="{{ "coaching.create-new-plan-premium"|trans }}" class="glyphicon glyphicon-plus"></a></li>
                                        {% endif %}
                                    {% endif %}
                                    <li id="bUpdatePlan"><a rel="tooltip" title="{{ "coaching.update-selected-plan"|trans }}" class="glyphicon glyphicon-pencil"></a></li>
                                    <li id="bDeletePlan"><a rel="tooltip" title="{{ "coaching.delete-plan"|trans }}" class="glyphicon glyphicon-trash"></a></li>
                                {% endif %}
                                {% if club is defined and club is not null or user is defined and user is not null and (isManagerFromAClub == 0 or user.id == 7 or app.user.id == user.id ) %}
                                    <li id="bGoToStartDatePlan"><a rel="tooltip" title="{{ "coaching.go-to-start-date-plan"|trans }}"><i class="glyphicon glyphicon-chevron-left" ></i></a></li>
                                    <li id="bGoToEndDatePlan"><a rel="tooltip" title="{{ "coaching.go-to-end-date-plan"|trans }}"><i class="glyphicon glyphicon-chevron-right" ></i></a></li>
                                {% endif %}
                                {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and not app.user.isAllowedPackElite and (user.id == app.user.id  or isManagerFromAClub >0 )%}
                                    <li><a onclick="$('#coachPricesModal').modal('show');" rel="tooltip" title="{{ "coaching.go-elite"|trans }}" class="glyphicon glyphicon-question-sign btn-danger"> {{ 'coaching.elite'|trans }}</a></li>
                                {% endif %}
                            </ul>

                            <form id="fArticleForm" method="post" {{ form_enctype(articleForm) }}>
                                {{ form_widget(articleForm.label, { attr: { style: "display:none"} }) }}
                                {{ form_widget(articleForm.categoryTag, { attr: { style: "display:none"} }) }}
                                {{ form_rest(articleForm) }}
                            </form>
                        {% endif %}
                    {% endif %}
                </div>

            </div><!--/.container-->
        </div><!--/bloc1-->


        <!--bloc2-->
        <div class="bloc2" id="bloc2">
            <div class="container">
                {% if not is_granted("IS_AUTHENTICATED_REMEMBERED") and isManagerFromAClub > 0 and user is defined and user is not null and user.id != 7 or is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id != app.user.id and isManagerFromAClub >0 and user.id !=7 %}
                    {% if user.userDetail is defined and user.userDetail != null %}
                        {% set user_imageName = user.userDetail.imageName %}
                    {% else %}
                        {% set user_imageName = null %}
                    {% endif %}

                    {% set imageName = null %}
                    {% if user.userDetail is not null %}
                        {% set imageName = user.userDetail.imageName %}
                    {% endif %}
                    <div class="row">
                        <div class="col-md-2">
                            <center>
                                {% include 'KsUserBundle:User:_userImage_league_medium.html.twig' with {
                                    'user_id' : user.id, 
                                    'user_username' : user.username, 
                                    'user_imageName': imageName, 
                                    'user_league_category' : user.leagueLevel.category.label, 
                                    'user_league_stars' : user.leagueLevel.starNumber
                                } %}
                            </center>
                        </div>
                        <div class="col-md-10">
                            <span class="text-coach" style="text-align: justify">
                                {% if user.id == 744 %} {#username == 'ultrascal' #}
                                    <p>Dans ma carrière de sportif, j'ai eu la chance travailler avec des personnes formidables. De ces échanges, j'ai établi des méthodes de préparations physiques, mentales, nutritionnelles...</p>
                                    <p>Aujourd'hui, j'accompagne les sportifs dans leur préparation, les trailers dans les reconnaissances, les compétiteurs dans leur performance, les randonneurs sur les sentiers et tous ceux qui ont besoin d'évacuer le stress</p>
                                    <p>A très bientôt sur les sentiers de la vie.</p>
                                {% elseif user.id == 1104 %} {#username == 'Dommt' #}
                                    <p>Des vertes prairies normandes aux hauts sommets de l’océan indien, Thierry Chambry a franchi le pas en 1999. </p>
                                    <p>A la Réunion, il a découvert les joies du trail s’affirmant comme l’un des meilleurs coureurs locaux jusqu’à sa mémorable victoire en 2007, sur la Diagonale des fous, l’une des courses de montagnes les plus célèbres du monde.</p>
                                    <p>Titulaire d’un diplôme d’état d’alpinisme d’accompagnateur en montagne, brevet d'éducateur sportif et d'une formation en préparation physique.</p>
                                {% elseif user.id == 753 %} {#username == 'TerreDeSport' #}
                                    <p>Terre de Sport est une société née de la rencontre entre deux <b>passionnés</b> de course à pied. </p>
                                    <p>Fort de nos expériences respectives nous cherchons chaque jour à offrir les <b>meilleures</b> conditions d’entraînement à nos sportifs quelque soit leur <b>niveau</b> de pratique. </p>
                                    <p>Chacun doit pouvoir exprimer son propre haut niveau en accord avec ses <b>disponibilités</b> et son potentiel</b> physique.</p>
                                    <p>Impliqués dans le monde universitaire tout autant que sur les terrains d’entraînement, nous développons de nouvelles <b>méthodes</b> d’entraînement tout en exploitant au maximum les méthodes qui ont fait leurs preuves.</p>
                                {% else %}
                                    Citation du coach (en cours)
                                {% endif %}
                            </span>
                        </div>
                    </div>
                {% else %}
                    <h1 id="planTitle" class="title bleu"></h1>
                    <div id="KPIView" class="">
                        <center>
                            <img id="KPIViewLoader" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader" style="display:none"/>
                        </center>
                        <div id="KPIViewContainer"></div>
                    </div>
                {% endif %}
            </div><!--/.container-->
        </div><!--/bloc2-->

        <!--bloc3-->
        <div class="bloc3" id="bloc3">
            <div class="container container-bloc3">
                {% if not is_granted("IS_AUTHENTICATED_REMEMBERED") and isManagerFromAClub > 0 and user is defined and user is not null and user.id != 7 or is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id != app.user.id and isManagerFromAClub >0 and user.id !=7 %}
                    <div class="col-md-6">
                        <span class="text-coach">
                            {% if user.id == 744 %} {#username == 'ultrascal' #}
                                <p> <strong>Palmarès</strong><br/> 
                                    Coach Keepinsport <br/>
                                    25 ans de compétition<br/>
                                    150 victoires en Trail, Ultratrail, VTT, Duathlon</p>
                                <p> Team Manager du Team Décathlon Réunion<br/>
                                    Membre du Team HOKA One One<br/>
                                    2ème de la Diagonale des fous 2011 (3ème en 2013, 4ème en 2010)<br/>
                                    <a href="https://www.youtube.com/watch?v=DNzG6Q8dYA0" target="_blank">Runtrip 440 km</a>, 27200 D+ non-stop sur les sentiers réunionnais en Janvier 2013
                                </p>
                            {% elseif user.id == 1092 %} {#username == 'JoHa' #}
                                <p> <strong>Athlète et entraîneur international</strong><br/> 
                                    30 ans d'expérience dans la pratique et l'entraînement du triathlon, de la natation, du trail et du surf.<br/>
                                <p> <strong>Les athlètes qui me font confiance !</strong><br/>
                                    <u>David Hauss</u> (Triathlon): 4ème des JO de Londres en 2012, vainqueur de plusieurs Coupe du Monde, Plusieurs fois sur le podium en championnat du Monde<br>
                                    <u>Thierry Chambry</u> (Trail) Vainqueur du GRR en 2007, <br>
                                    <u>Johanne Defay</u> (Surf) 8ème mondiale en 2014,<br>
                                    <u>Simon Paillard</u> (Trail): De nombreuses victoires en Trail en 2014.<br>
                                    <u>Estelle Carret</u> (Trail) : Trail de Bourbon, Trans Run<br>
                                </p>
                            {% elseif user.id == 1104 %} {#username == 'Dommt' #}
                                <p> <strong>Palmarès</strong><br>
                                    <u>Vainqueur</u>: Diagonale des Fous, Raid 974, Raid Isalo, Caldeira Trail</p>
                                <p> Spécialiste course Trail et Ultra : île de La Réunion, île Maurice, Madagascar, Népal...</p>
                                <p> Team Manager Freexion et association GASPAR </p>
                            {% elseif user.id == 753 %} {#username == 'TerreDeSport' #}
                                <div style="text-align:justify">
                                    <p> <strong>Les coachs :</strong><br></p>

                                    <u>Laurent BRÉGÉGIÈRE</u> :
                                    <br>Kinésithérapeute du Sport spécialisé dans la prévention et le soin des blessures en course à pied.
                                    <br>Préparateur physique Diplômé Universitaire du Centre d’Expertise et de la Performance Gilles Cometti.
                                    <br>
                                    <br>
                                    <u>Ronan QUÉRÉ</u> :
                                    <br>Formateur et Chargé de mission dans l'organisation et le développement du sport santé (Master VHMA).
                                    <br>Coach sportif spécialisé dans les activités physiques adaptées (Licence APA).
                                    <br>Entraineur et préparateur physique pour des coureurs de montagne (BE1 athlétisme).
                                    <br>Entraîneur et préparateur physique pour des athlètes handisport (CQH).
                                    <br>
                                    <br>
                                    <br><p>Nous vous proposons via la plate forme Keepinsport la possibilité d'une planification <b>individualisée</b> et <b>adaptée</b> à vos besoins comprenant votre <b>suivi</b> d'état de forme et des <b>tests</b> terrains réguliers.</p>
                                    <br>
                                    <b><p>Nos compétences Keepinsport peuvent s'inscrire dans les cadres suivants :</p></b>
                                    - Préparation physique et entraînement des coureurs de tous niveaux
                                    <br>- Prévention des blessures et programmation spécifique (gestion de la charge d'entrainement dans le cadre de la prévention et du traitement des blessures en course à pied)
                                    <br>- Reprise d'activité sportive (suite à une longue période d'arrêt)
                                    <br>- Réathlétisation (post blessure)
                                    <br>- Préparation physique (tous sports)
                                    <br>
                                    <br>
                                    <b><p>Nos offres complémentaires (sur demande) :</p></b>
                                    - Analyse biomécanique de la foulée
                                    <br>- Circuit de récupération (bain froid, Compex,...)
                                    <br>- Programme de nutrition sportive
                                    <br>- Séance de relaxation et yoga
                                    <br>- Possibilité de coaching individuels ou en groupes pour les séances d’entraînement planifiées
                                    <br>
                                    <br>
                                    <p> Pour plus de précision ou pour connaitre les tarifs, contactez nous par mail sur <b><u>bregegiere.laurent@hotmail.fr</u></b> ou par téléphone au <b><u>0692 631382</u></b></p>
                                </div>
                            {% else %}
                                Présentation du coach (en cours)
                            {% endif %}
                        </span>
                    </div>
                    <div class="col-md-6">
                        <div id="carousselCoach" class="carousel slide" data-ride="carousel">
                            <div class="carousel-inner">
                                {% if user.id == 744 %} {#username == 'ultrascal' #}
                                    <div class="item active">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img01.jpg') }}" alt="">
                                    </div>
                                    <div class="item">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img02.jpg') }}" alt="">
                                    </div>
                                    <div class="item">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img03.jpg') }}" alt="">
                                    </div>
                                    <div class="item">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img04.jpg') }}" alt="">
                                    </div>
                                    <div class="item">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img05.jpg') }}" alt="">
                                    </div>
                                    <div class="item">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img06.jpg') }}" alt="">
                                    </div>
                                {% elseif user.id == 1092 %} {#username == 'JoHa' #}
                                    <div class="item active">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img01.jpg') }}" alt="">
                                    </div>
                                {% elseif user.id == 1104 %} {#username == 'Dommt' #}
                                    <div class="item active">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img01.jpg') }}" alt="">
                                    </div>
                                    <div class="item">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img02.jpg') }}" alt="">
                                    </div>
                                    <div class="item">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img03.jpg') }}" alt="">
                                    </div>
                                    <div class="item">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img04.jpg') }}" alt="">
                                    </div>
                                {% elseif user.id == 753 %} {#username == 'TerreDeSport' #}
                                    <div class="item active">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img01.JPG') }}" alt="">
                                    </div>
                                    <div class="item">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img02.JPG') }}" alt="">
                                    </div>
                                    <div class="item">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img03.JPG') }}" alt="">
                                    </div>
                                    <div class="item">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img04.JPG') }}" alt="">
                                    </div>
                                {% endif %}
                            </div>
                        </div>
                        {% if user.id == 753 %} {#username == 'TerreDeSport' #}
                            <br>
                            <br>
                            <br>
                            <br>
                            <br>
                            <div id="carousselCoach2" class="carousel slide" data-ride="carousel">
                                <div class="carousel-inner">
                                    <div class="item active">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img05.JPG') }}" alt="">
                                    </div>
                                    <div class="item">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img06.JPG') }}" alt="">
                                    </div>
                                    <div class="item">
                                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/img07.JPG') }}" alt="">
                                    </div>
                                </div>
                            </div>
                        {% endif %}
                    </div>
                {% endif %}
                {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and club is defined and club is not null and isManager or is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id == app.user.id and isManagerFromAClub > 0 %}
                    <div class="compose desktop">
                        <div id="composer" class="title"><i class="glyphicon glyphicon-play"> </i><br/>C<br/>O<br/>M<br/>P<br/>O<br/>S<br/>E<br/><br/>T<br/>O<br/>N<br/><br/>A<br/>G<br/>E<br/>N<br/>D<br/>A</div>
                        <div id='external-events' >
                            {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id == app.user.id and app.user.isAllowedPackPremium %}
                                <div style="margin-top:5px">
                                    <label class="pull-left" style="margin-left:10px">
                                        <span class="pull-left" style="margin-right:5px"><input id="subscriptionsRadio" type="radio" name="sessionsFilter" value="subscriptions" checked></span>
                                        <span class="pull-left">{{ 'coaching.my-favorite-sessions'|trans }}</span>
                                    </label>
                                    <label class="pull-left" style="margin-left:10px">
                                        <span class="pull-left" style="margin-right:5px"><input id="allRadio" type="radio" name="sessionsFilter" value="all"></span>
                                        <span class="pull-left">{{ 'coaching.all-sessions'|trans }}</span>
                                    </label>
                                </div>
                            {% endif %}
                            <div class="all" style="display:none">
                                {% set new_category = '' %}
                                {% set first = true %}
                                {% if wikiSessions|length == 0 %}
                                    <div class="pull-left" style="text-align:justify">
                                        <br/>
                                        <br/>
                                        {{ 'coaching.no-favorite-sessions'|trans }}
                                        <br/>
                                        <br/>
                                        <center><a href="#" onclick="window.location.reload(true);" rel="tooltip" title="Rafraichir la page pour prendre en compte les modifications" class="btn btn-default glyphicon glyphicon-refresh" > Rafraichir</a></center>
                                    </div>
                                {% else %}
                                    
                                    <table class="table table-bordered wikiSessions">
                                        <thead>
                                            <tr>
                                                <th><center>{{ 'coaching.result'|trans }}&nbsp;&nbsp;<span class="glyphicon glyphicon-share-alt"></span></center></th>
                                            </tr>
                                        </thead>
                                        <tbody>

                                            {% for wikiSession in wikiSessions %}
                                            {% if wikiSession.category != 'Défaut' %}
                                                {% if new_category != wikiSession.category %}
                                                    {% set new_category = wikiSession.category %}
                                                    {% if first == true %}
                                                        {% set first = false %}
                                                    {% else %}
                                                        </li>
                                                        </ul>
                                                        </div>
                                                        </tr>
                                                        </td>

                                                    {% endif %}
                                                        <tr>
                                                        <td>
                                                        <div class="btn-group">
                                                            <button id="btnGroupVerticalDrop1" type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                                                {% if wikiSession.category|length > 15 %}
                                                                    {{ wikiSession.category|slice(0,15) ~ "…" }}
                                                                {% else %}
                                                                    {{ wikiSession.category }}
                                                                {% endif %}
                                                            <span class="caret"></span>
                                                            </button>
                                                        <ul class="dropdown-menu" role="menu" aria-labelledby="btnGroupVerticalDrop1">
                                                        <li>
                                                {% endif %}
                                                <center>
                                                        <div class='external-event' rel="tooltip" title="{% if wikiSession.content is null or wikiSession.content == '' %} - {% else %} {{ wikiSession.content }} {% endif %}"
                                                       data-sport_id="{{ wikiSession.sport_id }}"
                                                       data-sport_code="{{ wikiSession.sport_code }}"
                                                       data-sport_label="{{ wikiSession.sport_label }}"
                                                       data-category_id="{{ wikiSession.coachingCategory_id }}"
                                                       data-category="{{ wikiSession.category }}"
                                                       data-id="{{ wikiSession.coachingSession_id }}"
                                                       data-title="{{ wikiSession.sessionTitle }}"
                                                       data-content="{{ wikiSession.content }}"
                                                       data-distance_min="{{ wikiSession.distanceMin }}"
                                                       data-distance_max="{{ wikiSession.distanceMax }}"
                                                       data-duration_min="{{ wikiSession.durationMin }}"
                                                       data-duration_max="{{ wikiSession.durationMax }}"
                                                       data-elevation_gain_min="{{ wikiSession.elevationGainMin }}"
                                                       data-elevation_gain_max="{{ wikiSession.elevationGainMax }}"
                                                       data-elevation_lost_min="{{ wikiSession.elevationLostMin }}"
                                                       data-elevation_lost_max="{{ wikiSession.elevationLostMax }}"
                                                       data-speed_average_min="{{ wikiSession.speedAverageMin }}"
                                                       data-speed_average_max="{{ wikiSession.speedAverageMax }}"
                                                       data-pow_min="{{ wikiSession.powMin }}"
                                                       data-pow_max="{{ wikiSession.powMax }}"
                                                       data-hr-type="{{ wikiSession.hrType }}"
                                                       data-hr_coeff_min="{{ wikiSession.hrCoeffMin }}"
                                                       data-hr_coeff_max="{{ wikiSession.hrCoeffMax }}"
                                                       data-interval_distance="{{ wikiSession.intervalDistance }}"
                                                       data-interval_duration="{{ wikiSession.intervalDuration }}"
                                                       data-vma_coeff="{{ wikiSession.VMACoeff }}"
                                                       data-difficulty_id="{{ wikiSession.difficulty_id }}"
                                                       >{{ wikiSession.sessionTitle }} {% if wikiSession.sport_label is not null %} ({{ wikiSession.sport_label }}) {% else %} (Pas de sport !){% endif %}</div>
                                                </center>
                                            {% endif %}
                                        {% endfor %}
                                        </li>
                                        </ul>
                                        </div>
                                                    </td>
                                                </tr>
                                        </tbody>
                                    </table>     
                                {% endif %}
                            </div>
                            <div class="subscriptions">
                                {% set new_category = '' %}
                                {% set first = true %}
                                {% if favoriteSessions|length == 0 %}
                                    <div class="pull-left">
                                        <br/>
                                        <br/>
                                        {{ 'coaching.no-favorite-sessions'|trans }}
                                        <br/>
                                        <br/>
                                        <center><a href="#" onclick="window.location.reload(true);" rel="tooltip" title="Rafraichir la page pour prendre en compte les modifications" class="btn glyphicon glyphicon-refresh" > Rafraichir</a></center>
                                    </div>
                                {% else %}
                                    
                                    <table class="table table-bordered favoriteSessions" style="clear:both">
                                        <thead>
                                            <tr>
                                                <th><center>{{ 'coaching.result'|trans }}&nbsp;&nbsp;<span class="glyphicon glyphicon-share-alt"></span></center></th>
                                            </tr>
                                        </thead>
                                        <tbody>

                                            {% for favoriteSession in favoriteSessions %}
                                            {% if favoriteSession.category != 'Défaut' %}
                                                {% if new_category != favoriteSession.category %}
                                                    {% set new_category = favoriteSession.category %}
                                                    {% if first == true %}
                                                        {% set first = false %}
                                                    {% else %}
                                                        </li>
                                                        </ul>
                                                        </div>
                                                        </tr>
                                                        </td>

                                                    {% endif %}
                                                        <tr>
                                                        <td>
                                                        <div class="btn-group">
                                                            <button id="btnGroupVerticalDrop1" type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                                                {% if favoriteSession.category|length > 15 %}
                                                                    {{ favoriteSession.category|slice(0,15) ~ "…" }}
                                                                {% else %}
                                                                    {{ favoriteSession.category }}
                                                                {% endif %}
                                                            <span class="caret"></span>
                                                            </button>
                                                        <ul class="dropdown-menu" role="menu" aria-labelledby="btnGroupVerticalDrop1">
                                                        <li>
                                                {% endif %}
                                                <center>
                                                        <div class='external-event' rel="tooltip" title="{% if favoriteSession.content is null or favoriteSession.content == '' %} - {% else %} {{ favoriteSession.content }} {% endif %}"
                                                       data-sport_id="{{ favoriteSession.sport_id }}"
                                                       data-sport_code="{{ favoriteSession.sport_code }}"
                                                       data-sport_label="{{ favoriteSession.sport_label }}"
                                                       data-category_id="{{ favoriteSession.coachingCategory_id }}"
                                                       data-category="{{ favoriteSession.category }}"
                                                       data-id="{{ favoriteSession.coachingSession_id }}"
                                                       data-title="{{ favoriteSession.sessionTitle }}"
                                                       data-content="{{ favoriteSession.content }}"
                                                       data-distance_min="{{ favoriteSession.distanceMin }}"
                                                       data-distance_max="{{ favoriteSession.distanceMax }}"
                                                       data-duration_min="{{ favoriteSession.durationMin }}"
                                                       data-duration_max="{{ favoriteSession.durationMax }}"
                                                       data-elevation_gain_min="{{ favoriteSession.elevationGainMin }}"
                                                       data-elevation_gain_max="{{ favoriteSession.elevationGainMax }}"
                                                       data-elevation_lost_min="{{ favoriteSession.elevationLostMin }}"
                                                       data-elevation_lost_max="{{ favoriteSession.elevationLostMax }}"
                                                       data-speed_average_min="{{ favoriteSession.speedAverageMin }}"
                                                       data-speed_average_max="{{ favoriteSession.speedAverageMax }}"
                                                       data-pow_min="{{ favoriteSession.powMin }}"
                                                       data-pow_max="{{ favoriteSession.powMax }}"
                                                       data-hr-type="{{ favoriteSession.hrType }}"
                                                       data-hr_coeff_min="{{ favoriteSession.hrCoeffMin }}"
                                                       data-hr_coeff_max="{{ favoriteSession.hrCoeffMax }}"
                                                       data-interval_distance="{{ favoriteSession.intervalDistance }}"
                                                       data-interval_duration="{{ favoriteSession.intervalDuration }}"
                                                       data-vma_coeff="{{ favoriteSession.VMACoeff }}"
                                                       data-difficulty_id="{{ favoriteSession.difficulty_id }}"
                                                    >{{ favoriteSession.sessionTitle }} {% if favoriteSession.sport_label is not null %} ({{ favoriteSession.sport_label }}) {% else %} (Pas de sport !){% endif %}</div>
                                                </center>
                                            {% endif %}
                                        {% endfor %}
                                        </li>
                                        </ul>
                                        </div>
                                                    </td>
                                                </tr>
                                        </tbody>
                                    </table> 
                                {% endif %}
                            </div>
                        </div>
                    </div><!--/.compose-->
                {% endif %}

                <div class="content">
                    <div class="container no-clear">
                        <!--agenda-->
                        {% if is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and not isManagerFromAClub >0 and (app.user.id != user.id or not user.isAllowedPackElite and not user.isAllowedPackPremium) %}
                            <div class="">
                                {#<a href="{{ path('ksDashboard_statistics', {'id': user.id }) }}" class="btn btn-small pull-right {% if user.id == app.user.id %}btn-sportif {% else %}btn-friends{% endif %}" >
                                    <i class="icon-search icon-white "></i>
                                </a>#}
                                <center> 
                                    <h3 class="title bleu">{{ "titles.season-evolution"|trans }}</h3>
                                    <div class="evolutionBySeason">
                                        <img id="evolutionBySeasonLoader" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader"/>
                                        <div id="evolutionBySeasonContainer"></div>
                                    </div>
                                </center>
                            </div>
                            <br><br>
                        {% endif %}
                        
                        <div id="agenda" class="fc">
                        </div>
                            
                        <!--bloc4-->
                        {% if club is defined and club is not null and clubIsCoach or user is defined and user is not null %}
                            <div class="bloc4 desktop" id="bloc4">
                                <div class="container">
                                    <center><h3 class="date bleu">Détails de la période sélectionnée</h3></center>
                                    <center>
                                        <img id="flatViewLoader" src="{{ asset('img/loader_ks_57.gif') }}" alt="loader" style="display:none"/>
                                    </center>
                                    <br clear="all"/>
                                    <div id="KPIDetailsContainer"></div>
                                </div><!--/container-->
                            </div><!--/bloc4-->
                        {% endif %}
                    </div>   <!--/agenda-->      
                </div>  <!--/.content--> 
            </div><!--/container bloc3-->
        </div><!--/bloc3-->
        
        <div class="bloc5 desktop" id="bloc5">
            {% if citations|length != 0 and (not is_granted("IS_AUTHENTICATED_REMEMBERED") and isManagerFromAClub > 0 and user is defined and user is not null and user.id != 7 and user is defined and user is not null and user.id != 7 or is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id != app.user.id and isManagerFromAClub >0 and user.id !=7) %}
                <div class="container">
                    <center><h3 style="color:white">Témoignagnes de sportifs coachés par {{ user.username }} sur Keepinsport</h3></center>
                    <div class="row" style="height: 200px;">
                        <div class="col-md-12">
                            <div id="myCarousel" class="carousel slide desktop" data-ride="carousel">
                                <div class="carousel-inner">
                                    {% set key = 0 %}
                                    {% set first = 0 %}
                                    {% for citation in citations %}
                                        {% if citation.user is defined and citation.user is not null %}
                                            {% if key % 1 == 0 and first == 0%}
                                                <div class="item active">
                                                    <div class="container2">
                                                {% set first = 1 %}
                                            {% elseif key % 1 == 0 and first == 1 %}
                                                    </div>
                                                </div>
                                                <div class="item">
                                                    <div class="container2">
                                            {% endif %}
                                                        <center>
                                                        <div class="col-md-12">
                                                            <span class="pull">
                                                                <span class="media-object">
                                                                    {% include 'KsUserBundle:User:_userImage_league.html.twig' with { 
                                                                        'user_id' : citation.user.id, 
                                                                        'user_username' : citation.user.username, 
                                                                        'user_imageName': citation.user.imageName, 
                                                                        'user_league_category' : citation.user.leagueCategoryLabel, 
                                                                        'user_league_stars' : citation.user.leagueLevelStarNumber,
                                                                        'withBubble' : false
                                                                    } %}
                                                                </span>
                                                            </span><!--/pull-->
                                                            <div class="testimony" style="text-align: justify; padding:0px 20px 0px 20px">
                                                                <span class="guillemet">“</span> {{ citation.text }} <span class="guillemet">”</span>
                                                            </div>
                                                            <div class="name-testimony" style="font-size: 0.8em">
                                                                <i>{{ citation.user.firstName }}, ligue {{ ("leagues." ~ citation.user.leagueCategoryLabel)|trans }} {{ citation.user.leagueLevelStarNumber }} {{ "leagues.stars-number"|transchoice(citation.user.leagueLevelStarNumber) }}</i>
                                                            </div>      
                                                        </div>
                                                        </center>
                                        {% endif %}
                                        {% set key = key + 1 %}
                                    {% endfor %}
                                                    </div>
                                                </div>
                                </div>
                                <a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev"><span class="glyphicon glyphicon-chevron-left"></span></a>
                                <a class="right carousel-control" href="#myCarousel" role="button" data-slide="next"><span class="glyphicon glyphicon-chevron-right"></span></a>
                            </div>	<!--/ Carousel Desktop-->	

                            <!--Carousel Mobile-->
                            <div id="myCarousel2" class="carousel slide mobile" data-ride="carousel">
                                <div class="carousel-inner">
                                    {% set key =0 %}
                                    {% for citation in citations %}
                                        {% if citation.user is defined and citation.user is not null %}
                                            {% if key == 0 %}
                                                <div class="item active">
                                            {% else %}
                                                <div class="item">
                                            {% endif %}
                                                    <div class="col-md-3">
                                                        <span class="pull">
                                                            <span class="media-object">
                                                                {% include 'KsUserBundle:User:_userImage_league.html.twig' with { 
                                                                    'user_id' : citation.user.id, 
                                                                    'user_username' : citation.user.username, 
                                                                    'user_imageName': citation.user.imageName, 
                                                                    'user_league_category' : citation.user.leagueCategoryLabel, 
                                                                    'user_league_stars' : citation.user.leagueLevelStarNumber,
                                                                    'withBubble' : false
                                                                } %}
                                                            </span>
                                                        </span><!--/pull-->
                                                        <div class="testimony">
                                                            <span class="guillemet">“</span> {{ citation.text }} <span class="guillemet">”</span>
                                                        </div>
                                                        <div class="name-testimony" style="font-size: 0.8em">
                                                            <i>{{ citation.user.firstName }}, ligue {{ ("leagues." ~ citation.user.leagueCategoryLabel)|trans }} {{ citation.user.leagueLevelStarNumber }} {{ "leagues.stars-number"|transchoice(citation.user.leagueLevelStarNumber) }}</i>
                                                        </div>
                                                    </div>
                                            </div>
                                            {% set key = key + 1 %}
                                        {% endif %}
                                    {% endfor %}
                                </div>
                                <a class="left carousel-control" href="#myCarousel2" role="button" data-slide="prev"><span class="glyphicon glyphicon-chevron-left"></span></a>
                                <a class="right carousel-control" href="#myCarousel2" role="button" data-slide="next"><span class="glyphicon glyphicon-chevron-right"></span></a>
                            </div>
                        </div>
                    </div>
                </div>
            {% endif %}
            <div class="container">
                <div id="flatViewContainer"></div>
            </div>
        </div>
    </div>
    {% if not is_granted("IS_AUTHENTICATED_REMEMBERED") or is_granted("IS_AUTHENTICATED_REMEMBERED") and user is defined and user is not null and user.id != app.user.id and isManagerFromAClub >0 and user.id !=7 %}
        <div class="bloc6" id="bloc6">
            <div class="container">
                <div class="row">
                    <br>
                    {% if user.userDetail.coachHasSponsors %}
                        <img class="col-md-12" src="{{ asset('V2/images/coachs/' ~ user.id ~ '/sponsors.jpg') }}" alt="">
                    {% endif %}
                    <br>
                </div>
            </div>
        </div>
    {% endif %}
{% endblock body %}
